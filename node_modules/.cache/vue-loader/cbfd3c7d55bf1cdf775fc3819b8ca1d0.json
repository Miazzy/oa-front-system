{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/jeecg/JTreeSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/jeecg/JTreeSelect.vue","mtime":1571018558898},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/*\n* 异步树加载组件 通过传入表名 显示字段 存储字段 加载一个树控件\n* <j-tree-select dict=\"aa_tree_test,aad,id\" pid-field=\"pid\" ></j-tree-select>\n* */\nimport { getAction } from '@/api/manage'\n\nexport default {\n  name: 'JTreeSelect',\n  props: {\n    value:{\n      type: String,\n      required: false\n    },\n    placeholder:{\n      type: String,\n      default: '请选择',\n      required: false\n    },\n    dict:{\n      type: String,\n      default: '',\n      required: false\n    },\n    pidField:{\n      type: String,\n      default: 'pid',\n      required: false\n    },\n    pidValue:{\n      type: String,\n      default: '0',\n      required: false\n    },\n    disabled:{\n      type:Boolean,\n      default:false,\n      required:false\n    },\n    hasChildField:{\n      type: String,\n      default: '',\n      required: false\n    }\n  },\n  data () {\n    return {\n      treeValue:\"\",\n      treeData:[],\n      url:\"/sys/dict/loadTreeData\",\n      view:'/sys/dict/loadDictItem/',\n      tableName:\"\",\n      text:\"\",\n      code:\"\",\n\n    }\n  },\n  watch: {\n    value () {\n      this.loadItemByCode()\n    },\n    dict(){\n      this.initDictInfo()\n      this.loadRoot();\n    }\n  },\n  created(){\n    this.initDictInfo()\n    this.loadRoot()\n    this.loadItemByCode()\n  },\n  methods: {\n    loadItemByCode(){\n      if(!this.value || this.value==\"0\"){\n        this.treeValue = \"\"\n      }else{\n        getAction(`${this.view}${this.dict}`,{key:this.value}).then(res=>{\n          if(res.success){\n            this.treeValue = {\n              key:this.value,\n              value:this.value,\n              label:res.result\n            }\n          }\n        })\n      }\n    },\n    initDictInfo(){\n      let arr = this.dict.split(\",\")\n      this.tableName = arr[0]\n      this.text = arr[1]\n      this.code = arr[2]\n    },\n    asyncLoadTreeData (treeNode) {\n      return new Promise((resolve) => {\n        if (treeNode.$vnode.children) {\n          resolve()\n          return\n        }\n        let pid = treeNode.$vnode.key\n        let param = {\n          pid:pid,\n          tableName:this.tableName,\n          text:this.text,\n          code:this.code,\n          pidField:this.pidField,\n          hasChildField:this.hasChildField\n        }\n        getAction(this.url,param).then(res=>{\n          if(res.success){\n            for(let i of res.result){\n              i.value = i.key\n              if(i.leaf==false){\n                i.isLeaf=false\n              }else if(i.leaf==true){\n                i.isLeaf=true\n              }\n            }\n            this.addChildren(pid,res.result,this.treeData)\n            this.treeData = [...this.treeData]\n          }\n          resolve()\n        })\n      })\n    },\n    addChildren(pid,children,treeArray){\n      if(treeArray && treeArray.length>0){\n        for(let item of treeArray){\n          if(item.key == pid){\n            if(!children || children.length==0){\n              item.isLeaf=true\n            }else{\n              item.children = children\n            }\n            break\n          }else{\n            this.addChildren(pid,children,item.children)\n          }\n        }\n      }\n    },\n    loadRoot(){\n      let param = {\n        pid:this.pidValue,\n        tableName:this.tableName,\n        text:this.text,\n        code:this.code,\n        pidField:this.pidField,\n        hasChildField:this.hasChildField\n      }\n      getAction(this.url,param).then(res=>{\n        if(res.success && res.result){\n          for(let i of res.result){\n            i.value = i.key\n            if(i.leaf==false){\n              i.isLeaf=false\n            }else if(i.leaf==true){\n              i.isLeaf=true\n            }\n          }\n          this.treeData = [...res.result]\n        }else{\n          console.log(\"数根节点查询结果-else\",res)\n        }\n      })\n    },\n    onChange(value){\n      if(!value){\n        this.$emit('change', '');\n        this.treeValue = ''\n      }else{\n        this.$emit('change', value.value);\n        this.treeValue = value\n      }\n\n    },\n    onSearch(value){\n      console.log(value)\n    },\n    getCurrTreeData(){\n      return this.treeData\n    }\n  },\n  //2.2新增 在组件内定义 指定父组件调用时候的传值属性和事件类型 这个牛逼\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n}\n",{"version":3,"sources":["JTreeSelect.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAifile":"JTreeSelect.vue","sourceRoot":"src/components/jeecg","sourcesContent":["<template>\n  <a-tree-select\n    allowClear\n    labelInValue\n    style=\"width: 100%\"\n    :disabled=\"disabled\"\n    :dropdownStyle=\"{ maxHeight: '400px', overflow: 'auto' }\"\n    :placeholder=\"placeholder\"\n    :loadData=\"asyncLoadTreeData\"\n    :value=\"treeValue\"\n    :treeData=\"treeData\"\n    @change=\"onChange\"\n    @search=\"onSearch\">\n  </a-tree-select>\n</template>\n<script>\n\n  /*\n  * 异步树加载组件 通过传入表名 显示字段 存储字段 加载一个树控件\n  * <j-tree-select dict=\"aa_tree_test,aad,id\" pid-field=\"pid\" ></j-tree-select>\n  * */\n  import { getAction } from '@/api/manage'\n\n  export default {\n    name: 'JTreeSelect',\n    props: {\n      value:{\n        type: String,\n        required: false\n      },\n      placeholder:{\n        type: String,\n        default: '请选择',\n        required: false\n      },\n      dict:{\n        type: String,\n        default: '',\n        required: false\n      },\n      pidField:{\n        type: String,\n        default: 'pid',\n        required: false\n      },\n      pidValue:{\n        type: String,\n        default: '0',\n        required: false\n      },\n      disabled:{\n        type:Boolean,\n        default:false,\n        required:false\n      },\n      hasChildField:{\n        type: String,\n        default: '',\n        required: false\n      }\n    },\n    data () {\n      return {\n        treeValue:\"\",\n        treeData:[],\n        url:\"/sys/dict/loadTreeData\",\n        view:'/sys/dict/loadDictItem/',\n        tableName:\"\",\n        text:\"\",\n        code:\"\",\n\n      }\n    },\n    watch: {\n      value () {\n        this.loadItemByCode()\n      },\n      dict(){\n        this.initDictInfo()\n        this.loadRoot();\n      }\n    },\n    created(){\n      this.initDictInfo()\n      this.loadRoot()\n      this.loadItemByCode()\n    },\n    methods: {\n      loadItemByCode(){\n        if(!this.value || this.value==\"0\"){\n          this.treeValue = \"\"\n        }else{\n          getAction(`${this.view}${this.dict}`,{key:this.value}).then(res=>{\n            if(res.success){\n              this.treeValue = {\n                key:this.value,\n                value:this.value,\n                label:res.result\n              }\n            }\n          })\n        }\n      },\n      initDictInfo(){\n        let arr = this.dict.split(\",\")\n        this.tableName = arr[0]\n        this.text = arr[1]\n        this.code = arr[2]\n      },\n      asyncLoadTreeData (treeNode) {\n        return new Promise((resolve) => {\n          if (treeNode.$vnode.children) {\n            resolve()\n            return\n          }\n          let pid = treeNode.$vnode.key\n          let param = {\n            pid:pid,\n            tableName:this.tableName,\n            text:this.text,\n            code:this.code,\n            pidField:this.pidField,\n            hasChildField:this.hasChildField\n          }\n          getAction(this.url,param).then(res=>{\n            if(res.success){\n              for(let i of res.result){\n                i.value = i.key\n                if(i.leaf==false){\n                  i.isLeaf=false\n                }else if(i.leaf==true){\n                  i.isLeaf=true\n                }\n              }\n              this.addChildren(pid,res.result,this.treeData)\n              this.treeData = [...this.treeData]\n            }\n            resolve()\n          })\n        })\n      },\n      addChildren(pid,children,treeArray){\n        if(treeArray && treeArray.length>0){\n          for(let item of treeArray){\n            if(item.key == pid){\n              if(!children || children.length==0){\n                item.isLeaf=true\n              }else{\n                item.children = children\n              }\n              break\n            }else{\n              this.addChildren(pid,children,item.children)\n            }\n          }\n        }\n      },\n      loadRoot(){\n        let param = {\n          pid:this.pidValue,\n          tableName:this.tableName,\n          text:this.text,\n          code:this.code,\n          pidField:this.pidField,\n          hasChildField:this.hasChildField\n        }\n        getAction(this.url,param).then(res=>{\n          if(res.success && res.result){\n            for(let i of res.result){\n              i.value = i.key\n              if(i.leaf==false){\n                i.isLeaf=false\n              }else if(i.leaf==true){\n                i.isLeaf=true\n              }\n            }\n            this.treeData = [...res.result]\n          }else{\n            console.log(\"数根节点查询结果-else\",res)\n          }\n        })\n      },\n      onChange(value){\n        if(!value){\n          this.$emit('change', '');\n          this.treeValue = ''\n        }else{\n          this.$emit('change', value.value);\n          this.treeValue = value\n        }\n\n      },\n      onSearch(value){\n        console.log(value)\n      },\n      getCurrTreeData(){\n        return this.treeData\n      }\n    },\n    //2.2新增 在组件内定义 指定父组件调用时候的传值属性和事件类型 这个牛逼\n    model: {\n      prop: 'value',\n      event: 'change'\n    }\n  }\n</script>\n"]}]}