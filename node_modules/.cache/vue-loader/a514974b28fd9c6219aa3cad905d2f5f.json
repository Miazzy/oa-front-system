{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/modules/monitor/RedisInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/modules/monitor/RedisInfo.vue","mtime":1571018558928},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js","mtime":1565533683804},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":1571018827562}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport { getAction } from '@/api/manage'\nimport AreaChartTy from '@/components/chart/AreaChartTy'\n\nexport default {\n  name: 'RedisInfo',\n  components: {\n    AreaChartTy\n  },\n  data() {\n    return {\n      loading: true,\n      tableLoading: true,\n      // 定时器ID\n      timer: null,\n      // 定时器周期\n      millisec: 3000,\n      // Key 实时数量\n      key: {\n        title: 'Radis Key 实时数量（个）',\n        dataSource: [],\n        y: '数量（个）',\n        height: 340,\n        min: 0,\n        max: 100,\n        color: '#FF6987',\n        lineSize: 8,\n        lineColor: '#DC143C'\n      },\n      // 内存实时占用情况\n      memory: {\n        title: 'Radis 内存实时占用情况（KB）',\n        dataSource: [],\n        y: '内存（KB）',\n        min: 0,\n        max: 3000,\n        height: 340,\n        lineSize: 8\n      },\n      redisInfo: [],\n      columns: [{\n        title: 'Key',\n        align: 'center',\n        dataIndex: 'key'\n      }, {\n        title: 'Description',\n        align: 'left',\n        dataIndex: 'description'\n      }, {\n        title: 'Value',\n        align: 'center',\n        dataIndex: 'value'\n      }],\n      url: {\n        keysSize: '/actuator/redis/keysSize',\n        memoryInfo: '/actuator/redis/memoryInfo',\n        info: '/actuator/redis/info'\n      },\n      path: '/monitor/redis/info'\n    }\n  },\n  mounted() {\n    this.openTimer()\n    this.loadRedisInfo()\n    setTimeout(() => {\n      this.loadData()\n    }, 1000)\n  },\n  beforeDestroy() {\n    this.closeTimer()\n  },\n  methods: {\n\n    /** 开启定时器 */\n    openTimer() {\n      this.loadData()\n      this.closeTimer()\n      this.timer = setInterval(() => {\n        if (this.$route.path === this.path) {\n          this.loadData()\n        }\n      }, this.millisec)\n    },\n\n    /** 关闭定时器 */\n    closeTimer() {\n      if (this.timer) clearInterval(this.timer)\n    },\n\n    /** 查询数据 */\n    loadData() {\n      Promise.all([\n        getAction(this.url.keysSize),\n        getAction(this.url.memoryInfo)\n      ]).then((res) => {\n        let time = moment().format('hh:mm:ss')\n\n        let [{ dbSize: currentSize }, memoryInfo] = res\n        let currentMemory = memoryInfo.used_memory / 1000\n\n        // push 数据\n        this.key.dataSource.push({ x: time, y: currentSize })\n        this.memory.dataSource.push({ x: time, y: currentMemory })\n        // 最大长度为6\n        if (this.key.dataSource.length > 6) {\n          this.key.dataSource.splice(0, 1)\n          this.memory.dataSource.splice(0, 1)\n        }\n\n        // 计算 Key 最大最小值\n        let keyPole = this.getMaxAndMin(this.key.dataSource, 'y')\n        this.key.max = Math.floor(keyPole[0]) + 10\n        this.key.min = Math.floor(keyPole[1]) - 10\n        if (this.key.min < 0) this.key.min = 0\n\n        // 计算 Memory 最大最小值\n        let memoryPole = this.getMaxAndMin(this.memory.dataSource, 'y')\n        this.memory.max = Math.floor(memoryPole[0]) + 100\n        this.memory.min = Math.floor(memoryPole[1]) - 100\n        if (this.memory.min < 0) this.memory.min = 0\n\n      }).catch((e) => {\n        console.error(e)\n        this.closeTimer()\n        this.$message.error('获取 Redis 信息失败')\n      }).finally(() => {\n        this.loading = false\n      })\n\n    },\n\n    // 获取一组数据中最大和最小的值\n    getMaxAndMin(dataSource, field) {\n      let maxValue = null, minValue = null\n      dataSource.forEach(item => {\n        let value = Number.parseInt(item[field])\n        // max\n        if (maxValue == null) {\n          maxValue = value\n        } else if (value > maxValue) {\n          maxValue = value\n        }\n        // min\n        if (minValue == null) {\n          minValue = value\n        } else if (value < minValue) {\n          minValue = value\n        }\n      })\n      return [maxValue, minValue]\n    },\n\n    loadRedisInfo() {\n      this.tableLoading = true\n      getAction(this.url.info).then((res) => {\n        this.redisInfo = res.result\n      }).finally(() => {\n        this.tableLoading = false\n      })\n    }\n\n  }\n}\n",{"version":3,"sources":["RedisInfo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"RedisInfo.vue","sourceRoot":"src/views/modules/monitor","sourcesContent":["<template>\n  <a-skeleton active :loading=\"loading\" :paragraph=\"{rows: 17}\">\n    <a-card>\n      <!-- Radis 信息实时监控 -->\n      <a-row :gutter=\"8\">\n        <a-col :sm=\"24\" :xl=\"12\">\n          <area-chart-ty v-bind=\"memory\"/>\n        </a-col>\n        <a-col :sm=\"24\" :xl=\"12\">\n          <area-chart-ty v-bind=\"key\"/>\n        </a-col>\n      </a-row>\n\n      <h3>Redis 详细信息</h3>\n      <a-table\n        :loading=\"tableLoading\"\n        :columns=\"columns\"\n        :dataSource=\"redisInfo\"\n        :pagination=\"false\"/>\n\n    </a-card>\n  </a-skeleton>\n</template>\n<script>\n  import moment from 'moment'\n  import { getAction } from '@/api/manage'\n  import AreaChartTy from '@/components/chart/AreaChartTy'\n\n  export default {\n    name: 'RedisInfo',\n    components: {\n      AreaChartTy\n    },\n    data() {\n      return {\n        loading: true,\n        tableLoading: true,\n        // 定时器ID\n        timer: null,\n        // 定时器周期\n        millisec: 3000,\n        // Key 实时数量\n        key: {\n          title: 'Radis Key 实时数量（个）',\n          dataSource: [],\n          y: '数量（个）',\n          height: 340,\n          min: 0,\n          max: 100,\n          color: '#FF6987',\n          lineSize: 8,\n          lineColor: '#DC143C'\n        },\n        // 内存实时占用情况\n        memory: {\n          title: 'Radis 内存实时占用情况（KB）',\n          dataSource: [],\n          y: '内存（KB）',\n          min: 0,\n          max: 3000,\n          height: 340,\n          lineSize: 8\n        },\n        redisInfo: [],\n        columns: [{\n          title: 'Key',\n          align: 'center',\n          dataIndex: 'key'\n        }, {\n          title: 'Description',\n          align: 'left',\n          dataIndex: 'description'\n        }, {\n          title: 'Value',\n          align: 'center',\n          dataIndex: 'value'\n        }],\n        url: {\n          keysSize: '/actuator/redis/keysSize',\n          memoryInfo: '/actuator/redis/memoryInfo',\n          info: '/actuator/redis/info'\n        },\n        path: '/monitor/redis/info'\n      }\n    },\n    mounted() {\n      this.openTimer()\n      this.loadRedisInfo()\n      setTimeout(() => {\n        this.loadData()\n      }, 1000)\n    },\n    beforeDestroy() {\n      this.closeTimer()\n    },\n    methods: {\n\n      /** 开启定时器 */\n      openTimer() {\n        this.loadData()\n        this.closeTimer()\n        this.timer = setInterval(() => {\n          if (this.$route.path === this.path) {\n            this.loadData()\n          }\n        }, this.millisec)\n      },\n\n      /** 关闭定时器 */\n      closeTimer() {\n        if (this.timer) clearInterval(this.timer)\n      },\n\n      /** 查询数据 */\n      loadData() {\n        Promise.all([\n          getAction(this.url.keysSize),\n          getAction(this.url.memoryInfo)\n        ]).then((res) => {\n          let time = moment().format('hh:mm:ss')\n\n          let [{ dbSize: currentSize }, memoryInfo] = res\n          let currentMemory = memoryInfo.used_memory / 1000\n\n          // push 数据\n          this.key.dataSource.push({ x: time, y: currentSize })\n          this.memory.dataSource.push({ x: time, y: currentMemory })\n          // 最大长度为6\n          if (this.key.dataSource.length > 6) {\n            this.key.dataSource.splice(0, 1)\n            this.memory.dataSource.splice(0, 1)\n          }\n\n          // 计算 Key 最大最小值\n          let keyPole = this.getMaxAndMin(this.key.dataSource, 'y')\n          this.key.max = Math.floor(keyPole[0]) + 10\n          this.key.min = Math.floor(keyPole[1]) - 10\n          if (this.key.min < 0) this.key.min = 0\n\n          // 计算 Memory 最大最小值\n          let memoryPole = this.getMaxAndMin(this.memory.dataSource, 'y')\n          this.memory.max = Math.floor(memoryPole[0]) + 100\n          this.memory.min = Math.floor(memoryPole[1]) - 100\n          if (this.memory.min < 0) this.memory.min = 0\n\n        }).catch((e) => {\n          console.error(e)\n          this.closeTimer()\n          this.$message.error('获取 Redis 信息失败')\n        }).finally(() => {\n          this.loading = false\n        })\n\n      },\n\n      // 获取一组数据中最大和最小的值\n      getMaxAndMin(dataSource, field) {\n        let maxValue = null, minValue = null\n        dataSource.forEach(item => {\n          let value = Number.parseInt(item[field])\n          // max\n          if (maxValue == null) {\n            maxValue = value\n          } else if (value > maxValue) {\n            maxValue = value\n          }\n          // min\n          if (minValue == null) {\n            minValue = value\n          } else if (value < minValue) {\n            minValue = value\n          }\n        })\n        return [maxValue, minValue]\n      },\n\n      loadRedisInfo() {\n        this.tableLoading = true\n        getAction(this.url.info).then((res) => {\n          this.redisInfo = res.result\n        }).finally(() => {\n          this.tableLoading = false\n        })\n      }\n\n    }\n  }\n</script>\n<style></style>\n"]}]}