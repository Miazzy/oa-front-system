{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/user/Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/user/Login.vue","mtime":1571018558938},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":1565525386522},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js","mtime":1565533683804},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":1571018827562}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n//import md5 from \"md5\"\nimport api from '@/api'\nimport TwoStepCaptcha from '@/components/tools/TwoStepCaptcha'\nimport { mapActions } from \"vuex\"\nimport { timeFix } from \"@/utils/util\"\nimport Vue from 'vue'\nimport { ACCESS_TOKEN ,ENCRYPTED_STRING} from \"@/store/mutation-types\"\nimport JGraphicCode from '@/components/jeecg/JGraphicCode'\nimport { putAction } from '@/api/manage'\nimport { postAction } from '@/api/manage'\nimport { encryption , getEncryptedString } from '@/utils/encryption/aesEncrypt'\nimport store from '@/store/'\nimport { USER_INFO } from \"@/store/mutation-types\"\n\nexport default {\n  components: {\n    TwoStepCaptcha,\n    JGraphicCode\n  },\n  data () {\n    return {\n      customActiveKey: \"tab1\",\n      loginBtn: false,\n      // login type: 0 email, 1 username, 2 telephone\n      loginType: 0,\n      requiredTwoStepCaptcha: false,\n      stepCaptchaVisible: false,\n      form: this.$form.createForm(this),\n      encryptedString:{\n        key:\"\",\n        iv:\"\",\n      },\n      state: {\n        time: 60,\n        smsSendBtn: false,\n      },\n      formLogin: {\n        username: \"\",\n        password: \"\",\n        captcha: \"\",\n        mobile: \"\",\n        rememberMe: true\n      },\n      validatorRules:{\n        username:{rules: [{ required: true, message: '请输入用户名!',validator: 'click'}]},\n        password:{rules: [{ required: true, message: '请输入密码!',validator: 'click'}]},\n        mobile:{rules: [{validator:this.validateMobile}]},\n        captcha:{rule: [{ required: true, message: '请输入验证码!'}]},\n        inputCode:{rules: [{ required: true, message: '请输入验证码!'},{validator: this.validateInputCode}]}\n      },\n      verifiedCode:\"\",\n      inputCodeContent:\"\",\n      inputCodeNull:true,\n\n      departList:[],\n      departVisible:false,\n      departSelected:\"\",\n      currentUsername:\"\",\n      validate_status:\"\"\n    }\n  },\n  created () {\n    Vue.ls.remove(ACCESS_TOKEN)\n    this.getRouterData();\n    // update-begin- --- author:scott ------ date:20190805 ---- for:密码加密逻辑暂时注释掉，有点问题\n    //this.getEncrypte();\n    // update-end- --- author:scott ------ date:20190805 ---- for:密码加密逻辑暂时注释掉，有点问题\n  },\n  methods: {\n    ...mapActions([ \"Login\", \"Logout\",\"PhoneLogin\" ]),\n    // handler\n    handleUsernameOrEmail (rule, value, callback) {\n      const regex = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\\.[a-zA-Z0-9_-]{2,3}){1,2})$/;\n      if (regex.test(value)) {\n        this.loginType = 0\n      } else {\n        this.loginType = 1\n      }\n      callback()\n    },\n    handleTabClick (key) {\n      this.customActiveKey = key\n      // this.form.resetFields()\n    },\n    handleSubmit () {\n      let that = this\n      let loginParams = {\n        remember_me: that.formLogin.rememberMe\n      };\n      that.loginBtn = true;\n      // 使用账户密码登陆\n      if (that.customActiveKey === 'tab1') {\n        that.form.validateFields([ 'username', 'password','inputCode' ], { force: true }, (err, values) => {\n          if (!err) {\n            loginParams.username = values.username\n            // update-begin- --- author:scott ------ date:20190805 ---- for:密码加密逻辑暂时注释掉，有点问题\n            //loginParams.password = md5(values.password)\n            //loginParams.password = encryption(values.password,that.encryptedString.key,that.encryptedString.iv)\n            loginParams.password = values.password\n            // update-begin- --- author:scott ------ date:20190805 ---- for:密码加密逻辑暂时注释掉，有点问题\n\n            that.Login(loginParams).then((res) => {\n              this.departConfirm(res)\n            }).catch((err) => {\n              that.requestFailed(err);\n            });\n\n\n          }else {\n            that.loginBtn = false;\n          }\n        })\n        // 使用手机号登陆\n      } else {\n        that.form.validateFields([ 'mobile', 'captcha' ], { force: true }, (err, values) => {\n          if (!err) {\n            loginParams.mobile = values.mobile\n            loginParams.captcha = values.captcha\n            that.PhoneLogin(loginParams).then((res) => {\n              console.log(res.result);\n              this.departConfirm(res)\n            }).catch((err) => {\n              that.requestFailed(err);\n            })\n\n          }\n        })\n      }\n    },\n    getCaptcha (e) {\n      e.preventDefault();\n      let that = this;\n      this.form.validateFields([ 'mobile' ], { force: true },(err,values) => {\n          if(!values.mobile){\n            that.cmsFailed(\"请输入手机号\");\n          }else if (!err) {\n            this.state.smsSendBtn = true;\n            let interval = window.setInterval(() => {\n              if (that.state.time-- <= 0) {\n                that.state.time = 60;\n                that.state.smsSendBtn = false;\n                window.clearInterval(interval);\n              }\n            }, 1000);\n\n            const hide = this.$message.loading('验证码发送中..', 0);\n            let smsParams = {};\n                smsParams.mobile=values.mobile;\n                smsParams.smsmode=\"0\";\n            postAction(\"/sys/sms\",smsParams)\n              .then(res => {\n                if(!res.success){\n                  setTimeout(hide, 0);\n                  this.cmsFailed(res.message);\n                }\n                console.log(res);\n                setTimeout(hide, 500);\n              })\n              .catch(err => {\n                setTimeout(hide, 1);\n                clearInterval(interval);\n                that.state.time = 60;\n                that.state.smsSendBtn = false;\n                this.requestFailed(err);\n              });\n          }\n        }\n      );\n    },\n    stepCaptchaSuccess () {\n      this.loginSuccess()\n    },\n    stepCaptchaCancel () {\n      this.Logout().then(() => {\n        this.loginBtn = false\n        this.stepCaptchaVisible = false\n      })\n    },\n    loginSuccess () {\n      // update-begin- author:sunjianlei --- date:20190812 --- for: 登录成功后不解除禁用按钮，防止多次点击\n      // this.loginBtn = false\n      // update-end- author:sunjianlei --- date:20190812 --- for: 登录成功后不解除禁用按钮，防止多次点击\n      this.$router.push({ name: \"dashboard\" })\n      this.$notification.success({\n        message: '欢迎',\n        description: `${timeFix()}，欢迎回来`,\n      });\n    },\n    cmsFailed(err){\n      this.$notification[ 'error' ]({\n        message: \"登录失败\",\n        description:err,\n        duration: 4,\n      });\n    },\n    requestFailed (err) {\n      this.$notification[ 'error' ]({\n        message: '登录失败',\n        description: ((err.response || {}).data || {}).message || err.message || \"请求出现错误，请稍后再试\",\n        duration: 4,\n      });\n      this.loginBtn = false;\n    },\n    validateMobile(rule,value,callback){\n      if (!value || new RegExp(/^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\\d{8}$/).test(value)){\n        callback();\n      }else{\n        callback(\"您的手机号码格式不正确!\");\n      }\n\n    },\n    validateInputCode(rule,value,callback){\n      if(!value || this.verifiedCode==this.inputCodeContent){\n        callback();\n      }else{\n        callback(\"您输入的验证码不正确!\");\n      }\n    },\n    generateCode(value){\n      this.verifiedCode = value.toLowerCase()\n    },\n    inputCodeChange(e){\n      this.inputCodeContent = e.target.value\n      if(!e.target.value||0==e.target.value){\n        this.inputCodeNull=true\n      }else{\n        this.inputCodeContent = this.inputCodeContent.toLowerCase()\n        this.inputCodeNull=false\n      }\n    },\n    departConfirm(res){\n      if(res.success){\n        let multi_depart = res.result.multi_depart\n        //0:无部门 1:一个部门 2:多个部门\n        if(multi_depart==0){\n          this.loginSuccess()\n          this.$notification.warn({\n            message: '提示',\n            description: `您尚未归属部门,请确认账号信息`,\n            duration:3\n          });\n        }else if(multi_depart==2){\n          this.departVisible=true\n          this.currentUsername=this.form.getFieldValue(\"username\")\n          this.departList = res.result.departs\n        }else {\n          this.loginSuccess()\n        }\n      }else{\n        this.requestFailed(res)\n        this.Logout();\n      }\n    },\n    departOk(){\n      if(!this.departSelected){\n        this.validate_status='error'\n        return false\n      }\n     let obj = {\n        orgCode:this.departSelected,\n        username:this.form.getFieldValue(\"username\")\n      }\n      putAction(\"/sys/selectDepart\",obj).then(res=>{\n        if(res.success){\n          const userInfo = res.result.userInfo;\n          Vue.ls.set(USER_INFO, userInfo, 7 * 24 * 60 * 60 * 1000);\n          store.commit('SET_INFO', userInfo);\n          //console.log(\"---切换组织机构---userInfo-------\",store.getters.userInfo.orgCode);\n          this.departClear()\n          this.loginSuccess()\n        }else{\n          this.requestFailed(res)\n          this.Logout().then(()=>{\n            this.departClear()\n          });\n        }\n      })\n    },\n    departClear(){\n      this.departList=[]\n      this.departSelected=\"\"\n      this.currentUsername=\"\"\n      this.departVisible=false\n      this.validate_status=''\n    },\n    departChange(value){\n      this.validate_status='success'\n      this.departSelected = value\n    },\n  getRouterData(){\n    this.$nextTick(() => {\n      this.form.setFieldsValue({\n      'username': this.$route.params.username\n    });\n  })\n  },\n  //获取密码加密规则\n  getEncrypte(){\n    var encryptedString = Vue.ls.get(ENCRYPTED_STRING);\n    if(encryptedString == null){\n      getEncryptedString().then((data) => {\n        this.encryptedString = data\n      });\n    }else{\n      this.encryptedString = encryptedString;\n    }\n  },\n  }\n}\n",null]}