{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/jeecg/JEditableTable.vue?vue&type=style&index=0&id=2f0c1ef1&lang=less&scoped=true&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/jeecg/JEditableTable.vue","mtime":1571018558896},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/css-loader/index.js","mtime":1571212864860},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/less-loader/dist/cjs.js","mtime":1571212861333},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.action-button {\n  margin-bottom: 8px;\n\n  .gap {\n    padding-left: 8px;\n  }\n\n}\n\n/* 设定边框参数 */\n@borderColor: #e8e8e8;\n@border: 1px solid @borderColor;\n/* tr & td 之间的间距 */\n@spacing: 8px;\n\n.input-table {\n  max-width: 100%;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  position: relative;\n  border: @border;\n\n  .thead, .tbody {\n\n    .tr, .td {\n      display: flex;\n    }\n\n    .td {\n\n      /*border-right: 1px solid red;*/\n      /*color: white;*/\n      /*background-color: black;*/\n      /*margin-right: @spacing !important;*/\n\n      padding-left: @spacing;\n      flex-direction: column;\n\n      &.td-cb, &.td-num {\n        min-width: 4%;\n        max-width: 45px;\n        margin-right: 0;\n        padding-left: 0;\n        padding-right: 0;\n        justify-content: center;\n        align-items: center;\n      }\n\n      &.td-ds {\n        margin-right: 0;\n        padding-left: 0;\n        padding-right: 0;\n        justify-content: center;\n        align-items: center;\n\n        .td-ds-icons {\n          position: relative;\n          cursor: move;\n          width: 100%;\n          /*padding: 25% 0;*/\n          height: 100%;\n\n          .anticon-align-left,\n          .anticon-align-right {\n            position: absolute;\n            top: 30%;\n          }\n\n          .anticon-align-left {\n            left: 25%;\n          }\n\n          .anticon-align-right {\n            right: 25%;\n          }\n        }\n\n\n      }\n\n    }\n\n  }\n\n  .thead {\n    overflow-y: scroll;\n    overflow-x: hidden;\n    border-bottom: @border;\n\n    /** 隐藏thead的滑块   */\n\n    &::-webkit-scrollbar-thumb {\n      box-shadow: none !important;\n      background-color: transparent !important;\n    }\n\n    .tr {\n      min-width: 100%;\n      overflow-y: scroll;\n    }\n\n    .td {\n      /*flex: 1;*/\n      padding: 8px @spacing;\n      justify-content: center;\n    }\n\n  }\n\n  .tbody {\n    position: relative;\n    top: 0;\n    left: 0;\n    overflow-x: hidden;\n    overflow-y: hidden;\n    min-height: 61px;\n    /*max-height: 400px;*/\n    min-width: 100%;\n\n    .tr-nodata {\n      color: #999;\n      line-height: 61px;\n      text-align: center;\n    }\n\n    .tr {\n      /*line-height: 50px;*/\n\n      border-bottom: @border;\n      transition: background-color 300ms;\n      width: 100%;\n      position: absolute;\n      left: 0;\n      z-index: 10;\n\n      &.tr-checked {\n        background-color: #fafafa;\n      }\n\n      &:hover {\n        background-color: #E6F7FF;\n      }\n\n    }\n\n    .tr-expand {\n      position: relative;\n      z-index: 9;\n      background-color: white;\n    }\n\n    .td {\n      /*flex: 1;*/\n      padding: 14px 0 14px @spacing;\n      justify-content: center;\n\n      &:last-child {\n        padding-right: @spacing;\n      }\n\n      input {\n        font-variant: tabular-nums;\n        box-sizing: border-box;\n        margin: 0;\n        list-style: none;\n        position: relative;\n        display: inline-block;\n        padding: 4px 11px;\n        width: 100%;\n        height: 32px;\n        font-size: 14px;\n        line-height: 1.5;\n        color: rgba(0, 0, 0, 0.65);\n        background-color: #fff;\n        border: 1px solid #d9d9d9;\n        border-radius: 4px;\n        transition: all 0.3s;\n        outline: none;\n\n        &:hover {\n          border-color: #4D90FE\n        }\n\n        &:focus {\n          border-color: #40a9ff;\n          box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n          border-right-width: 1px !important;\n        }\n\n        &:disabled {\n          color: rgba(0, 0, 0, 0.25);\n          background: #f5f5f5;\n          cursor: not-allowed;\n        }\n\n        /* 设置placeholder的颜色 */\n\n        &::-webkit-input-placeholder { /* WebKit browsers */\n          color: #ccc;\n        }\n\n        &:-moz-placeholder { /* Mozilla Firefox 4 to 18 */\n          color: #ccc;\n        }\n\n        &::-moz-placeholder { /* Mozilla Firefox 19+ */\n          color: #ccc;\n        }\n\n        &:-ms-input-placeholder { /* Internet Explorer 10+ */\n          color: #ccc;\n        }\n\n      }\n\n    }\n\n  }\n\n  .scroll-view {\n    overflow: auto;\n    overflow-y: scroll;\n  }\n\n  .thead, .thead .tr, .scroll-view {\n    @scrollBarSize: 6px;\n    /* 定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/\n\n    &::-webkit-scrollbar {\n      width: @scrollBarSize;\n      height: @scrollBarSize;\n      background-color: transparent;\n    }\n\n    /* 定义滚动条轨道 */\n\n    &::-webkit-scrollbar-track {\n      background-color: #f0f0f0;\n    }\n\n    /* 定义滑块 */\n\n    &::-webkit-scrollbar-thumb {\n      background-color: #eee;\n      box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n\n      &:hover {\n        background-color: #bbb;\n      }\n\n      &:active {\n        background-color: #888;\n      }\n    }\n\n  }\n\n  .thead .tr {\n\n    &::-webkit-scrollbar-track {\n      background-color: transparent;\n    }\n\n    /* IE模式下隐藏 */\n    -ms-overflow-style: none;\n    -ms-scroll-chaining: chained;\n    -ms-content-zooming: zoom;\n    -ms-scroll-rails: none;\n    -ms-content-zoom-limit-min: 100%;\n    -ms-content-zoom-limit-max: 500%;\n    -ms-scroll-snap-type: proximity;\n    -ms-scroll-snap-points-x: snapList(100%, 200%, 300%, 400%, 500%);\n  }\n\n}\n\n",{"version":3,"sources":["JEditableTable.vue"],"names":[],"mappingsiiDA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"JEditableTable.vue","sourceRoot":"src/components/jeecg","sourcesContent":["<!-- JEditableTable -->\n<!-- @version 1.4.4 -->\n<!-- @author sjlei -->\n<template>\n  <a-spin :spinning=\"loading\">\n\n    <!-- 操作按钮 -->\n    <div v-if=\"actionButton\" class=\"action-button\">\n      <a-button type=\"primary\" icon=\"plus\" @click=\"handleClickAdd\">新增</a-button>\n      <span class=\"gap\"></span>\n      <template v-if=\"selectedRowIds.length>0\">\n        <a-popconfirm\n          :title=\"`确定要删除这 ${selectedRowIds.length} 项吗?`\"\n          @confirm=\"handleConfirmDelete\">\n          <a-button type=\"primary\" icon=\"minus\">删除</a-button>\n        </a-popconfirm>\n        <template v-if=\"showClearSelectButton\">\n          <span class=\"gap\"></span>\n          <a-button icon=\"delete\" @click=\"handleClickClearSelect\">清空选择</a-button>\n        </template>\n      </template>\n    </div>\n\n    <div :id=\"`${caseId}inputTable`\" class=\"input-table\">\n      <!-- 渲染表头 -->\n      <div class=\"thead\" ref=\"thead\">\n        <div class=\"tr\" :style=\"{width: this.realTrWidth}\">\n          <!-- 左侧固定td  -->\n          <div v-if=\"dragSort\" class=\"td td-ds\" :style=\"style.tdLeftDs\">\n            <span></span>\n          </div>\n          <div v-if=\"rowSelection\" class=\"td td-cb\" :style=\"style.tdLeft\">\n            <!--:indeterminate=\"true\"-->\n            <a-checkbox\n              :checked=\"getSelectAll\"\n              :indeterminate=\"getSelectIndeterminate\"\n              @change=\"handleChangeCheckedAll\"\n            />\n          </div>\n          <div v-if=\"rowNumber\" class=\"td td-num\" :style=\"style.tdLeft\">\n            <span>#</span>\n          </div>\n          <!-- 右侧动态生成td -->\n          <template v-for=\"col in columns\">\n            <div\n              v-show=\"col.type !== formTypes.hidden\"\n              class=\"td\"\n              :key=\"col.key\"\n              :style=\"buildTdStyle(col)\">\n\n              <span>{{ col.title }}</span>\n            </div>\n          </template>\n        </div>\n      </div>\n\n      <div class=\"scroll-view\" ref=\"scrollView\" :style=\"{'max-height':maxHeight+'px'}\">\n\n\n        <!-- 渲染主体 body -->\n        <div :id=\"`${caseId}tbody`\" class=\"tbody\" :style=\"tbodyStyle\">\n          <!-- 扩展高度 -->\n          <div class=\"tr-expand\" :style=\"`height:${getExpandHeight}px; z-index:${loading?'11':'9'};`\"></div>\n          <!-- 无数据时显示 -->\n          <div v-if=\"rows.length===0\" class=\"tr-nodata\">\n            <span>暂无数据</span>\n          </div>\n          <draggable v-model=\"rows\" handle=\".td-ds-icons\" @end=\"handleDragMoveEnd\">\n\n            <!-- 动态生成tr -->\n            <template v-for=\"(row,rowIndex) in rows\">\n              <!-- tr 只加载可见的和预加载的总共十条数据 -->\n              <div\n                v-if=\"\n                rowIndex >= parseInt(`${(scrollTop-rowHeight) / rowHeight}`) &&\n                  (parseInt(`${scrollTop / rowHeight}`) + 9) > rowIndex\n              \"\n                :id=\"`${caseId}tbody-tr-${rowIndex}`\"\n                :data-idx=\"rowIndex\"\n                class=\"tr\"\n                :class=\"selectedRowIds.indexOf(row.id) !== -1 ? 'tr-checked' : ''\"\n                :style=\"buildTrStyle(rowIndex)\"\n                :key=\"row.id\">\n                <!-- 左侧固定td  -->\n\n                <div v-if=\"dragSort\" class=\"td td-ds\" :style=\"style.tdLeftDs\">\n                  <div class=\"td-ds-icons\">\n                    <a-icon type=\"align-left\"/>\n                    <a-icon type=\"align-right\"/>\n                  </div>\n                </div>\n\n                <div v-if=\"rowSelection\" class=\"td td-cb\" :style=\"style.tdLeft\">\n                  <!-- 此 v-for 只是为了拼接 id 字符串 -->\n                  <template v-for=\"(id,i) in [`${row.id}`]\">\n                    <a-checkbox\n                      :id=\"id\"\n                      :key=\"i\"\n                      :checked=\"selectedRowIds.indexOf(id) !== -1\"\n                      @change=\"handleChangeLeftCheckbox\"/>\n                  </template>\n                </div>\n                <div v-if=\"rowNumber\" class=\"td td-num\" :style=\"style.tdLeft\">\n                  <span>{{ rowIndex+1 }}</span>\n                </div>\n                <!-- 右侧动态生成td -->\n                <div\n                  class=\"td\"\n                  v-for=\"col in columns\"\n                  v-show=\"col.type !== formTypes.hidden\"\n                  :key=\"col.key\"\n                  :style=\"buildTdStyle(col)\">\n\n                  <!-- 此 v-for 只是为了拼接 id 字符串 -->\n                  <template v-for=\"(id,i) in [`${col.key}${row.id}`]\">\n\n                    <!-- native input -->\n                    <label :key=\"i\" v-if=\"col.type === formTypes.input || col.type === formTypes.inputNumber\">\n                      <a-tooltip\n                        :id=\"id\"\n                        placement=\"top\"\n                        :title=\"(tooltips[id] || {}).title\"\n                        :visible=\"(tooltips[id] || {}).visible || false\"\n                        :autoAdjustOverflow=\"true\">\n\n                        <input\n                          :id=\"id\"\n                          v-bind=\"buildProps(row,col)\"\n                          :data-input-number=\"col.type === formTypes.inputNumber\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          @input=\"(e)=>{handleInputCommono(e.target,rowIndex,row,col)}\"\n                          @mouseover=\"()=>{handleMouseoverCommono(row,col)}\"\n                          @mouseout=\"()=>{handleMouseoutCommono(row,col)}\"/>\n\n                      </a-tooltip>\n\n                    </label>\n                    <!-- checkbox -->\n                    <template v-else-if=\"col.type === formTypes.checkbox\">\n                      <a-checkbox\n                        :key=\"i\"\n                        :id=\"id\"\n                        v-bind=\"buildProps(row,col)\"\n                        :checked=\"checkboxValues[id]\"\n                        @change=\"(e)=>handleChangeCheckboxCommon(e,row,col)\"\n                      />\n                    </template>\n                    <!-- select -->\n                    <template v-else-if=\"col.type === formTypes.select\">\n                      <a-tooltip\n                        :key=\"i\"\n                        :id=\"id\"\n                        placement=\"top\"\n                        :title=\"(tooltips[id] || {}).title\"\n                        :visible=\"(tooltips[id] || {}).visible || false\"\n                        :autoAdjustOverflow=\"true\">\n\n                      <span\n                        @mouseover=\"()=>{handleMouseoverCommono(row,col)}\"\n                        @mouseout=\"()=>{handleMouseoutCommono(row,col)}\">\n\n                        <a-select\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"selectValues[id]\"\n                          :options=\"col.options\"\n                          :getPopupContainer=\"getParentContainer\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          @change=\"(v)=>handleChangeSelectCommon(v,id,row,col)\"\n                          @search=\"(v)=>handleSearchSelect(v,id,row,col)\"\n                          @blur=\"(v)=>handleBlurSearch(v,id,row,col)\"\n                        >\n\n                          <!--<template v-for=\"(opt,optKey) in col.options\">-->\n                          <!--<a-select-option :value=\"opt.value\" :key=\"optKey\">{{ opt.title }}</a-select-option>-->\n                          <!--</template>-->\n                        </a-select>\n                      </span>\n                      </a-tooltip>\n                    </template>\n                    <!-- date -->\n                    <template v-else-if=\"col.type === formTypes.date || col.type === formTypes.datetime\">\n                      <a-tooltip\n                        :key=\"i\"\n                        :id=\"id\"\n                        placement=\"top\"\n                        :title=\"(tooltips[id] || {}).title\"\n                        :visible=\"(tooltips[id] || {}).visible || false\"\n                        :autoAdjustOverflow=\"true\">\n\n                      <span\n                        @mouseover=\"()=>{handleMouseoverCommono(row,col)}\"\n                        @mouseout=\"()=>{handleMouseoutCommono(row,col)}\">\n\n                        <j-date\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"jdateValues[id]\"\n                          :getCalendarContainer=\"getParentContainer\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          :trigger-change=\"true\"\n                          :showTime=\"col.type === formTypes.datetime\"\n                          :dateFormat=\"col.type === formTypes.date? 'YYYY-MM-DD':'YYYY-MM-DD HH:mm:ss'\"\n                          @change=\"(v)=>handleChangeJDateCommon(v,id,row,col,col.type === formTypes.datetime)\"/>\n\n                      </span>\n                      </a-tooltip>\n                    </template>\n\n                    <div v-else-if=\"col.type === formTypes.upload\" :key=\"i\">\n                      <template v-if=\"uploadValues[id] != null\" v-for=\"(file,fileKey) of [(uploadValues[id]||{})]\">\n                        <a-input\n                          :key=\"fileKey\"\n                          :readOnly=\"true\"\n                          :value=\"file.name\"\n                        >\n\n                          <template slot=\"addonBefore\" style=\"width: 30px\">\n                            <a-tooltip v-if=\"file.status==='uploading'\" :title=\"`上传中(${Math.floor(file.percent)}%)`\">\n                              <a-icon type=\"loading\"/>\n                            </a-tooltip>\n                            <a-tooltip v-else-if=\"file.status==='done'\" title=\"上传完成\">\n                              <a-icon type=\"check-circle\" style=\"color:#00DB00;\"/>\n                            </a-tooltip>\n                            <a-tooltip v-else title=\"上传失败\">\n                              <a-icon type=\"exclamation-circle\" style=\"color:red;\"/>\n                            </a-tooltip>\n                          </template>\n\n                          <template slot=\"addonAfter\" style=\"width: 30px\">\n                            <a-tooltip title=\"删除并重新上传\">\n                              <a-icon\n                                v-if=\"file.status!=='uploading'\"\n                                type=\"close-circle\"\n                                style=\"cursor: pointer;\"\n                                @click=\"()=>handleClickDelFile(id)\"/>\n                            </a-tooltip>\n                          </template>\n\n                        </a-input>\n                      </template>\n\n                      <div :hidden=\"uploadValues[id] != null\">\n\n                        <a-upload\n                          name=\"file\"\n                          :data=\"{'isup':1}\"\n                          :multiple=\"false\"\n                          :action=\"col.action\"\n                          :headers=\"uploadGetHeaders(row,col)\"\n                          :showUploadList=\"false\"\n                          v-bind=\"buildProps(row,col)\"\n                          @change=\"(v)=>handleChangeUpload(v,id,row,col)\"\n                        >\n                          <a-button icon=\"upload\">{{ col.placeholder }}</a-button>\n                        </a-upload>\n                      </div>\n\n                    </div>\n\n                    <div v-else-if=\"col.type === formTypes.slot\" :key=\"i\">\n                      <slot\n                        :name=\"(col.slot || col.slotName) || col.key\"\n                        :index=\"rowIndex\"\n                        :text=\"inputValues[rowIndex][col.key]\"\n                        :column=\"col\"\n                        :rowId=\"removeCaseId(row.id)\"\n                        :getValue=\"()=>_getValueForSlot(row.id)\"\n                        :target=\"getVM()\"\n                      />\n                    </div>\n\n                    <!-- else (normal) -->\n                    <span v-else :key=\"i\">{{ inputValues[rowIndex][col.key] }}</span>\n                  </template>\n                </div>\n              </div>\n              <!-- -- tr end -- -->\n\n            </template>\n          </draggable>\n\n        </div>\n      </div>\n    </div>\n  </a-spin>\n</template>\n\n<script>\n  import Vue from 'vue'\n  import Draggable from 'vuedraggable'\n  import { ACCESS_TOKEN } from '@/store/mutation-types'\n  import { FormTypes, VALIDATE_NO_PASSED } from '@/utils/JEditableTableUtil'\n  import { cloneObject, randomString } from '@/utils/util'\n  import JDate from '@/components/jeecg/JDate'\n  import { initDictOptions } from '@/components/dict/JDictSelectUtil'\n\n  // 行高，需要在实例加载完成前用到\n  let rowHeight = 61\n\n  export default {\n    name: 'JEditableTable',\n    components: { JDate, Draggable },\n    props: {\n      // 列信息\n      columns: {\n        type: Array,\n        required: true\n      },\n      // 数据源\n      dataSource: {\n        type: Array,\n        required: true,\n        default: () => []\n      },\n      // 是否显示操作按钮\n      actionButton: {\n        type: Boolean,\n        default: false\n      },\n      // 是否显示行号\n      rowNumber: {\n        type: Boolean,\n        default: false\n      },\n      // 是否可选择行\n      rowSelection: {\n        type: Boolean,\n        default: false\n      },\n      // 页面是否在加载中\n      loading: {\n        type: Boolean,\n        default: false\n      },\n      // 页面是否在加载中\n      maxHeight: {\n        type: Number,\n        default: 400\n      },\n      // 要禁用的行\n      disabledRows: {\n        type: Object,\n        default() {\n          return {}\n        }\n      },\n      // 是否禁用全部组件\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      // 是否可拖拽排序\n      dragSort: {\n        type: Boolean,\n        default: false\n      },\n      dragSortKey: {\n        type: String,\n        default: 'orderNum'\n      },\n    },\n    data() {\n      return {\n        // caseId，用于防止有多个实例的时候会冲突\n        caseId: `_jet-${randomString(6)}-`,\n        // 存储document element 对象\n        el: {\n          inputTable: null,\n          tbody: null\n        },\n        // 存储各个div的style\n        style: {\n          // 'max-height': '400px'\n          tbody: { left: '0px' },\n          // 左侧固定td的style\n          tdLeft: { 'min-width': '4%', 'max-width': '45px' },\n          tdLeftDs: { 'min-width': '30px', 'max-width': '35px' },\n        },\n        // 表单的类型\n        formTypes: FormTypes,\n        // 行数据\n        rows: [],\n        // 行高，height + padding + border\n        rowHeight,\n        // 滚动条顶部距离\n        scrollTop: 0,\n        // 绑定 select 的值\n        selectValues: {},\n        // 绑定 checkbox 的值\n        checkboxValues: {},\n        // 绑定 jdate 的值\n        jdateValues: {},\n        // file 信息\n        uploadValues: {},\n        // 绑定左侧选择框已选择的id\n        selectedRowIds: [],\n        // 存储被删除行的id\n        deleteIds: [],\n        // 存储显示tooltip的信息\n        tooltips: {},\n        // 存储没有通过验证的inputId\n        notPassedIds: []\n      }\n    },\n    created() {\n      // 当前显示的tr\n      this.visibleTrEls = []\n      // 用来存储input表单的值\n      // 数组里的每项都是一个对象，对象里每个key都是input的rowKey，值就是input的值，其中有个id的字段来区分\n      // 示例：\n      // [{\n      //    id: \"_jet-4sp0iu-15541771111770\"\n      //    dbDefaultVal: \"aaa\",\n      //    dbFieldName: \"bbb\",\n      //    dbFieldTxt: \"ccc\",\n      //    dbLength: 32\n      // }]\n      this.inputValues = []\n      this.disabledRowIds = (this.disabledRowIds || [])\n    },\n    // 计算属性\n    computed: {\n      // expandHeight = rows.length * rowHeight\n      getExpandHeight() {\n        return this.rows.length * this.rowHeight\n      },\n      // 获取是否选择了部分\n      getSelectIndeterminate() {\n        return (this.selectedRowIds.length > 0 &&\n          this.selectedRowIds.length < this.rows.length)\n      },\n      // 获取是否选择了全部\n      getSelectAll() {\n        return (this.selectedRowIds.length === this.rows.length) && this.rows.length > 0\n      },\n      tbodyStyle() {\n        let style = Object.assign({}, this.style.tbody)\n        // style['max-height'] = `${this.maxHeight}px`\n        style['width'] = this.realTrWidth\n        return style\n      },\n      showClearSelectButton() {\n        let count = 0\n        for (let key in this.disabledRows) {\n          if (this.disabledRows.hasOwnProperty(key)) count++\n        }\n        return count > 0\n      },\n      accessToken() {\n        return Vue.ls.get(ACCESS_TOKEN)\n      },\n      realTrWidth() {\n        let calcWidth = 'calc('\n        this.columns.forEach((column, i) => {\n          let { type, width } = column\n          // 隐藏字段不参与计算\n          if (type !== FormTypes.hidden) {\n            if (typeof width === 'number') {\n              calcWidth += width + 'px'\n            } else if (typeof width === 'string') {\n              calcWidth += width\n            } else {\n              calcWidth += '120px'\n            }\n\n            if (i < this.columns.length - 1) {\n              calcWidth += ' + '\n            }\n          }\n        })\n        calcWidth += ')'\n        // console.log('calcWidth: ', calcWidth)\n        return calcWidth\n      }\n    },\n    // 侦听器\n    watch: {\n      dataSource: {\n        immediate: true,\n        handler: function (newValue) {\n          this.initialize()\n\n          let rows = []\n          let checkboxValues = {}\n          let selectValues = {}\n          let jdateValues = {}\n          // 禁用行的id\n          let disabledRowIds = (this.disabledRowIds || [])\n          newValue.forEach((data, newValueIndex) => {\n            // 判断源数据是否带有id\n            if (data.id == null || data.id === '') {\n              data.id = this.removeCaseId(this.generateId() + newValueIndex)\n            }\n\n            let value = { id: this.caseId + data.id }\n            let row = { id: value.id }\n            let disabled = false\n            this.columns.forEach(column => {\n              let inputId = column.key + value.id\n              let sourceValue = (data[column.key] == null ? '' : data[column.key]).toString()\n              if (column.type === FormTypes.checkbox) {\n\n                // 判断是否设定了customValue（自定义值）\n                if (column.customValue instanceof Array) {\n                  let customValue = (column.customValue[0] || '').toString()\n                  checkboxValues[inputId] = (sourceValue === customValue)\n                } else {\n                  checkboxValues[inputId] = sourceValue\n                }\n\n              } else if (column.type === FormTypes.select) {\n                if (sourceValue) {\n                  // 判断是否是多选\n                  selectValues[inputId] = (column.props || {})['mode'] === 'multiple' ? sourceValue.split(',') : sourceValue\n                } else {\n                  selectValues[inputId] = undefined\n                }\n\n              } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n                jdateValues[inputId] = sourceValue\n\n              } else if (column.type === FormTypes.slot) {\n                if (sourceValue !== 0 && !sourceValue) {\n                  value[column.key] = column.defaultValue\n                } else {\n                  value[column.key] = sourceValue\n                }\n\n              } else {\n                value[column.key] = sourceValue\n              }\n\n              // 解析disabledRows\n              for (let columnKey in this.disabledRows) {\n                // 判断是否有该属性\n                if (this.disabledRows.hasOwnProperty(columnKey) && data.hasOwnProperty(columnKey)) {\n                  // row[columnKey] =\n\n                  if (disabled !== true) {\n                    disabled = this.disabledRows[columnKey] === data[columnKey]\n                    if (disabled) {\n                      disabledRowIds.push(row.id)\n                    }\n                  }\n\n                }\n              }\n            })\n            this.inputValues.push(value)\n            rows.push(row)\n          })\n          this.disabledRowIds = disabledRowIds\n          this.checkboxValues = checkboxValues\n          this.selectValues = selectValues\n          this.jdateValues = jdateValues\n          this.rows = rows\n\n          // 更新form表单的值\n          this.$nextTick(() => {\n            this.updateFormValues()\n          })\n\n        }\n      },\n      columns: {\n        immediate: true,\n        handler(columns) {\n          columns.forEach(column => {\n            if (column.type === FormTypes.select) {\n              // 兼容 旧版本 options\n              if (column.options instanceof Array) {\n                column.options = column.options.map(item => {\n                  if (item) {\n                    return {\n                      text: item.text || item.title,\n                      title: item.text || item.title,\n                      value: item.value\n                    }\n                  }\n                  return {}\n                })\n              }\n              if (column.dictCode) {\n                this._loadDictConcatToOptions(column)\n              }\n            }\n          })\n        }\n      },\n      // 当selectRowIds改变时触发事件\n      selectedRowIds(newValue) {\n        this.$emit('selectRowChange', cloneObject(newValue))\n      }\n    },\n    mounted() {\n      // 获取document element对象\n      let elements = {};\n      ['inputTable', 'tbody'].forEach(id => {\n        elements[id] = document.getElementById(this.caseId + id)\n      })\n      this.el = elements\n\n      let vm = this\n      /** 监听滚动条事件 */\n      this.el.inputTable.onscroll = function (event) {\n        vm.syncScrollBar(event.target.scrollLeft)\n      }\n      this.el.tbody.onscroll = function (event) {\n        // vm.recalcTrHiddenItem(event.target.scrollTop)\n      }\n\n      let { thead, scrollView } = this.$refs\n      scrollView.onscroll = function (event) {\n\n        // console.log(event.target.scrollTop, ' - ', event.target.scrollLeft)\n\n        thead.scrollLeft = event.target.scrollLeft\n\n        // vm.recalcTrHiddenItem(event.target.scrollTop)\n\n        vm.recalcTrHiddenItem(event.target.scrollTop)\n\n      }\n\n    },\n    methods: {\n\n      /** 初始化列表 */\n      initialize() {\n        this.visibleTrEls = []\n        this.rows = []\n        this.deleteIds = []\n        this.inputValues = []\n        this.selectValues = {}\n        this.checkboxValues = {}\n        this.jdateValues = {}\n        this.selectedRowIds = []\n        this.tooltips = {}\n        this.notPassedIds = []\n        this.scrollTop = 0\n        this.$nextTick(() => {\n          this.el.tbody.scrollTop = 0\n        })\n      },\n\n      /** 同步滚动条状态 */\n      syncScrollBar(scrollLeft) {\n        // this.style.tbody.left = `${scrollLeft}px`\n        // this.el.tbody.scrollLeft = scrollLeft\n      },\n      /** 重置滚动条位置，参数留空则滚动到上次记录的位置 */\n      resetScrollTop(top) {\n        let { scrollView } = this.$refs\n        if (top != null && typeof top === 'number') {\n          scrollView.scrollTop = top\n        } else {\n          scrollView.scrollTop = this.scrollTop\n        }\n      },\n      /** 重新计算需要隐藏或显示的tr */\n      recalcTrHiddenItem(top) {\n        let diff = top - this.scrollTop\n        if (diff < 0) {\n          diff = this.scrollTop - top\n        }\n        // 只有在滚动了百分之三十的行高的距离时才进行更新\n        if (diff >= this.rowHeight * 0.3) {\n          this.scrollTop = top\n          // 更新form表单的值\n          this.$nextTick(() => {\n            this.updateFormValues()\n          })\n        }\n      },\n      /** 生成id */\n      generateId(rows) {\n        if (!(rows instanceof Array)) {\n          rows = this.rows || []\n        }\n        let timestamp = new Date().getTime()\n        return `${this.caseId}${timestamp}${rows.length}`\n      },\n      /** push 一条数据 */\n      push(record, update = true, rows) {\n        if (!(rows instanceof Array)) {\n          rows = cloneObject(this.rows) || []\n        }\n\n        if (record.id == null) {\n          record.id = this.generateId(rows)\n          // let timestamp = new Date().getTime()\n          // record.id = `${this.caseId}${timestamp}${rows.length}`\n        }\n        if (record.id.indexOf(this.caseId) === -1) {\n          record.id = this.caseId + record.id\n        }\n        let row = { id: record.id }\n        let value = { id: row.id }\n        let checkboxValues = Object.assign({}, this.checkboxValues)\n        let selectValues = Object.assign({}, this.selectValues)\n        let jdateValues = Object.assign({}, this.jdateValues)\n        this.columns.forEach(column => {\n          let key = column.key\n          let inputId = key + row.id\n          // record中是否有该列的值\n          let recordHasValue = record[key] != null\n          if (column.type === FormTypes.input) {\n            value[key] = recordHasValue ? record[key] : (column.defaultValue || (column.defaultValue === 0 ? 0 : ''))\n\n          } else if (column.type === FormTypes.inputNumber) {\n            // 判断是否是排序字段，如果是就赋最大值\n            if (column.isOrder === true) {\n              value[key] = this.getInputNumberMaxValue(column) + 1\n            } else {\n              value[key] = recordHasValue ? record[key] : (column.defaultValue || (column.defaultValue === 0 ? 0 : ''))\n            }\n\n          } else if (column.type === FormTypes.checkbox) {\n            checkboxValues[inputId] = recordHasValue ? record[key] : column.defaultChecked\n\n          } else if (column.type === FormTypes.select) {\n            let selected = column.defaultValue\n            if (selected !== 0 && !selected) {\n              selected = undefined\n            }\n            // 判断多选\n            if (typeof selected === 'string' && (column.props || {})['mode'] === 'multiple') {\n              selected = selected.split(',')\n            }\n            selectValues[inputId] = recordHasValue ? record[key] : selected\n\n          } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n            jdateValues[inputId] = recordHasValue ? record[key] : column.defaultValue\n\n          } else if (column.type === FormTypes.slot) {\n            value[key] = recordHasValue ? record[key] : (column.defaultValue || '')\n\n          } else {\n            value[key] = recordHasValue ? record[key] : ''\n          }\n        })\n        rows.push(row)\n        this.inputValues.push(value)\n        this.checkboxValues = checkboxValues\n        this.selectValues = selectValues\n        this.jdateValues = jdateValues\n\n        if (this.dragSort) {\n          this.inputValues.forEach((item, index) => {\n            item[this.dragSortKey] = (index + 1)\n          })\n        }\n\n        if (update) {\n          this.rows = rows\n          this.$nextTick(() => {\n            this.updateFormValues()\n          })\n        }\n        return rows\n      },\n      /** 获取某一数字输入框列中的最大的值 */\n      getInputNumberMaxValue(column) {\n        let maxNum = 0\n        this.inputValues.forEach((item, index) => {\n          let val = item[column.key], num\n          try {\n            num = parseInt(val)\n          } catch {\n            num = 0\n          }\n          // 把首次循环的结果当成最大值\n          if (index === 0) {\n            maxNum = num\n          } else {\n            maxNum = (num > maxNum) ? num : maxNum\n          }\n        })\n        return maxNum\n      },\n      /** 添加一行 */\n      add(num = 1, forceScrollToBottom = false) {\n        if (num < 1) return\n        // let timestamp = new Date().getTime()\n        let rows = this.rows\n        let row\n        for (let i = 0; i < num; i++) {\n          // row = { id: `${this.caseId}${timestamp}${rows.length}` }\n          row = { id: this.generateId(rows) }\n          rows = this.push(row, false, rows)\n        }\n        this.rows = rows\n\n        this.$nextTick(() => {\n          this.updateFormValues()\n        })\n        // 触发add事件\n        this.$emit('added', {\n          row: (() => {\n            let r = Object.assign({}, row)\n            r.id = this.removeCaseId(r.id)\n            return r\n          })(),\n          target: this\n        })\n        // 设置滚动条位置\n        let tbody = this.el.tbody\n        let offsetHeight = tbody.offsetHeight\n        let realScrollTop = tbody.scrollTop + offsetHeight\n        if (forceScrollToBottom === false) {\n          // 只有滚动条在底部的时候才自动滚动\n          if (!((tbody.scrollHeight - realScrollTop) <= 10)) {\n            return\n          }\n        }\n        this.$nextTick(() => {\n          tbody.scrollTop = tbody.scrollHeight\n        })\n      },\n      /** 删除被选中的行 */\n      removeSelectedRows() {\n        this.removeRows(this.selectedRowIds)\n        this.selectedRowIds = []\n      },\n      /** 删除一行或多行 */\n      removeRows(id) {\n        let ids = id\n        if (!(id instanceof Array)) {\n          if (typeof id === 'string') {\n            ids = [id]\n          } else {\n            throw  `JEditableTable.removeRows() 函数需要的参数可以是string或Array类型，但提供的却是${typeof id}`\n          }\n        }\n\n        let rows = cloneObject(this.rows)\n        ids.forEach(removeId => {\n          // 找到每个id对应的真实index并删除\n          const findAndDelete = (arr) => {\n            for (let i = 0; i < arr.length; i++) {\n              if (arr[i].id === removeId || arr[i].id === this.caseId + removeId) {\n                arr.splice(i, 1)\n                return true\n              }\n            }\n          }\n          // 找到rows对应的index，并删除\n          if (findAndDelete(rows)) {\n            // 找到values对应的index，并删除\n            findAndDelete(this.inputValues)\n            // 将caseId去除\n            let id = this.removeCaseId(removeId)\n            this.deleteIds.push(id)\n          }\n        })\n        this.rows = rows\n        this.$emit('deleted', this.getDeleteIds())\n        this.$nextTick(() => {\n          // 更新formValues\n          this.updateFormValues()\n        })\n        return true\n      },\n\n      /** 获取表格表单里的值（同步版） */\n      getValuesSync(options = {}) {\n        let { validate, rowIds } = options\n        if (typeof validate !== 'boolean') validate = true\n        if (!(rowIds instanceof Array)) rowIds = null\n        // console.log('options:', { validate, rowIds })\n\n        let error = 0\n        let inputValues = cloneObject(this.inputValues)\n        let tooltips = Object.assign({}, this.tooltips)\n        let notPassedIds = cloneObject(this.notPassedIds)\n        // 用于存储合并后的值\n        let values = []\n        // 遍历inputValues来获取每行的值\n        for (let value of inputValues) {\n          let rowIdsFlag = false\n          // 如果带有rowIds，那么就只存这几行的数据\n          if (rowIds == null) {\n            rowIdsFlag = true\n          } else {\n            for (let rowId of rowIds) {\n              if (rowId === value.id || `${this.caseId}${rowId}` === value.id) {\n                rowIdsFlag = true\n                break\n              }\n            }\n          }\n\n          if (!rowIdsFlag) continue\n\n          this.columns.forEach(column => {\n            let inputId = column.key + value.id\n            if (column.type === FormTypes.checkbox) {\n              let checked = this.checkboxValues[inputId]\n              if (column.customValue instanceof Array) {\n                value[column.key] = checked ? column.customValue[0] : column.customValue[1]\n              } else {\n                value[column.key] = checked\n              }\n\n            } else if (column.type === FormTypes.select) {\n              let selected = this.selectValues[inputId]\n              if (selected instanceof Array) {\n                value[column.key] = cloneObject(selected)\n              } else {\n                value[column.key] = selected\n              }\n\n            } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n              value[column.key] = this.jdateValues[inputId]\n\n            } else if (column.type === FormTypes.upload) {\n              value[column.key] = cloneObject(this.uploadValues[inputId] || null)\n\n            }\n            // 检查表单验证\n            if (validate === true) {\n              let results = this.validateOneInput(value[column.key], value, column, notPassedIds, false)\n              tooltips[inputId] = results[0]\n              if (tooltips[inputId].visible) {\n                error++\n                // if (error++ === 0) {\n                // let element = document.getElementById(inputId)\n                // while (element.className !== 'tr') {\n                //   element = element.parentElement\n                // }\n                // this.jumpToId(inputId, element)\n                // }\n              }\n              tooltips[inputId].visible = false\n              notPassedIds = results[1]\n            }\n          })\n          // 将caseId去除\n          value.id = this.removeCaseId(value.id)\n          values.push(value)\n\n        }\n\n        this.tooltips = tooltips\n        this.notPassedIds = notPassedIds\n        return { error, values }\n      },\n\n      /** 获取表格表单里的值 */\n      getValues(callback, validate = true, rowIds) {\n        let result = this.getValuesSync({ validate, rowIds })\n        if (typeof callback === 'function') {\n          callback(result.error, result.values)\n        }\n      },\n      /** getValues的Promise版 */\n      getValuesPromise(validate = true, rowIds) {\n        return new Promise((resolve, reject) => {\n          let { error, values } = this.getValuesSync({ validate, rowIds })\n          if (error === 0) {\n            resolve(values)\n          } else {\n            reject(VALIDATE_NO_PASSED)\n          }\n        })\n      },\n      /** 获取被删除项的id */\n      getDeleteIds() {\n        return cloneObject(this.deleteIds)\n      },\n      /** 获取所有的数据，包括values、deleteIds */\n      getAll(validate) {\n        return new Promise((resolve, reject) => {\n          let deleteIds = this.getDeleteIds()\n          this.getValuesPromise(validate).then((values) => {\n            resolve({ values, deleteIds })\n          }).catch(error => {\n            reject(error)\n          })\n        })\n      },\n      /** Sync 获取所有的数据，包括values、deleteIds */\n      getAllSync(validate, rowIds) {\n        let result = this.getValuesSync({ validate, rowIds })\n        result.deleteIds = this.getDeleteIds()\n        return result\n      },\n      // slot 获取值\n      _getValueForSlot(rowId) {\n        return this.getValuesSync({ rowIds: [rowId] }).values[0]\n      },\n      /** 设置某行某列的值 */\n      setValues(values) {\n\n        values.forEach(item => {\n          let { rowKey, values: newValues } = item\n          for (let newValueKey in newValues) {\n            if (newValues.hasOwnProperty(newValueKey)) {\n              let newValue = newValues[newValueKey]\n              let edited = false // 已被修改\n              this.inputValues.forEach(value => {\n                // 在inputValues中找到了该字段\n                if (`${this.caseId}${rowKey}` === value.id) {\n                  if (value.hasOwnProperty(newValueKey)) {\n                    edited = true\n                    value[newValueKey] = newValue\n                  }\n                }\n              })\n              let modelKey = `${newValueKey}${this.caseId}${rowKey}`\n              // 在 selectValues 中寻找值\n              if (!edited && this.selectValues.hasOwnProperty(modelKey)) {\n                if (newValue !== 0 && !newValue) {\n                  this.selectValues[modelKey] = undefined\n                } else {\n                  this.selectValues[modelKey] = newValue\n                }\n                edited = true\n              }\n              // 在 checkboxValues 中寻找值\n              if (!edited && this.checkboxValues.hasOwnProperty(modelKey)) {\n                this.checkboxValues[modelKey] = newValue\n                edited = true\n              }\n              // 在 jdateValues 中寻找值\n              if (!edited && this.jdateValues.hasOwnProperty(modelKey)) {\n                this.jdateValues[modelKey] = newValue\n                edited = true\n              }\n            }\n          }\n        })\n        // 强制更新formValues\n        this.forceUpdateFormValues()\n      },\n\n      /** 跳转到指定位置 */\n      // jumpToId(id, element) {\n      //   if (element == null) {\n      //     element = document.getElementById(id)\n      //   }\n      //   if (element != null) {\n      //     console.log(this.el.tbody.scrollTop, element.offsetTop)\n      //     this.el.tbody.scrollTop = element.offsetTop\n      //     console.log(this.el.tbody.scrollTop, element.offsetTop)\n      //   }\n      // },\n\n      /** 验证单个表单 */\n      validateOneInput(value, row, column, notPassedIds, update = false) {\n        let tooltips = Object.assign({}, this.tooltips)\n        // let notPassedIds = cloneObject(this.notPassedIds)\n        let inputId = column.key + row.id\n        let [passed, message] = this.validateValue(column.validateRules, value)\n        tooltips[inputId] = tooltips[inputId] ? tooltips[inputId] : {}\n        tooltips[inputId].visible = !passed\n        let index = notPassedIds.indexOf(inputId)\n        let borderColor = null, boxShadow = null\n        if (!passed) {\n          tooltips[inputId].title = this.replaceProps(column, message)\n          borderColor = 'red'\n          boxShadow = `0 0 0 2px rgba(255, 0, 0, 0.2)`\n          if (index === -1) notPassedIds.push(inputId)\n        } else {\n          if (index !== -1) notPassedIds.splice(index, 1)\n        }\n\n        let element = document.getElementById(inputId)\n        if (element != null) {\n          // select 在 .ant-select-selection 上设置 border-color\n          if (column.type === FormTypes.select) {\n            element = element.getElementsByClassName('ant-select-selection')[0]\n          }\n          // jdate 在 input 上设置 border-color\n          if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n            element = element.getElementsByTagName('input')[0]\n          }\n          element.style.borderColor = borderColor\n          element.style.boxShadow = boxShadow\n        }\n        // 是否更新到data\n        if (update) {\n          this.tooltips = tooltips\n          this.notPassedIds = notPassedIds\n        }\n        return [tooltips[inputId], notPassedIds]\n      },\n      /** 通过规则验证值是否正确 */\n      validateValue(rules, value) {\n        let passed = true, message = ''\n        // 判断有没有验证规则或验证规则格式正不正确，若条件不符合则默认通过\n        if (rules instanceof Array) {\n          for (let rule of rules) {\n            // 当前值是否为空\n            let isNull = (value == null || value === '')\n            // 验证规则：非空\n            if (rule.required === true && isNull) {\n              passed = false\n            } else // 使用 else-if 是为了防止一个 rule 中出现两个规则\n            // 验证规则：正则表达式\n            if (!!rule.pattern && !isNull) {\n\n              // 兼容 online 的规则\n              let foo = [\n                { title: '唯一校验', value: 'only', pattern: null },\n                { title: '6到16位数字', value: 'n6-16', pattern: /\\d{6,18}/ },\n                { title: '6到16位任意字符', value: '*6-16', pattern: /^.{6,16}$/ },\n                { title: '网址', value: 'url', pattern: /^(?:([A-Za-z]+):)?(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/ },\n                { title: '电子邮件', value: 'e', pattern: /^([\\w]+\\.*)([\\w]+)@[\\w]+\\.\\w{3}(\\.\\w{2}|)$/ },\n                { title: '手机号码', value: 'm', pattern: /^1[3456789]\\d{9}$/ },\n                { title: '邮政编码', value: 'p', pattern: /^[1-9]\\d{5}$/ },\n                { title: '字母', value: 's', pattern: /^[A-Z|a-z]+$/ },\n                { title: '数字', value: 'n', pattern: /^-?\\d+\\.?\\d*$/ },\n                { title: '整数', value: 'z', pattern: /^[1-9]\\d*$/ },\n                { title: '非空', value: '*', pattern: /^.+$/ },\n                { title: '6到18位字符串', value: 's6-18', pattern: /^.{6,18}$/ },\n                { title: '金额', value: 'money', pattern: /^(([1-9][0-9]*)|([0]\\.\\d{0,2}|[1-9][0-9]*\\.\\d{0,2}))$/ },\n              ]\n              let flag = false\n              for (let item of foo) {\n                if (rule.pattern === item.value && item.pattern) {\n                  passed = new RegExp(item.pattern).test(value)\n                  flag = true\n                  break\n                }\n              }\n              if (!flag) passed = new RegExp(rule.pattern).test(value)\n            }\n            // 如果没有通过验证，则跳出循环。如果通过了验证，则继续验证下一条规则\n            if (!passed) {\n              message = rule.message\n              break\n            }\n          }\n        }\n        return [passed, message]\n      },\n\n      /** 动态更新表单的值 */\n      updateFormValues() {\n        let trs = this.el.tbody.getElementsByClassName('tr')\n        let trEls = []\n        for (let tr of trs) {\n          trEls.push(tr)\n        }\n        // 获取新增的 tr\n        let newTrEls = trEls\n        if (this.visibleTrEls.length > 0) {\n          newTrEls = []\n          for (let tr of trEls) {\n            let isNewest = true\n            for (let vtr of this.visibleTrEls) {\n              if (vtr.id === tr.id) {\n                isNewest = false\n                break\n              }\n            }\n            if (isNewest) {\n              newTrEls.push(tr)\n            }\n          }\n        }\n        this.visibleTrEls = trEls\n        // 向新增的tr中赋值\n        newTrEls.forEach(tr => {\n          let { idx } = tr.dataset\n          let value = this.inputValues[idx]\n          for (let key in value) {\n            if (value.hasOwnProperty(key)) {\n              let elid = `${key}${value.id}`\n              let el = document.getElementById(elid)\n              if (el) {\n                el.value = value[key]\n              }\n            }\n          }\n        })\n      },\n      /** 强制更新FormValues */\n      forceUpdateFormValues() {\n        this.visibleTrEls = []\n        this.updateFormValues()\n      },\n\n      /** 全选或取消全选 */\n      handleChangeCheckedAll() {\n        let selectedRowIds = []\n        if (!this.getSelectAll) {\n          this.rows.forEach(row => {\n            if ((this.disabledRowIds || []).indexOf(row.id) === -1) {\n              selectedRowIds.push(row.id)\n            }\n          })\n        }\n        this.selectedRowIds = selectedRowIds\n      },\n      /** 左侧行选择框change事件 */\n      handleChangeLeftCheckbox(event) {\n        let { id } = event.target\n\n        if ((this.disabledRowIds || []).indexOf(id) !== -1) {\n          return\n        }\n\n        let index = this.selectedRowIds.indexOf(id)\n        if (index !== -1) {\n          this.selectedRowIds.splice(index, 1)\n        } else {\n          this.selectedRowIds.push(id)\n        }\n\n      },\n      handleClickAdd() {\n        this.add()\n      },\n      handleConfirmDelete() {\n        this.removeSelectedRows()\n      },\n      handleClickClearSelect() {\n        this.selectedRowIds = []\n      },\n      /** select 搜索时的事件，用于动态添加options */\n      handleSearchSelect(value, id, row, col) {\n        if (col.allowInput === true) {\n          // 是否找到了对应的项，找不到则添加这一项\n          let flag = false\n          for (let option of col.options) {\n            if (option.value.toLocaleString() === value.toLocaleString()) {\n              flag = true\n              break\n            }\n          }\n          // !!value ：不添加空值\n          if (!flag && !!value) {\n            // searchAdd 是否是通过搜索添加的\n            col.options.push({ title: value, value: value, searchAdd: true })\n          }\n\n        }\n      },\n      // blur 失去焦点\n      handleBlurSearch(value, id, row, col) {\n        if (col.allowInput === true) {\n          // 删除无用的因搜索（用户输入）而创建的项\n          if (typeof value === 'string') {\n            let indexs = []\n            col.options.forEach((option, index) => {\n              if (option.value.toLocaleString() === value.toLocaleString()) {\n                delete option.searchAdd\n              } else if (option.searchAdd === true) {\n                indexs.push(index)\n              }\n            })\n            // 翻转删除数组中的项\n            for (let index of indexs.reverse()) {\n              col.options.splice(index, 1)\n            }\n          }\n\n        }\n      },\n\n      /** 拖动结束，交换inputValue中的值 */\n      handleDragMoveEnd(event) {\n        let { oldIndex, newIndex } = event\n\n        let values = this.inputValues\n        // 存储旧数据，并删除旧项目\n        let temp = values[oldIndex]\n        values.splice(oldIndex, 1)\n        // 向新项目里添加旧数据\n        values.splice(newIndex, 0, temp)\n\n        values.forEach((item, index) => {\n          item[this.dragSortKey] = (index + 1)\n        })\n\n        this.forceUpdateFormValues()\n\n        // 触发已拖动事件\n        this.$emit('dragged', {\n          oldIndex,\n          newIndex,\n          target: this\n        })\n      },\n\n      /* --- common function begin --- */\n\n      /** 鼠标移入 */\n      handleMouseoverCommono(row, column) {\n        let inputId = column.key + row.id\n        if (this.notPassedIds.indexOf(inputId) !== -1) {\n          this.showOrHideTooltip(inputId, true)\n        }\n      },\n      /** 鼠标移出 */\n      handleMouseoutCommono(row, column) {\n        let inputId = column.key + row.id\n        this.showOrHideTooltip(inputId, false)\n      },\n      /** input事件 */\n      handleInputCommono(target, index, row, column) {\n        let { value, dataset, selectionStart } = target\n        let type = FormTypes.input\n        let change = true\n        if (`${dataset.inputNumber}` === 'true') {\n          type = FormTypes.inputNumber\n          let replace = value.replace(/[^0-9]/g, '')\n          if (value !== replace) {\n            change = false\n            value = replace\n            target.value = replace\n            if (typeof selectionStart === 'number') {\n              target.selectionStart = selectionStart - 1\n              target.selectionEnd = selectionStart - 1\n            }\n          }\n        }\n        // 存储输入的值\n        this.inputValues[index][column.key] = value\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true)\n\n        // 触发valueChange 事件\n        if (change) {\n          this.elemValueChange(type, row, column, value)\n        }\n      },\n      handleChangeCheckboxCommon(event, row, column) {\n        let { id, checked } = event.target\n        this.checkboxValues = this.bindValuesChange(checked, id, 'checkboxValues')\n\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.checkbox, row, column, checked)\n      },\n      handleChangeSelectCommon(value, id, row, column) {\n        this.selectValues = this.bindValuesChange(value, id, 'selectValues')\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true)\n\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.select, row, column, value)\n      },\n      handleChangeJDateCommon(value, id, row, column, showTime) {\n        this.jdateValues = this.bindValuesChange(value, id, 'jdateValues')\n        this.validateOneInput(value, row, column, this.notPassedIds, true)\n\n        // 触发valueChange 事件\n        if (showTime) {\n          this.elemValueChange(FormTypes.datetime, row, column, value)\n        } else {\n          this.elemValueChange(FormTypes.date, row, column, value)\n        }\n      },\n      handleChangeUpload(info, id, row, column) {\n        let { file } = info\n        let value = {\n          name: file.name,\n          type: file.type,\n          size: file.size,\n          status: file.status,\n          percent: file.percent\n        }\n        if (column.responseName && file.response) {\n          value['responseName'] = file.response[column.responseName]\n        }\n        this.uploadValues = this.bindValuesChange(value, id, 'uploadValues')\n      },\n      /** 记录用到数据绑定的组件的值 */\n      bindValuesChange(value, id, key) {\n        let values = Object.assign({}, this[key])\n        values[id] = value\n        return values\n      },\n\n      /** 显示或隐藏tooltip */\n      showOrHideTooltip(inputId, show) {\n        let tooltips = Object.assign({}, this.tooltips)\n        tooltips[inputId] = tooltips[inputId] ? tooltips[inputId] : {}\n        tooltips[inputId].visible = show\n        this.tooltips = tooltips\n      },\n\n      /** value 触发valueChange事件 */\n      elemValueChange(type, rowSource, columnSource, value) {\n        let column = Object.assign({}, columnSource)\n        // 将caseId去除\n        let row = Object.assign({}, rowSource)\n        row.id = this.removeCaseId(row.id)\n        // 获取整行的数据\n        let { values } = this.getValuesSync({ validate: false, rowIds: [row.id] })\n        if (values.length > 0) {\n          Object.assign(row, values[0])\n        }\n        this.$emit('valueChange', { type, row, column, value, target: this })\n      },\n\n      /** 将caseId去除 */\n      removeCaseId(id) {\n        let remove = id.split(this.caseId)[1]\n        return remove ? remove : id\n      },\n\n      handleClickDelFile(id) {\n        this.uploadValues[id] = null\n      },\n\n      /** 加载数据字典并合并到 options */\n      _loadDictConcatToOptions(column) {\n        initDictOptions(column.dictCode).then((res) => {\n          if (res.success) {\n            let newOptions = (column.options || [])// .concat(res.result)\n            res.result.forEach(item => {\n              for (let option of newOptions) if (option.value === item.value) return\n              newOptions.push(item)\n            })\n            column.options = newOptions\n          } else {\n            console.group(`JEditableTable 查询字典(${column.dictCode})发生异常`)\n            console.log(res.message)\n            console.groupEnd()\n          }\n        })\n      },\n\n      /* --- common function end --- */\n\n      /* --- 以下是辅助方法，多用于动态构造页面中的数据 --- */\n\n      /** 辅助方法：打印日志 */\n      log: console.log,\n\n      getVM() {\n        return this\n      },\n\n      /** 辅助方法：指定a-select 和 j-data 的父容器 */\n      getParentContainer(node) {\n        let element = (() => {\n          // nodeType 8\t: Comment\t: 注释\n          if (this.$el && this.$el.nodeType !== 8) {\n            return this.$el\n          }\n          let doc = document.getElementById(this.caseId + 'inputTable')\n          if (doc != null) {\n            return doc\n          }\n          return node.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode\n        })()\n\n        // 递归判断是否带有 overflow: hidden；的父元素\n        const ifParent = (child) => {\n          let currentOverflow = null\n          if (child['currentStyle']) {\n            currentOverflow = child['currentStyle']['overflow']\n          } else if (window.getComputedStyle) {\n            currentOverflow = window.getComputedStyle(child)['overflow']\n          }\n          if (currentOverflow != null) {\n            if (currentOverflow === 'hidden') {\n              // 找到了带有 hidden 的标签，判断它的父级是否还有 hidden，直到遇到完全没有 hidden 或 body 的时候才停止递归\n              let temp = ifParent(child.parentNode)\n              return temp != null ? temp : child.parentNode\n            } else\n            // 当前标签没有 hidden ，如果有父级并且父级不是 body 的话就继续递归判断父级\n            if (child.parentNode && child.parentNode.tagName.toLocaleLowerCase() !== 'body') {\n              return ifParent(child.parentNode)\n            } else {\n              // 直到 body 都没有遇到有 hidden 的标签\n              return null\n            }\n          } else {\n            return child\n          }\n        }\n\n        let temp = ifParent(element)\n        return (temp != null) ? temp : element\n      },\n\n      /** 辅助方法：替换${...}变量 */\n      replaceProps(col, value) {\n        if (value && typeof value === 'string') {\n          value = value.replace(/\\${title}/g, col.title)\n          value = value.replace(/\\${key}/g, col.key)\n          value = value.replace(/\\${defaultValue}/g, col.defaultValue)\n        }\n        return value\n      },\n\n      /** view辅助方法：构建 tr style */\n      buildTrStyle(index) {\n        return {\n          'top': `${rowHeight * index}px`\n        }\n      },\n      /** view辅助方法：构建 td style */\n      buildTdStyle(col) {\n        let style = {}\n        // 计算宽度\n        if (col.width) {\n          style['width'] = col.width\n        } else if (this.columns) {\n          style['width'] = `${(100 - 4 * 2) / this.columns.length}%`\n        } else {\n          style['width'] = '120px'\n        }\n        // checkbox 居中显示\n        let isCheckbox = col.type === FormTypes.checkbox\n        if (isCheckbox) {\n          style['align-items'] = 'center'\n          style['text-align'] = 'center'\n          style['padding-left'] = '0'\n          style['padding-right'] = '0'\n        }\n        return style\n      },\n      /** view辅助方法：构造props */\n      buildProps(row, col) {\n        let props = {}\n        // 解析props\n        if (typeof col.props === 'object') {\n          for (let prop in col.props) {\n            if (col.props.hasOwnProperty(prop)) {\n              props[prop] = this.replaceProps(col, col.props[prop])\n            }\n          }\n        }\n        // 判断select是否允许输入\n        if (col.type === FormTypes.select && col.allowInput === true) {\n          props['showSearch'] = true\n        }\n\n        // 判断是否是禁用的列\n        props['disabled'] = !!col['disabled']\n\n        // 判断是否为禁用的行\n        if (props['disabled'] !== true) {\n          props['disabled'] = ((this.disabledRowIds || []).indexOf(row.id) !== -1)\n        }\n\n        // 判断是否禁用全部组件\n        if (this.disabled === true) {\n          props['disabled'] = true\n        }\n\n        return props\n      },\n      /** upload 辅助方法：获取 headers */\n      uploadGetHeaders(row, column) {\n        let headers = {}\n        if (column.token === true) {\n          headers['X-Access-Token'] = this.accessToken\n        }\n        return headers\n      }\n\n    }\n  }\n</script>\n\n<style lang=\"less\" scoped>\n\n  .action-button {\n    margin-bottom: 8px;\n\n    .gap {\n      padding-left: 8px;\n    }\n\n  }\n\n  /* 设定边框参数 */\n  @borderColor: #e8e8e8;\n  @border: 1px solid @borderColor;\n  /* tr & td 之间的间距 */\n  @spacing: 8px;\n\n  .input-table {\n    max-width: 100%;\n    overflow-x: hidden;\n    overflow-y: hidden;\n    position: relative;\n    border: @border;\n\n    .thead, .tbody {\n\n      .tr, .td {\n        display: flex;\n      }\n\n      .td {\n\n        /*border-right: 1px solid red;*/\n        /*color: white;*/\n        /*background-color: black;*/\n        /*margin-right: @spacing !important;*/\n\n        padding-left: @spacing;\n        flex-direction: column;\n\n        &.td-cb, &.td-num {\n          min-width: 4%;\n          max-width: 45px;\n          margin-right: 0;\n          padding-left: 0;\n          padding-right: 0;\n          justify-content: center;\n          align-items: center;\n        }\n\n        &.td-ds {\n          margin-right: 0;\n          padding-left: 0;\n          padding-right: 0;\n          justify-content: center;\n          align-items: center;\n\n          .td-ds-icons {\n            position: relative;\n            cursor: move;\n            width: 100%;\n            /*padding: 25% 0;*/\n            height: 100%;\n\n            .anticon-align-left,\n            .anticon-align-right {\n              position: absolute;\n              top: 30%;\n            }\n\n            .anticon-align-left {\n              left: 25%;\n            }\n\n            .anticon-align-right {\n              right: 25%;\n            }\n          }\n\n\n        }\n\n      }\n\n    }\n\n    .thead {\n      overflow-y: scroll;\n      overflow-x: hidden;\n      border-bottom: @border;\n\n      /** 隐藏thead的滑块   */\n\n      &::-webkit-scrollbar-thumb {\n        box-shadow: none !important;\n        background-color: transparent !important;\n      }\n\n      .tr {\n        min-width: 100%;\n        overflow-y: scroll;\n      }\n\n      .td {\n        /*flex: 1;*/\n        padding: 8px @spacing;\n        justify-content: center;\n      }\n\n    }\n\n    .tbody {\n      position: relative;\n      top: 0;\n      left: 0;\n      overflow-x: hidden;\n      overflow-y: hidden;\n      min-height: 61px;\n      /*max-height: 400px;*/\n      min-width: 100%;\n\n      .tr-nodata {\n        color: #999;\n        line-height: 61px;\n        text-align: center;\n      }\n\n      .tr {\n        /*line-height: 50px;*/\n\n        border-bottom: @border;\n        transition: background-color 300ms;\n        width: 100%;\n        position: absolute;\n        left: 0;\n        z-index: 10;\n\n        &.tr-checked {\n          background-color: #fafafa;\n        }\n\n        &:hover {\n          background-color: #E6F7FF;\n        }\n\n      }\n\n      .tr-expand {\n        position: relative;\n        z-index: 9;\n        background-color: white;\n      }\n\n      .td {\n        /*flex: 1;*/\n        padding: 14px 0 14px @spacing;\n        justify-content: center;\n\n        &:last-child {\n          padding-right: @spacing;\n        }\n\n        input {\n          font-variant: tabular-nums;\n          box-sizing: border-box;\n          margin: 0;\n          list-style: none;\n          position: relative;\n          display: inline-block;\n          padding: 4px 11px;\n          width: 100%;\n          height: 32px;\n          font-size: 14px;\n          line-height: 1.5;\n          color: rgba(0, 0, 0, 0.65);\n          background-color: #fff;\n          border: 1px solid #d9d9d9;\n          border-radius: 4px;\n          transition: all 0.3s;\n          outline: none;\n\n          &:hover {\n            border-color: #4D90FE\n          }\n\n          &:focus {\n            border-color: #40a9ff;\n            box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n            border-right-width: 1px !important;\n          }\n\n          &:disabled {\n            color: rgba(0, 0, 0, 0.25);\n            background: #f5f5f5;\n            cursor: not-allowed;\n          }\n\n          /* 设置placeholder的颜色 */\n\n          &::-webkit-input-placeholder { /* WebKit browsers */\n            color: #ccc;\n          }\n\n          &:-moz-placeholder { /* Mozilla Firefox 4 to 18 */\n            color: #ccc;\n          }\n\n          &::-moz-placeholder { /* Mozilla Firefox 19+ */\n            color: #ccc;\n          }\n\n          &:-ms-input-placeholder { /* Internet Explorer 10+ */\n            color: #ccc;\n          }\n\n        }\n\n      }\n\n    }\n\n    .scroll-view {\n      overflow: auto;\n      overflow-y: scroll;\n    }\n\n    .thead, .thead .tr, .scroll-view {\n      @scrollBarSize: 6px;\n      /* 定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/\n\n      &::-webkit-scrollbar {\n        width: @scrollBarSize;\n        height: @scrollBarSize;\n        background-color: transparent;\n      }\n\n      /* 定义滚动条轨道 */\n\n      &::-webkit-scrollbar-track {\n        background-color: #f0f0f0;\n      }\n\n      /* 定义滑块 */\n\n      &::-webkit-scrollbar-thumb {\n        background-color: #eee;\n        box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n\n        &:hover {\n          background-color: #bbb;\n        }\n\n        &:active {\n          background-color: #888;\n        }\n      }\n\n    }\n\n    .thead .tr {\n\n      &::-webkit-scrollbar-track {\n        background-color: transparent;\n      }\n\n      /* IE模式下隐藏 */\n      -ms-overflow-style: none;\n      -ms-scroll-chaining: chained;\n      -ms-content-zooming: zoom;\n      -ms-scroll-rails: none;\n      -ms-content-zoom-limit-min: 100%;\n      -ms-content-zoom-limit-max: 500%;\n      -ms-scroll-snap-type: proximity;\n      -ms-scroll-snap-points-x: snapList(100%, 200%, 300%, 400%, 500%);\n    }\n\n  }\n\n</style>"]}]}