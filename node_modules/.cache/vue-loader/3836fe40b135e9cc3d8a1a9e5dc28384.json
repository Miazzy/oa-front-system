{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/user/Register.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/user/Register.vue","mtime":1571018558938},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {mixinDevice} from '@/utils/mixin.js'\nimport {getSmsCaptcha} from '@/api/login'\nimport {getAction, postAction} from '@/api/manage'\nimport {checkOnlyUser} from '@/api/api'\n\nconst levelNames = {\n  0: '低',\n  1: '低',\n  2: '中',\n  3: '强'\n}\nconst levelClass = {\n  0: 'error',\n  1: 'error',\n  2: 'warning',\n  3: 'success'\n}\nconst levelColor = {\n  0: '#ff0000',\n  1: '#ff0000',\n  2: '#ff7e05',\n  3: '#52c41a',\n}\nexport default {\n  name: \"Register\",\n  components: {},\n  mixins: [mixinDevice],\n  data() {\n    return {\n      form: null,\n\n      state: {\n        time: 60,\n        smsSendBtn: false,\n        passwordLevel: 0,\n        passwordLevelChecked: false,\n        percent: 10,\n        progressColor: '#FF0000'\n      },\n      registerBtn: false\n    }\n  },\n  computed: {\n    passwordLevelClass() {\n      return levelClass[this.state.passwordLevel]\n    },\n    passwordLevelName() {\n      return levelNames[this.state.passwordLevel]\n    },\n    passwordLevelColor() {\n      return levelColor[this.state.passwordLevel]\n    }\n  },\n  methods: {\n    checkUsername(rule, value, callback) {\n      var params = {\n        username: value,\n      };\n      checkOnlyUser(params).then((res) => {\n        if (res.success) {\n          callback()\n        } else {\n          callback(\"用户名已存在!\")\n        }\n      })\n    },\n    handleEmailCheck(rule, value, callback) {\n      var params = {\n        email: value,\n      };\n      checkOnlyUser(params).then((res) => {\n        if (res.success) {\n          callback()\n        } else {\n          callback(\"邮箱已存在!\")\n        }\n      })\n    },\n    handlePasswordLevel(rule, value, callback) {\n\n      let level = 0\n      let reg = /^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[~!@#$%^&*()_+`\\-={}:\";'<>?,./]).{8,}$/;\n      if (!reg.test(value)) {\n        callback(new Error('密码由8位数字、大小写字母和特殊符号组成!'))\n      }\n      // 判断这个字符串中有没有数字\n      if (/[0-9]/.test(value)) {\n        level++\n      }\n      // 判断字符串中有没有字母\n      if (/[a-zA-Z]/.test(value)) {\n        level++\n      }\n      // 判断字符串中有没有特殊符号\n      if (/[^0-9a-zA-Z_]/.test(value)) {\n        level++\n      }\n      this.state.passwordLevel = level\n      this.state.percent = level * 30\n      if (level >= 2) {\n        if (level >= 3) {\n          this.state.percent = 100\n        }\n        callback()\n      } else {\n        if (level === 0) {\n          this.state.percent = 10\n        }\n        callback(new Error('密码强度不够'))\n      }\n    },\n\n    handlePasswordCheck(rule, value, callback) {\n      let password = this.form.getFieldValue('password')\n      //console.log('value', value)\n      if (value === undefined) {\n        callback(new Error('请输入密码'))\n      }\n      if (value && password && value.trim() !== password.trim()) {\n        callback(new Error('两次密码不一致'))\n      }\n      callback()\n    },\n\n    handlePhoneCheck(rule, value, callback) {\n      var params = {\n        phone: value,\n      };\n      checkOnlyUser(params).then((res) => {\n        if (res.success) {\n          callback()\n        } else {\n          callback(\"手机号已存在!\")\n        }\n      })\n    },\n\n    handlePasswordInputClick() {\n      if (!this.isMobile()) {\n        this.state.passwordLevelChecked = true\n        return;\n      }\n      this.state.passwordLevelChecked = false\n    },\n\n    handleSubmit() {\n      this.form.validateFields((err, values) => {\n        if (!err) {\n          var register = {\n            username: values.username,\n            password: values.password,\n            email: values.email,\n            phone: values.mobile,\n            smscode: values.captcha\n          };\n          postAction(\"/sys/user/register\", register).then((res) => {\n            if (!res.success) {\n              this.registerFailed(res.message)\n            } else {\n              this.$router.push({name: 'registerResult', params: {...values}})\n            }\n          })\n        }\n      })\n    },\n\n    getCaptcha(e) {\n      e.preventDefault()\n      let that = this\n      this.form.validateFields(['mobile'], {force: true}, (err, values) => {\n          if (!err) {\n            this.state.smsSendBtn = true;\n            let interval = window.setInterval(() => {\n              if (that.state.time-- <= 0) {\n                that.state.time = 60;\n                that.state.smsSendBtn = false;\n                window.clearInterval(interval);\n              }\n            }, 1000);\n            const hide = this.$message.loading('验证码发送中..', 0);\n            const params = {\n              mobile: values.mobile,\n              smsmode: \"1\"\n            };\n            postAction(\"/sys/sms\", params).then((res) => {\n              if (!res.success) {\n                this.registerFailed(res.message);\n                setTimeout(hide, 0);\n              }\n              setTimeout(hide, 500);\n            }).catch(err => {\n              setTimeout(hide, 1);\n              clearInterval(interval);\n              that.state.time = 60;\n              that.state.smsSendBtn = false;\n              this.requestFailed(err);\n            });\n          }\n        }\n      );\n    },\n    registerFailed(message) {\n      this.$notification['error']({\n        message: \"注册失败\",\n        description: message,\n        duration: 2,\n      });\n\n    },\n    requestFailed(err) {\n      this.$notification['error']({\n        message: '错误',\n        description: ((err.response || {}).data || {}).message || \"请求出现错误，请稍后再试\",\n        duration: 4,\n      });\n      this.registerBtn = false;\n    },\n  },\n  watch: {\n    'state.passwordLevel'(val) {\n      console.log(val)\n\n    }\n  }\n}\n",null]}