{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/dict/JSearchSelectTag.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/dict/JSearchSelectTag.vue","mtime":1571018558895},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":1565525386522},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js","mtime":1565533683804},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":1571018827562}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { ajaxGetDictItems } from '@/api/api'\nimport debounce from 'lodash/debounce';\nimport { getAction } from '../../api/manage'\n\nexport default {\n  name: 'JSearchSelectTag',\n  props:{\n    disabled: Boolean,\n    value: String,\n    dict: String,\n    dictOptions: Array,\n    async: Boolean,\n    placeholder:{\n      type:String,\n      default:\"请选择\",\n      required:false\n    }\n  },\n  data(){\n    this.loadData = debounce(this.loadData, 800);//消抖\n    this.lastLoad = 0;\n    return {\n      loading:false,\n      selectedValue:[],\n      selectedAsyncValue:[],\n      options: [],\n    }\n  },\n  created(){\n    this.initDictData();\n  },\n  watch:{\n    \"value\":{\n      immediate:true,\n      handler(val){\n        if(!val){\n          this.selectedValue=[]\n          this.selectedAsyncValue=[]\n        }else{\n          this.initSelectValue()\n        }\n      }\n    },\n    \"dict\":{\n      handler(){\n        this.initDictData()\n      }\n    }\n  },\n  methods:{\n    initSelectValue(){\n      if(this.async){\n        if(!this.selectedAsyncValue || !this.selectedAsyncValue.key || this.selectedAsyncValue.key!=this.value){\n          console.log(\"这才请求后台\")\n          getAction(`/sys/dict/loadDictItem/${this.dict}`,{key:this.value}).then(res=>{\n            if(res.success){\n              let obj = {\n                key:this.value,\n                label:res.result\n              }\n              this.selectedAsyncValue = {...obj}\n            }\n          })\n        }\n      }else{\n        this.selectedValue = this.value\n      }\n    },\n    loadData(value){\n      console.log(\"数据加载\",value)\n      this.lastLoad +=1\n      const currentLoad = this.lastLoad\n      this.options = []\n      this.loading=true\n      // 字典code格式：table,text,code\n      getAction(`/sys/dict/loadDict/${this.dict}`,{keyword:value}).then(res=>{\n        this.loading=false\n        if(res.success){\n          if(currentLoad!=this.lastLoad){\n            return\n          }\n          this.options = res.result\n          console.log(\"我是第一个\",res)\n        }else{\n          this.$message.warning(res.message)\n        }\n\n      })\n\n    },\n    initDictData(){\n      if(!this.async){\n        //如果字典项集合有数据\n        if(this.dictOptions && this.dictOptions.length>0){\n          this.options = [...this.dictOptions]\n        }else{\n          //根据字典Code, 初始化字典数组\n          ajaxGetDictItems(this.dict, null).then((res) => {\n            if (res.success) {\n              this.options = res.result;\n            }\n          })\n        }\n      }\n    },\n    filterOption(input, option) {\n      return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    },\n    handleChange (selectedValue) {\n      console.log(\"selectedValue\",selectedValue)\n      this.selectedValue = selectedValue\n      this.callback()\n    },\n    handleAsyncChange(selectedObj){\n      this.selectedAsyncValue = selectedObj\n      this.selectedValue = selectedObj.key\n      this.callback()\n    },\n    callback(){\n      this.$emit('change', this.selectedValue);\n    },\n    setCurrentDictOptions(dictOptions){\n      this.options = dictOptions\n    },\n    getCurrentDictOptions(){\n      return this.options\n    }\n\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n}\n",null]}