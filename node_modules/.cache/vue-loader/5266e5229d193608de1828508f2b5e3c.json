{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/modules/monitor/TomcatInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/modules/monitor/TomcatInfo.vue","mtime":1571018558929},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport { getAction } from '@/api/manage'\n\nmoment.locale('zh-cn')\n\nexport default {\n  data() {\n    return {\n      time: '',\n      loading: true,\n      tableLoading: true,\n      columns: [{\n        title: '参数',\n        width: '30%',\n        dataIndex: 'param',\n        scopedSlots: { customRender: 'param' }\n      }, {\n        title: '描述',\n        width: '40%',\n        dataIndex: 'text',\n        scopedSlots: { customRender: 'text' }\n      }, {\n        title: '当前值',\n        width: '30%',\n        dataIndex: 'value',\n        scopedSlots: { customRender: 'value' }\n      }],\n      dataSource: [],\n      // 列表通过 textInfo 渲染出颜色、描述和单位\n      textInfo: {\n        'tomcat.sessions.created': { color: 'green', text: 'tomcat 已创建 session 数', unit: '个' },\n        'tomcat.sessions.expired': { color: 'green', text: 'tomcat 已过期 session 数', unit: '个' },\n        'tomcat.sessions.active.current': { color: 'green', text: 'tomcat 当前活跃 session 数', unit: '个' },\n        'tomcat.sessions.active.max': { color: 'green', text: 'tomcat 活跃 session 数峰值', unit: '个' },\n        'tomcat.sessions.rejected': { color: 'green', text: '超过session 最大配置后，拒绝的 session 个数', unit: '个' },\n\n        'tomcat.global.sent': { color: 'purple', text: '发送的字节数', unit: 'bytes' },\n        'tomcat.global.request.max': { color: 'purple', text: 'request 请求最长耗时', unit: '秒' },\n        'tomcat.global.request.count': { color: 'purple', text: '全局 request 请求次数', unit: '次' },\n        'tomcat.global.request.totalTime': { color: 'purple', text: '全局 request 请求总耗时', unit: '秒' },\n\n        'tomcat.servlet.request.max': { color: 'cyan', text: 'servlet 请求最长耗时', unit: '秒' },\n        'tomcat.servlet.request.count': { color: 'cyan', text: 'servlet 总请求次数', unit: '次' },\n        'tomcat.servlet.request.totalTime': { color: 'cyan', text: 'servlet 请求总耗时', unit: '秒' },\n\n        'tomcat.threads.current': { color: 'pink', text: 'tomcat 当前线程数（包括守护线程）', unit: '个' },\n        'tomcat.threads.config.max': { color: 'pink', text: 'tomcat 配置的线程最大数', unit: '个' }\n      },\n      // 当一条记录中需要取出多条数据的时候需要配置该字段\n      moreInfo: {\n        'tomcat.global.request': ['.count', '.totalTime'],\n        'tomcat.servlet.request': ['.count', '.totalTime']\n      }\n    }\n  },\n  mounted() {\n    this.loadTomcatInfo()\n  },\n  methods: {\n\n    handleClickUpdate() {\n      this.loadTomcatInfo()\n    },\n\n    loadTomcatInfo() {\n      this.tableLoading = true\n      this.time = moment().format('YYYY年MM月DD日 HH时mm分ss秒')\n      Promise.all([\n        getAction('actuator/metrics/tomcat.sessions.created'),\n        getAction('actuator/metrics/tomcat.sessions.expired'),\n        getAction('actuator/metrics/tomcat.sessions.active.current'),\n        getAction('actuator/metrics/tomcat.sessions.active.max'),\n        getAction('actuator/metrics/tomcat.sessions.rejected'),\n        getAction('actuator/metrics/tomcat.global.sent'),\n        getAction('actuator/metrics/tomcat.global.request.max'),\n        getAction('actuator/metrics/tomcat.global.request'),\n        // 2.1.3.RELEASE 无此API\n        //getAction('actuator/metrics/tomcat.servlet.request'),\n        // getAction('actuator/metrics/tomcat.servlet.request.max'),\n        getAction('actuator/metrics/tomcat.threads.current'),\n        getAction('actuator/metrics/tomcat.threads.config.max')\n      ]).then((res) => {\n        let tomcatInfo = []\n        res.forEach((value, id) => {\n          let more = this.moreInfo[value.name]\n          if (!(more instanceof Array)) {\n            more = ['']\n          }\n          more.forEach((item, idx) => {\n            let param = value.name + item\n            tomcatInfo.push({\n              id: param + id, param,\n              text: 'false value',\n              value: value.measurements[idx].value\n            })\n          })\n        })\n        this.dataSource = tomcatInfo\n      }).catch((e) => {\n        console.error(e)\n        this.$message.error('获取Tomcat信息失败')\n      }).finally(() => {\n        this.loading = false\n        this.tableLoading = false\n      })\n    }\n  }\n}\n",null]}