{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/system/DepartUserList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/system/DepartUserList.vue","mtime":1571018558932},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport DeptBaseInfo from './modules/DeptBaseInfo'\nimport DeptUserInfo from './modules/DeptUserInfo'\nimport {queryDepartTreeList, searchByKeywords} from '@/api/api'\nimport {JeecgListMixin} from '@/mixins/JeecgListMixin'\n\nexport default {\n  name: 'DepartUserList',\n  mixins: [JeecgListMixin],\n  components: {\n    DeptBaseInfo,\n    DeptUserInfo,\n  },\n  data() {\n    return {\n      currentDeptId: '',\n      iExpandedKeys: [],\n      loading: false,\n      autoExpandParent: true,\n      currFlowId: '',\n      currFlowName: '',\n      disable: true,\n      treeData: [],\n      visible: false,\n      departTree: [],\n      rightClickSelectedKey: '',\n      hiding: true,\n      model: {},\n      dropTrigger: '',\n      depart: {},\n      disableSubmit: false,\n      checkedKeys: [],\n      selectedKeys: [],\n      autoIncr: 1,\n      currSelected: {},\n      form: this.$form.createForm(this),\n      labelCol: {\n        xs: {span: 24},\n        sm: {span: 5}\n      },\n      wrapperCol: {\n        xs: {span: 24},\n        sm: {span: 16}\n      },\n      graphDatasource: {\n        nodes: [],\n        edges: []\n      },\n    }\n  },\n  methods: {\n    callback(key) {\n      console.log(key)\n    },\n    loadData() {\n      this.refresh();\n    },\n    loadTree() {\n      var that = this\n      that.treeData = []\n      that.departTree = []\n      queryDepartTreeList().then((res) => {\n        if (res.success) {\n          for (let i = 0; i < res.result.length; i++) {\n            let temp = res.result[i]\n            that.treeData.push(temp)\n            that.departTree.push(temp)\n            that.setThisExpandedKeys(temp)\n            // console.log(temp.id)\n          }\n          this.loading = false\n        }\n      })\n    },\n    setThisExpandedKeys(node) {\n      if (node.children && node.children.length > 0) {\n        this.iExpandedKeys.push(node.key)\n        for (let a = 0; a < node.children.length; a++) {\n          this.setThisExpandedKeys(node.children[a])\n        }\n      }\n    },\n    refresh() {\n      this.loading = true\n      this.loadTree()\n    },\n\n    onExpand(expandedKeys) {\n      // console.log('onExpand', expandedKeys)\n      // if not set autoExpandParent to false, if children expanded, parent can not collapse.\n      // or, you can remove all expanded children keys.\n      this.iExpandedKeys = expandedKeys\n      this.autoExpandParent = false\n    },\n\n    onSearch(value) {\n      let that = this\n      if (value) {\n        searchByKeywords({keyWord: value}).then((res) => {\n          if (res.success) {\n            that.departTree = []\n            for (let i = 0; i < res.result.length; i++) {\n              let temp = res.result[i]\n              that.departTree.push(temp)\n            }\n          } else {\n            that.$message.warning(res.message)\n          }\n        })\n      } else {\n        that.loadTree()\n      }\n\n    },\n    onCheck(checkedKeys, e) {\n      let record = e.node.dataRef;\n      // console.log('onCheck', checkedKeys, e);\n      this.checkedKeys = [];\n      // if (e.checked === true) {\n      this.currentDeptId = record.id;\n      this.checkedKeys.push(record.id);\n\n      this.$refs.DeptBaseInfo.open(record);\n      this.$refs.DeptUserInfo.open(record);\n      // }\n      // else {\n      //   this.checkedKeys = [];\n      //   this.$refs.DeptBaseInfo.clearForm();\n      //   this.$refs.DeptUserInfo.clearList();\n      // }\n\n      this.hiding = false;\n      // this.checkedKeys = checkedKeys.checked\n    },\n    onSelect(selectedKeys, e) {\n      if (this.selectedKeys[0] !== selectedKeys[0]) {\n        this.selectedKeys = [selectedKeys[0]];\n      }\n      let record = e.node.dataRef;\n      this.checkedKeys.push(record.id);\n      this.$refs.DeptBaseInfo.open(record);\n      this.$refs.DeptUserInfo.onClearSelected();\n      this.$refs.DeptUserInfo.open(record);\n    },\n  },\n  created() {\n    this.currFlowId = this.$route.params.id\n    this.currFlowName = this.$route.params.name\n    // this.loadTree()\n  },\n}\n",null]}