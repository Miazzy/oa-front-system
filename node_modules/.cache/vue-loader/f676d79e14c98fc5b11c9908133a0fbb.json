{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/modules/monitor/JvmInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/modules/monitor/JvmInfo.vue","mtime":1571018558928},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport { getAction } from '@/api/manage'\n\nmoment.locale('zh-cn')\n\nexport default {\n  data() {\n    return {\n      time: '',\n      loading: true,\n      tableLoading: true,\n      columns: [{\n        title: '参数',\n        width: '30%',\n        dataIndex: 'param',\n        scopedSlots: { customRender: 'param' }\n      }, {\n        title: '描述',\n        width: '40%',\n        dataIndex: 'text',\n        scopedSlots: { customRender: 'text' }\n      }, {\n        title: '当前值',\n        width: '30%',\n        dataIndex: 'value',\n        scopedSlots: { customRender: 'value' }\n      }],\n      dataSource: [],\n      // 列表通过 textInfo 渲染出颜色、描述和单位\n      textInfo: {\n        'jvm.memory.max': { color: 'purple', text: 'JVM 最大内存', unit: 'MB' },\n        'jvm.memory.committed': { color: 'purple', text: 'JVM 可用内存', unit: 'MB' },\n        'jvm.memory.used': { color: 'purple', text: 'JVM 已用内存', unit: 'MB' },\n        'jvm.buffer.memory.used': { color: 'cyan', text: 'JVM 缓冲区已用内存', unit: 'MB' },\n        'jvm.buffer.count': { color: 'cyan', text: '当前缓冲区数量', unit: '个' },\n        'jvm.threads.daemon': { color: 'green', text: 'JVM 守护线程数量', unit: '个' },\n        'jvm.threads.live': { color: 'green', text: 'JVM 当前活跃线程数量', unit: '个' },\n        'jvm.threads.peak': { color: 'green', text: 'JVM 峰值线程数量', unit: '个' },\n        'jvm.classes.loaded': { color: 'orange', text: 'JVM 已加载 Class 数量', unit: '个' },\n        'jvm.classes.unloaded': { color: 'orange', text: 'JVM 未加载 Class 数量', unit: '个' },\n        'jvm.gc.memory.allocated': { color: 'pink', text: 'GC 时, 年轻代分配的内存空间', unit: 'MB' },\n        'jvm.gc.memory.promoted': { color: 'pink', text: 'GC 时, 老年代分配的内存空间', unit: 'MB' },\n        'jvm.gc.max.data.size': { color: 'pink', text: 'GC 时, 老年代的最大内存空间', unit: 'MB' },\n        'jvm.gc.live.data.size': { color: 'pink', text: 'FullGC 时, 老年代的内存空间', unit: 'MB' },\n        'jvm.gc.pause.count': { color: 'blue', text: '系统启动以来GC 次数', unit: '次' },\n        'jvm.gc.pause.totalTime': { color: 'blue', text: '系统启动以来GC 总耗时', unit: '秒' }\n      },\n      // 当一条记录中需要取出多条数据的时候需要配置该字段\n      moreInfo: {\n        'jvm.gc.pause': ['.count', '.totalTime']\n      }\n    }\n  },\n  mounted() {\n    this.loadTomcatInfo()\n  },\n  methods: {\n\n    handleClickUpdate() {\n      this.loadTomcatInfo()\n    },\n\n    loadTomcatInfo() {\n      this.tableLoading = true\n      this.time = moment().format('YYYY年MM月DD日 HH时mm分ss秒')\n      Promise.all([\n        getAction('actuator/metrics/jvm.memory.max'),\n        getAction('actuator/metrics/jvm.memory.committed'),\n        getAction('actuator/metrics/jvm.memory.used'),\n        getAction('actuator/metrics/jvm.buffer.memory.used'),\n        getAction('actuator/metrics/jvm.buffer.count'),\n        getAction('actuator/metrics/jvm.threads.daemon'),\n        getAction('actuator/metrics/jvm.threads.live'),\n        getAction('actuator/metrics/jvm.threads.peak'),\n        getAction('actuator/metrics/jvm.classes.loaded'),\n        getAction('actuator/metrics/jvm.classes.unloaded'),\n        getAction('actuator/metrics/jvm.gc.memory.allocated'),\n        getAction('actuator/metrics/jvm.gc.memory.promoted'),\n        getAction('actuator/metrics/jvm.gc.max.data.size'),\n        getAction('actuator/metrics/jvm.gc.live.data.size'),\n        getAction('actuator/metrics/jvm.gc.pause')\n      ]).then((res) => {\n\n        let info = []\n        res.forEach((value, id) => {\n          let more = this.moreInfo[value.name]\n          if (!(more instanceof Array)) {\n            more = ['']\n          }\n          more.forEach((item, idx) => {\n            let param = value.name + item\n            let val = value.measurements[idx].value\n\n            if (param === 'jvm.memory.max'\n              || param === 'jvm.memory.committed'\n              || param === 'jvm.memory.used'\n              || param === 'jvm.buffer.memory.used'\n              || param === 'jvm.gc.memory.allocated'\n              || param === 'jvm.gc.memory.promoted'\n              || param === 'jvm.gc.max.data.size'\n              || param === 'jvm.gc.live.data.size'\n            ) {\n              val = this.convert(val, Number)\n            }\n            info.push({ id: param + id, param, text: 'false value', value: val })\n          })\n        })\n        this.dataSource = info\n\n\n      }).catch((e) => {\n        console.error(e)\n        this.$message.error('获取JVM信息失败')\n      }).finally(() => {\n        this.loading = false\n        this.tableLoading = false\n      })\n    },\n\n    convert(value, type) {\n      if (type === Number) {\n        return Number(value / 1048576).toFixed(3)\n      } else if (type === Date) {\n        return moment(value * 1000).format('YYYY-MM-DD HH:mm:ss')\n      }\n      return value\n    }\n  }\n}\n",null]}