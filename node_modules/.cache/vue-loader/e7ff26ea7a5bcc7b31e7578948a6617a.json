{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/modules/monitor/SystemInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/modules/monitor/SystemInfo.vue","mtime":1571018558929},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":1565525386522},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js","mtime":1565533683804},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":1571018827562}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport { getAction } from '@/api/manage'\n\nmoment.locale('zh-cn')\n\nexport default {\n  data() {\n    return {\n      time: '',\n      loading: true,\n      tableLoading: true,\n      columns: [{\n        title: '参数',\n        width: '30%',\n        dataIndex: 'param',\n        scopedSlots: { customRender: 'param' }\n      }, {\n        title: '描述',\n        width: '40%',\n        dataIndex: 'text',\n        scopedSlots: { customRender: 'text' }\n      }, {\n        title: '当前值',\n        width: '30%',\n        dataIndex: 'value',\n        scopedSlots: { customRender: 'value' }\n      }],\n      dataSource: [],\n      // 列表通过 textInfo 渲染出颜色、描述和单位\n      textInfo: {\n        'system.cpu.count': { color: 'green', text: 'CPU 数量', unit: '核' },\n        'system.cpu.usage': { color: 'green', text: '系统 CPU 使用率', unit: '%' },\n        'process.start.time': { color: 'purple', text: '应用启动时间点', unit: '' },\n        'process.uptime': { color: 'purple', text: '应用已运行时间', unit: '秒' },\n        'process.cpu.usage': { color: 'purple', text: '当前应用 CPU 使用率', unit: '%' }\n      },\n      // 当一条记录中需要取出多条数据的时候需要配置该字段\n      moreInfo: {}\n    }\n  },\n  mounted() {\n    this.loadTomcatInfo()\n  },\n  methods: {\n\n    handleClickUpdate() {\n      this.loadTomcatInfo()\n    },\n\n    loadTomcatInfo() {\n      this.tableLoading = true\n      this.time = moment().format('YYYY年MM月DD日 HH时mm分ss秒')\n      Promise.all([\n        getAction('actuator/metrics/system.cpu.count'),\n        getAction('actuator/metrics/system.cpu.usage'),\n        getAction('actuator/metrics/process.start.time'),\n        getAction('actuator/metrics/process.uptime'),\n        getAction('actuator/metrics/process.cpu.usage')\n      ]).then((res) => {\n        let info = []\n        res.forEach((value, id) => {\n          let more = this.moreInfo[value.name]\n          if (!(more instanceof Array)) {\n            more = ['']\n          }\n          more.forEach((item, idx) => {\n            let param = value.name + item\n            let val = value.measurements[idx].value\n            if (param === 'system.cpu.usage' || param === 'process.cpu.usage') {\n              val = this.convert(val, Number)\n            }\n            if (param === 'process.start.time') {\n              val = this.convert(val, Date)\n            }\n            info.push({ id: param + id, param, text: 'false value', value: val })\n          })\n        })\n        this.dataSource = info\n      }).catch((e) => {\n        console.error(e)\n        this.$message.error('获取服务器信息失败')\n      }).finally(() => {\n        this.loading = false\n        this.tableLoading = false\n      })\n    },\n\n    convert(value, type) {\n      if (type === Number) {\n        return Number(value * 100).toFixed(2)\n      } else if (type === Date) {\n        return moment(value * 1000).format('YYYY-MM-DD HH:mm:ss')\n      }\n      return value\n    }\n  }\n}\n",null]}