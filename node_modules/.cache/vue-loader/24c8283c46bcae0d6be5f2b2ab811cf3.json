{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/Ellipsis/Ellipsis.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/Ellipsis/Ellipsis.vue","mtime":1571018558890},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":1565525386522},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js","mtime":1565533683804},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":1571018827562}],"contextDependencies":[],"result":["\n  import Tooltip from 'ant-design-vue/es/tooltip'\n  import { cutStrByFullLength, getStrFullLength } from '@/components/_util/StringUtil'\n/*\n  const isSupportLineClamp = document.body.style.webkitLineClamp !== undefined;\n\n  const TooltipOverlayStyle = {\n    overflowWrap: 'break-word',\n    wordWrap: 'break-word',\n  };\n*/\n\n  export default {\n    name: 'Ellipsis',\n    components: {\n      Tooltip\n    },\n    props: {\n      prefixCls: {\n        type: String,\n        default: 'ant-pro-ellipsis'\n      },\n      tooltip: {\n        type: Boolean\n      },\n      length: {\n        type: Number,\n        required: true\n      },\n      lines: {\n        type: Number,\n        default: 1\n      },\n      fullWidthRecognition: {\n        type: Boolean,\n        default: false\n      }\n    },\n    methods: {\n      getStrDom (str) {\n        return (\n          <span>{ cutStrByFullLength(str, this.length) + '...' }</span>\n        )\n      },\n      getTooltip ( fullStr) {\n        return (\n          <Tooltip>\n            <template slot=\"title\">{ fullStr }</template>\n            { this.getStrDom(fullStr) }\n          </Tooltip>\n        )\n      }\n    },\n    render () {\n      const { tooltip, length } = this.$props\n      let str = this.$slots.default.map(vNode => vNode.text).join(\"\")\n      const strDom = tooltip && getStrFullLength(str) > length ? this.getTooltip(str) : this.getStrDom(str);\n      return (\n        strDom\n      )\n    }\n  }\n",null]}