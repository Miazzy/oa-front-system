{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/jeecg/modal/JCronModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/jeecg/modal/JCronModal.vue","mtime":1571018558899},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":1565525386522},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js","mtime":1565533683804},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":1571018827562}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name:'VueCron',\n  props:['data'],\n  data(){\n    return {\n      visible: false,\n      confirmLoading:false,\n      size:'large',\n      weekDays:['天','一','二','三','四','五','六'].map(val=>'星期'+val),\n      result: {\n        second:{},\n        minute:{},\n        hour:{},\n        day:{},\n        week:{},\n        month:{},\n        year:{}\n      },\n      defaultValue: {\n        second:{\n          cronEvery:'',\n          incrementStart:3,\n          incrementIncrement:5,\n          rangeStart:1,\n          rangeEnd:0,\n          specificSpecific:[],\n        },\n        minute:{\n          cronEvery:'',\n          incrementStart:3,\n          incrementIncrement:5,\n          rangeStart:1,\n          rangeEnd:'0',\n          specificSpecific:[],\n        },\n        hour:{\n          cronEvery:'',\n          incrementStart:3,\n          incrementIncrement:5,\n          rangeStart:'0',\n          rangeEnd:'0',\n          specificSpecific:[],\n        },\n        day:{\n          cronEvery:'',\n          incrementStart:1,\n          incrementIncrement:'1',\n          rangeStart:'',\n          rangeEnd:'',\n          specificSpecific:[],\n          cronLastSpecificDomDay:1,\n          cronDaysBeforeEomMinus:1,\n          cronDaysNearestWeekday:1,\n        },\n        week:{\n          cronEvery:'',\n          incrementStart:1,\n          incrementIncrement:1,\n          specificSpecific:[],\n          cronNthDayDay:1,\n          cronNthDayNth:1,\n        },\n        month:{\n          cronEvery:'',\n          incrementStart:3,\n          incrementIncrement:5,\n          rangeStart:1,\n          rangeEnd:1,\n          specificSpecific:[],\n        },\n        year:{\n          cronEvery:'',\n          incrementStart:2017,\n          incrementIncrement:1,\n          rangeStart:2019,\n          rangeEnd: 2019,\n          specificSpecific:[],\n        },\n        label:''\n      }\n    }\n  },\n  computed: {\n    modalWidth(){\n      return 608;\n    },\n    secondsText() {\n      let seconds = '';\n      let cronEvery=this.result.second.cronEvery||'';\n      switch (cronEvery.toString()){\n        case '1':\n          seconds = '*';\n          break;\n        case '2':\n          seconds = this.result.second.incrementStart+'/'+this.result.second.incrementIncrement;\n          break;\n        case '3':\n          this.result.second.specificSpecific.map(val=> {seconds += val+','});\n          seconds = seconds.slice(0, -1);\n          break;\n        case '4':\n          seconds = this.result.second.rangeStart+'-'+this.result.second.rangeEnd;\n          break;\n      }\n      return seconds;\n    },\n    minutesText() {\n      let minutes = '';\n      let cronEvery=this.result.minute.cronEvery||'';\n      switch (cronEvery.toString()){\n        case '1':\n          minutes = '*';\n          break;\n        case '2':\n          minutes = this.result.minute.incrementStart+'/'+this.result.minute.incrementIncrement;\n          break;\n        case '3':\n          this.result.minute.specificSpecific.map(val=> {\n            minutes += val+','\n          });\n          minutes = minutes.slice(0, -1);\n          break;\n        case '4':\n          minutes = this.result.minute.rangeStart+'-'+this.result.minute.rangeEnd;\n          break;\n      }\n      return minutes;\n    },\n    hoursText() {\n      let hours = '';\n      let cronEvery=this.result.hour.cronEvery||'';\n      switch (cronEvery.toString()){\n        case '1':\n          hours = '*';\n          break;\n        case '2':\n          hours = this.result.hour.incrementStart+'/'+this.result.hour.incrementIncrement;\n          break;\n        case '3':\n          this.result.hour.specificSpecific.map(val=> {\n            hours += val+','\n          });\n          hours = hours.slice(0, -1);\n          break;\n        case '4':\n          hours = this.result.hour.rangeStart+'-'+this.result.hour.rangeEnd;\n          break;\n      }\n      return hours;\n    },\n    daysText() {\n      let days='';\n      let cronEvery=this.result.day.cronEvery||'';\n      switch (cronEvery.toString()){\n        case '1':\n          break;\n        case '2':\n        case '4':\n        case '11':\n          days = '?';\n          break;\n        case '3':\n          days = this.result.day.incrementStart+'/'+this.result.day.incrementIncrement;\n          break;\n        case '5':\n          this.result.day.specificSpecific.map(val=> {\n            days += val+','\n          });\n          days = days.slice(0, -1);\n          break;\n        case '6':\n          days = \"L\";\n          break;\n        case '7':\n          days = \"LW\";\n          break;\n        case '8':\n          days = this.result.day.cronLastSpecificDomDay + 'L';\n          break;\n        case '9':\n          days = 'L-' + this.result.day.cronDaysBeforeEomMinus;\n          break;\n        case '10':\n          days = this.result.day.cronDaysNearestWeekday+\"W\";\n          break\n      }\n      return days;\n    },\n    weeksText() {\n      let weeks = '';\n      let cronEvery=this.result.day.cronEvery||'';\n      switch (cronEvery.toString()){\n        case '1':\n        case '3':\n        case '5':\n          weeks = '?';\n          break;\n        case '2':\n          weeks = this.result.week.incrementStart+'/'+this.result.week.incrementIncrement;\n          break;\n        case '4':\n          this.result.week.specificSpecific.map(val=> {\n            weeks += val+','\n          });\n          weeks = weeks.slice(0, -1);\n          break;\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n        case '10':\n          weeks = \"?\";\n          break;\n        case '11':\n          weeks = this.result.week.cronNthDayDay+\"#\"+this.result.week.cronNthDayNth;\n          break;\n      }\n      return weeks;\n    },\n    monthsText() {\n      let months = '';\n      let cronEvery=this.result.month.cronEvery||'';\n      switch (cronEvery.toString()){\n        case '1':\n          months = '*';\n          break;\n        case '2':\n          months = this.result.month.incrementStart+'/'+this.result.month.incrementIncrement;\n          break;\n        case '3':\n          this.result.month.specificSpecific.map(val=> {\n            months += val+','\n          });\n          months = months.slice(0, -1);\n          break;\n        case '4':\n          months = this.result.month.rangeStart+'-'+this.result.month.rangeEnd;\n          break;\n      }\n      return months;\n    },\n    yearsText() {\n      let years = '';\n      let cronEvery=this.result.year.cronEvery||'';\n      switch (cronEvery.toString()){\n        case '1':\n          years = '*';\n          break;\n        case '2':\n          years = this.result.year.incrementStart+'/'+this.result.year.incrementIncrement;\n          break;\n        case '3':\n          this.result.year.specificSpecific.map(val=> {\n            years += val+','\n          });\n          years = years.slice(0, -1);\n          break;\n        case '4':\n          years = this.result.year.rangeStart+'-'+this.result.year.rangeEnd;\n          break;\n      }\n      return years;\n    },\n    cron(){\n      return `${this.secondsText||'*'} ${this.minutesText||'*'} ${this.hoursText||'*'} ${this.daysText||'*'} ${this.monthsText||'*'} ${this.weeksText||'?'} ${this.yearsText||'*'}`\n    },\n  },\n  watch:{\n    visible:{\n      handler() {\n        // if(this.data){\n        //   //this. result = Object.keys(this.data.value).length>0?this.deepCopy(this.data.value):this.deepCopy(this.defaultValue);\n        //   //this.result = Object.keys(this.data.value).length>0?clone(this.data.value):clone(this.defaultValue);\n        //   //this.result = Object.keys(this.data.value).length>0?clone(JSON.parse(this.data.value)):clone(this.defaultValue);\n        //   this.result = Object.keys(this.data.value).length>0?JSON.parse(this.data.value):JSON.parse(JSON.stringify(this.defaultValue));\n        // }else{\n        //   //this.result = this.deepCopy(this.defaultValue);\n        //   //this.result = clone(this.defaultValue);\n        //   this.result = JSON.parse(JSON.stringify(this.defaultValue));\n        // }\n        let label = this.data;\n        if(label){\n          this.secondsReverseExp(label)\n          this.minutesReverseExp(label);\n          this.hoursReverseExp(label);\n          this.daysReverseExp(label);\n          this.daysReverseExp(label);\n          this.monthsReverseExp(label);\n          this.yearReverseExp(label);\n          JSON.parse(JSON.stringify(label));\n        }else {\n          this.result = JSON.parse(JSON.stringify(this.defaultValue));\n        }\n      }\n    }\n  },\n  methods: {\n    show(){\n      this.visible = true;\n      // console.log('secondsReverseExp',this.secondsReverseExp(this.data));\n      // console.log('minutesReverseExp',this.minutesReverseExp(this.data));\n      // console.log('hoursReverseExp',this.hoursReverseExp(this.data));\n      // console.log('daysReverseExp',this.daysReverseExp(this.data));\n      // console.log('monthsReverseExp',this.monthsReverseExp(this.data));\n      // console.log('yearReverseExp',this.yearReverseExp(this.data));\n\n    },\n    handleSubmit(){\n      this.$emit('ok',this.cron);\n      this.close();\n      this.visible = false;\n    },\n    close(){\n      this.visible = false;\n    },\n    secondsReverseExp(seconds) {\n      let val =  seconds.split(\" \")[0];\n      //alert(val);\n      let second = {\n        cronEvery:'',\n        incrementStart:3,\n        incrementIncrement:5,\n        rangeStart:1,\n        rangeEnd:0,\n        specificSpecific:[]\n      };\n      switch (true) {\n        case val.includes('*'):\n          second.cronEvery = '1';\n          break;\n        case val.includes('/'):\n          second.cronEvery = '2';\n          second.incrementStart = val.split('/')[0];\n          second.incrementIncrement = val.split('/')[1];\n          break;\n        case val.includes(','):\n          second.cronEvery = '3';\n          second.specificSpecific = val.split(',').map(Number).sort();\n          break;\n        case val.includes('-'):\n          second.cronEvery = '4';\n          second.rangeStart = val.split('-')[0];\n          second.rangeEnd = val.split('-')[1];\n          break;\n        default:\n          second.cronEvery = '1';\n      }\n      this.result.second = second;\n    },\n    minutesReverseExp(minutes) {\n      let val =  minutes.split(\" \")[1];\n      let minute = {\n        cronEvery:'',\n        incrementStart:3,\n        incrementIncrement:5,\n        rangeStart:1,\n        rangeEnd:0,\n        specificSpecific:[],\n      }\n      switch (true) {\n        case val.includes('*'):\n          minute.cronEvery = '1';\n          break;\n        case val.includes('/'):\n          minute.cronEvery = '2';\n          minute.incrementStart = val.split('/')[0];\n          minute.incrementIncrement = val.split('/')[1];\n          break;\n        case val.includes(','):\n          minute.cronEvery = '3';\n          minute.specificSpecific = val.split(',').map(Number).sort();\n          break;\n        case val.includes('-'):\n          minute.cronEvery = '4';\n          minute.rangeStart = val.split('-')[0];\n          minute.rangeEnd = val.split('-')[1];\n          break;\n        default:\n          minute.cronEvery = '1';\n      }\n      this.result.minute = minute;\n    },\n    hoursReverseExp(hours) {\n      let val =  hours.split(\" \")[2];\n      let hour ={\n          cronEvery:'',\n          incrementStart:3,\n          incrementIncrement:5,\n          rangeStart:1,\n          rangeEnd:'0',\n          specificSpecific:[],\n        };\n      switch (true) {\n        case val.includes('*'):\n          hour.cronEvery = '1';\n          break;\n        case val.includes('/'):\n          hour.cronEvery = '2';\n          hour.incrementStart = val.split('/')[0];\n          hour.incrementIncrement = val.split('/')[1];\n          break;\n        case val.includes(','):\n          hour.cronEvery = '3';\n          hour.specificSpecific = val.split(',').map(Number).sort();\n          break;\n        case val.includes('-'):\n          hour.cronEvery = '4';\n          hour.rangeStart = val.split('-')[0];\n          hour.rangeEnd = val.split('-')[1];\n          break;\n        default:\n          hour.cronEvery = '1';\n        }\n      this.result.hour = hour;\n    },\n    daysReverseExp(cron) {\n      let days =  cron.split(\" \")[3];\n      let weeks =  cron.split(\" \")[5];\n      let day ={\n        cronEvery:'',\n        incrementStart:1,\n        incrementIncrement:1,\n        rangeStart:1,\n        rangeEnd:1,\n        specificSpecific:[],\n        cronLastSpecificDomDay:1,\n        cronDaysBeforeEomMinus:1,\n        cronDaysNearestWeekday:1,\n      };\n      let week = {\n          cronEvery:'',\n          incrementStart:1,\n          incrementIncrement:1,\n          specificSpecific:[],\n          cronNthDayDay:1,\n          cronNthDayNth:'1',\n      };\n      if (!days.includes('?')) {\n        switch (true) {\n          case days.includes('*'):\n            day.cronEvery = '1';\n            break;\n          case days.includes('?'):\n            // 2、4、11\n            break;\n          case days.includes('/'):\n            day.cronEvery = '3';\n            day.incrementStart = days.split('/')[0];\n            day.incrementIncrement = days.split('/')[1];\n            break;\n          case days.includes(','):\n            day.cronEvery = '5';\n            day.specificSpecific = days.split(',').map(Number).sort();\n            // day.specificSpecific.forEach(function (value, index) {\n            //   day.specificSpecific[index] = value -1;\n            // });\n            break;\n          case days.includes('LW'):\n            day.cronEvery = '7';\n            break;\n          case days.includes('L-'):\n            day.cronEvery = '9';\n            day.cronDaysBeforeEomMinus = days.split('L-')[1];\n            break;\n          case days.includes('L'):\n\n            //alert(days);\n            if(days.len == 1){\n              day.cronEvery = '6';\n              day.cronLastSpecificDomDay = '1';\n            }\n            else\n            {\n              day.cronEvery = '8';\n              day.cronLastSpecificDomDay = Number(days.split('L')[0]);\n            }\n            break;\n          case days.includes('W'):\n            day.cronEvery = '10';\n            day.cronDaysNearestWeekday = days.split('W')[0];\n            break;\n          default:\n            day.cronEvery = '1';\n        }\n      }else {\n        switch (true){\n          case weeks.includes('/'):\n            day.cronEvery = '2';\n            week.incrementStart = weeks.split(\"/\")[0];\n            week.incrementIncrement = weeks.split(\"/\")[1];\n            break;\n          case weeks.includes(','):\n            day.cronEvery = '4';\n            week.specificSpecific = weeks.split(',').map(Number).sort();\n            break;\n          case '#':\n            day.cronEvery = '11';\n            week.cronNthDayDay = weeks.split(\"#\")[0];\n            week.cronNthDayNth = weeks.split(\"#\")[1];\n            break;\n          default:\n            day.cronEvery = '1';\n            week.cronEvery = '1';\n        }\n      }\n      this.result.day = day;\n      this.result.week = week;\n    },\n    monthsReverseExp(cron) {\n      let months = cron.split(\" \")[4];\n      let month = {\n        cronEvery:'',\n          incrementStart:3,\n          incrementIncrement:5,\n          rangeStart:1,\n          rangeEnd:1,\n          specificSpecific:[],\n      };\n      switch (true){\n        case months.includes('*'):\n          month.cronEvery = '1';\n          break;\n        case months.includes('/'):\n          month.cronEvery = '2';\n          month.incrementStart = months.split('/')[0];\n          month.incrementIncrement = months.split('/')[1];\n          break;\n        case months.includes(','):\n          month.cronEvery = '3';\n          month.specificSpecific = months.split(',').map(Number).sort();\n          break;\n        case months.includes('-'):\n          month.cronEvery = '4';\n          month.rangeStart = months.split('-')[0];\n          month.rangeEnd = months.split('-')[1];\n          break;\n        default:\n          month.cronEvery = '1';\n      }\n      this.result.month = month;\n    },\n    yearReverseExp(cron) {\n      let years = cron.split(\" \")[6];\n      let year = {\n        cronEvery:'',\n        incrementStart:3,\n        incrementIncrement:5,\n        rangeStart:2019,\n        rangeEnd:2019,\n        specificSpecific:[],\n      };\n      switch (true){\n        case years.includes('*'):\n          year.cronEvery = '1';\n          break;\n        case years.includes('/'):\n          year.cronEvery = '2';\n          year.incrementStart = years.split('/')[0];\n          year.incrementIncrement = years.split('/')[1];\n          break;\n        case years.includes(','):\n          year.cronEvery = '3';\n          year.specificSpecific = years.split(',').map(Number).sort();\n          break;\n        case years.includes('-'):\n          year.cronEvery = '4';\n          year.rangeStart = years.split('-')[0];\n          year.rangeEnd = years.split('-')[1];\n          break;\n        default:\n          year.cronEvery = '1';\n      }\n      this.result.year = year;\n    }\n  }\n}\n",null]}