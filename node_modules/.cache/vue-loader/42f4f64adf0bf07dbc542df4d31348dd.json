{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/layouts/TabLayout.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/layouts/TabLayout.vue","mtime":1571018558902},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport GlobalLayout from '@/components/page/GlobalLayout'\nimport Contextmenu from '@/components/menu/Contextmenu'\nimport { mixin, mixinDevice } from '@/utils/mixin.js'\n\nconst indexKey = '/dashboard/analysis'\n\nexport default {\n  name: 'TabLayout',\n  components: {\n    GlobalLayout,\n    Contextmenu\n  },\n  mixins: [mixin, mixinDevice],\n  data() {\n    return {\n      pageList: [],\n      linkList: [],\n      activePage: '',\n      menuVisible: false,\n      menuItemList: [\n        { key: '1', icon: 'arrow-left', text: '关闭左侧' },\n        { key: '2', icon: 'arrow-right', text: '关闭右侧' },\n        { key: '3', icon: 'close', text: '关闭其它' }\n      ]\n    }\n  },\n  computed: {\n    multipage() {\n      //判断如果是手机模式，自动切换为单页面模式\n      if (this.isMobile()) {\n        return false\n      } else {\n        return this.$store.state.app.multipage\n      }\n    }\n  },\n  created() {\n    if (this.$route.path != indexKey) {\n      this.pageList.push({\n        name: 'dashboard-analysis',\n        path: indexKey,\n        fullPath: indexKey,\n        meta: {\n          icon: 'dashboard',\n          title: '首页'\n        }\n      })\n      this.linkList.push(indexKey)\n    }\n    this.pageList.push(this.$route)\n    this.linkList.push(this.$route.fullPath)\n    this.activePage = this.$route.fullPath\n  },\n  watch: {\n    '$route': function(newRoute) {\n      this.activePage = newRoute.fullPath\n      if (!this.multipage) {\n        this.linkList = [newRoute.fullPath]\n        this.pageList = [Object.assign({},newRoute)]\n      } else if (this.linkList.indexOf(newRoute.fullPath) < 0) {\n        this.linkList.push(newRoute.fullPath)\n        this.pageList.push(Object.assign({},newRoute))\n      } else if (this.linkList.indexOf(newRoute.fullPath) >= 0) {\n        let oldIndex = this.linkList.indexOf(newRoute.fullPath)\n        let oldPositionRoute = this.pageList[oldIndex]\n        this.pageList.splice(oldIndex, 1, Object.assign({},newRoute,{meta:oldPositionRoute.meta}))\n      }\n    },\n    'activePage': function(key) {\n      let index = this.linkList.lastIndexOf(key)\n      let waitRouter = this.pageList[index]\n      this.$router.push(Object.assign({},waitRouter));\n    },\n    'multipage': function(newVal) {\n      if (!newVal) {\n        this.linkList = [this.$route.fullPath]\n        this.pageList = [this.$route]\n      }\n    }\n  },\n  methods: {\n    changePage(key) {\n      this.activePage = key\n    },\n    editPage(key, action) {\n      this[action](key)\n    },\n    remove(key) {\n      if (key == indexKey) {\n        this.$message.warning('首页不能关闭!')\n        return\n      }\n      if (this.pageList.length === 1) {\n        this.$message.warning('这是最后一页，不能再关闭了啦')\n        return\n      }\n      this.pageList = this.pageList.filter(item => item.fullPath !== key)\n      let index = this.linkList.indexOf(key)\n      this.linkList = this.linkList.filter(item => item !== key)\n      index = index >= this.linkList.length ? this.linkList.length - 1 : index\n      this.activePage = this.linkList[index]\n    },\n    onContextmenu(e) {\n      const pagekey = this.getPageKey(e.target)\n      if (pagekey !== null) {\n        e.preventDefault()\n        this.menuVisible = true\n      }\n    },\n    getPageKey(target, depth) {\n      depth = depth || 0\n      if (depth > 2) {\n        return null\n      }\n      let pageKey = target.getAttribute('pagekey')\n      pageKey = pageKey || (target.previousElementSibling ? target.previousElementSibling.getAttribute('pagekey') : null)\n      return pageKey || (target.firstElementChild ? this.getPageKey(target.firstElementChild, ++depth) : null)\n    },\n    onMenuSelect(key, target) {\n      let pageKey = this.getPageKey(target)\n      switch (key) {\n        case '1':\n          this.closeLeft(pageKey)\n          break\n        case '2':\n          this.closeRight(pageKey)\n          break\n        case '3':\n          this.closeOthers(pageKey)\n          break\n        default:\n          break\n      }\n    },\n    closeOthers(pageKey) {\n      let index = this.linkList.indexOf(pageKey)\n      if (pageKey == indexKey) {\n        this.linkList = this.linkList.slice(index, index + 1)\n        this.pageList = this.pageList.slice(index, index + 1)\n        this.activePage = this.linkList[0]\n      } else {\n        let indexContent = this.pageList.slice(0, 1)[0]\n        this.linkList = this.linkList.slice(index, index + 1)\n        this.pageList = this.pageList.slice(index, index + 1)\n        this.linkList.unshift(indexKey)\n        this.pageList.unshift(indexContent)\n        this.activePage = this.linkList[1]\n      }\n    },\n    closeLeft(pageKey) {\n      if (pageKey == indexKey) {\n        return\n      }\n      let tempList = [...this.pageList]\n      let indexContent = tempList.slice(0, 1)[0]\n      let index = this.linkList.indexOf(pageKey)\n      this.linkList = this.linkList.slice(index)\n      this.pageList = this.pageList.slice(index)\n      this.linkList.unshift(indexKey)\n      this.pageList.unshift(indexContent)\n      if (this.linkList.indexOf(this.activePage) < 0) {\n        this.activePage = this.linkList[0]\n      }\n    },\n    closeRight(pageKey) {\n      let index = this.linkList.indexOf(pageKey)\n      this.linkList = this.linkList.slice(0, index + 1)\n      this.pageList = this.pageList.slice(0, index + 1)\n      if (this.linkList.indexOf(this.activePage < 0)) {\n        this.activePage = this.linkList[this.linkList.length - 1]\n      }\n    },\n    //update-begin-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n    dynamicRouterShow(key,title){\n      let keyIndex = this.linkList.indexOf(key)\n      if(keyIndex>=0){\n        let currRouter = this.pageList[keyIndex]\n        let meta = Object.assign({},currRouter.meta,{title:title})\n        this.pageList.splice(keyIndex, 1, Object.assign({},currRouter,{meta:meta}))\n      }\n    }\n    //update-end-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n  }\n}\n",null]}