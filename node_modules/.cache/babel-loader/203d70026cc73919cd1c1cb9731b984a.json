{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/jeecg/JTreeDict.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/jeecg/JTreeDict.vue","mtime":1571018558898},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _toConsumableArray from \"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAction } from '@/api/manage';\nexport default {\n  name: 'JTreeDict',\n  data: function data() {\n    return {\n      treeData: [],\n      treeValue: \"\",\n      url_root: \"/sys/category/loadTreeRoot\",\n      url_children: \"/sys/category/loadTreeChildren\",\n      url_view: '/sys/category/loadOne'\n    };\n  },\n  props: {\n    value: {\n      type: String,\n      required: false\n    },\n    placeholder: {\n      type: String,\n      default: '请选择',\n      required: false\n    },\n    parentCode: {\n      type: String,\n      default: '',\n      required: false\n    },\n    field: {\n      type: String,\n      default: 'id',\n      required: false\n    },\n    root: {\n      type: Object,\n      required: false,\n      default: function _default() {\n        return {\n          pid: '0'\n        };\n      }\n    },\n    async: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n      required: false\n    }\n  },\n  watch: {\n    root: {\n      handler: function handler(val) {\n        console.log(\"root-change\", val);\n      },\n      deep: true\n    },\n    parentCode: {\n      handler: function handler() {\n        this.loadRoot();\n      }\n    },\n    value: {\n      handler: function handler() {\n        this.loadViewInfo();\n      }\n    }\n  },\n  created: function created() {\n    this.loadRoot();\n    this.loadViewInfo();\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  },\n  methods: {\n    loadViewInfo: function loadViewInfo() {\n      var _this = this;\n\n      if (!this.value || this.value == \"0\") {\n        this.treeValue = \"\";\n      } else {\n        var param = {\n          field: this.field,\n          val: this.value\n        };\n        getAction(this.url_view, param).then(function (res) {\n          if (res.success) {\n            _this.treeValue = {\n              value: _this.value,\n              label: res.result.name\n            };\n          }\n        });\n      }\n    },\n    loadRoot: function loadRoot() {\n      var _this2 = this;\n\n      var param = {\n        async: this.async,\n        pcode: this.parentCode\n      };\n      getAction(this.url_root, param).then(function (res) {\n        if (res.success) {\n          _this2.handleTreeNodeValue(res.result);\n\n          console.log(\"aaaa\", res.result);\n          _this2.treeData = _toConsumableArray(res.result);\n        } else {\n          _this2.$message.error(res.message);\n        }\n      });\n    },\n    asyncLoadTreeData: function asyncLoadTreeData(treeNode) {\n      var _this3 = this;\n\n      return new Promise(function (resolve) {\n        if (!_this3.async) {\n          resolve();\n          return;\n        }\n\n        if (treeNode.$vnode.children) {\n          resolve();\n          return;\n        }\n\n        var pid = treeNode.$vnode.key;\n        var param = {\n          pid: pid\n        };\n        getAction(_this3.url_children, param).then(function (res) {\n          if (res.success) {\n            _this3.handleTreeNodeValue(res.result);\n\n            _this3.addChildren(pid, res.result, _this3.treeData);\n\n            _this3.treeData = _toConsumableArray(_this3.treeData);\n          }\n\n          resolve();\n        });\n      });\n    },\n    addChildren: function addChildren(pid, children, treeArray) {\n      if (treeArray && treeArray.length > 0) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = treeArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n\n            if (item.key == pid) {\n              if (!children || children.length == 0) {\n                item.leaf = true;\n              } else {\n                item.children = children;\n              }\n\n              break;\n            } else {\n              this.addChildren(pid, children, item.children);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    },\n    handleTreeNodeValue: function handleTreeNodeValue(result) {\n      var storeField = this.field == 'code' ? 'code' : 'key';\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = result[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var i = _step2.value;\n          i.value = i[storeField];\n          i.isLeaf = !i.leaf ? false : true;\n\n          if (i.children && i.children.length > 0) {\n            this.handleTreeNodeValue(i.children);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    },\n    onChange: function onChange(value) {\n      console.log(value);\n      this.$emit('change', value.value);\n      this.treeValue = value;\n    },\n    onSearch: function onSearch(value) {\n      console.log(value);\n    },\n    getCurrTreeData: function getCurrTreeData() {\n      return this.treeData;\n    }\n  }\n};",null]}