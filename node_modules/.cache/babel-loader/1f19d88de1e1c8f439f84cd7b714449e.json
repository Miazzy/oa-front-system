{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/dict/JDictSelectUtil.js","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/dict/JDictSelectUtil.js","mtime":1571018558894},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":1565525386522},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js","mtime":1565533683804},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1565525383413}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _asyncToGenerator from \"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\n/**\n * 字典 util\n * author: scott\n * date: 20190109\n */\nimport { ajaxGetDictItems } from '@/api/api';\nimport { getAction } from '@/api/manage';\n/**\n * 获取字典数组\n * @param dictCode 字典Code\n * @return List<Map>\n */\n\nexport function initDictOptions(_x) {\n  return _initDictOptions.apply(this, arguments);\n}\n/**\n * 字典值替换文本通用方法\n * @param dictOptions  字典数组\n * @param text  字典值\n * @return String\n */\n\nfunction _initDictOptions() {\n  _initDictOptions = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(dictCode) {\n    var res;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (dictCode) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", '字典Code不能为空!');\n\n          case 2:\n            _context.next = 4;\n            return ajaxGetDictItems(dictCode);\n\n          case 4:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _initDictOptions.apply(this, arguments);\n}\n\nexport function filterDictText(dictOptions, text) {\n  var re = \"\";\n  dictOptions.forEach(function (option) {\n    if (text === option.value) {\n      re = option.text;\n    }\n  });\n  return re;\n}\n/**\n * 字典值替换文本通用方法(多选)\n * @param dictOptions  字典数组\n * @param text  字典值\n * @return String\n */\n\nexport function filterMultiDictText(dictOptions, text) {\n  if (!text) {\n    return \"\";\n  }\n\n  var re = \"\";\n  var arr = text.split(\",\");\n  dictOptions.forEach(function (option) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] === option.value) {\n        re += option.text + \",\";\n        break;\n      }\n    }\n  });\n\n  if (re == \"\") {\n    return \"\";\n  }\n\n  return re.substring(0, re.length - 1);\n}\n/**\n * 翻译字段值对应的文本\n * @param children\n * @returns string\n */\n\nexport function ajaxFilterDictText(_x2, _x3) {\n  return _ajaxFilterDictText.apply(this, arguments);\n}\n\nfunction _ajaxFilterDictText() {\n  _ajaxFilterDictText = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2(dictCode, key) {\n    var res;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (dictCode) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", '字典Code不能为空!');\n\n          case 2:\n            if (key) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", '');\n\n          case 4:\n            _context2.next = 6;\n            return getAction(\"/sys/dict/getDictText/\".concat(dictCode, \"/\").concat(key));\n\n          case 6:\n            res = _context2.sent;\n\n            if (!res.success) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", res.result);\n\n          case 11:\n            return _context2.abrupt(\"return\", '');\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _ajaxFilterDictText.apply(this, arguments);\n}",null]}