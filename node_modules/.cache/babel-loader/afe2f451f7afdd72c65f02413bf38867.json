{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/table/StandardTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/table/StandardTable.vue","mtime":1571018558905},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport _objectSpread from \"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"StandardTable\",\n  // props: ['bordered', 'loading', 'columns', 'data', 'rowKey', 'pagination', 'selectedRows'],\n  props: {\n    /**\n     * 数据加载函数，返回值必须是 Promise\n     * 默认情况下必须传递 data 参数；\n     *    如果使用本地数据渲染表格，业务代码中将获取本地数据包装为 Promise 即可。\n     *\n     * currentData 用于向外暴露表格当前渲染的数据，\n     * 业务开发中也可以直接修改 currentData，从而重新渲染表格（仅推荐用于客户端排序、数据过滤等场景）\n     */\n    data: {\n      type: Function,\n      required: true\n    },\n    dataSource: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    columns: {\n      type: Array,\n      required: true\n    },\n\n    /*      pagination: {\n            type: Object,\n            default () {\n              return {}\n            }\n          },*/\n    pageSize: {\n      type: Number,\n      default: 10\n    },\n    pageNum: {\n      type: Number,\n      default: 1\n    },\n    pageSizeOptions: {\n      type: Array,\n      default: function _default() {\n        return ['10', '20', '30', '40', '50'];\n      }\n    },\n    responseParamsName: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    bordered: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * 表格大小风格，default, middle, small\n     */\n    size: {\n      type: String,\n      default: 'default'\n    },\n    rowKey: {\n      type: String,\n      default: ''\n    },\n    selectedRows: {\n      type: Array,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      needTotalList: [],\n      selectedRowKeys: [],\n      loading: true,\n      total: 0,\n      pageNumber: this.pageNum,\n      currentPageSize: this.pageSize,\n      defaultCurrent: 1,\n      sortParams: {},\n      current: [],\n      pagination: {},\n      paramsName: {}\n    };\n  },\n  created: function created() {\n    //数据请求参数配置\n    this.paramsName = Object.assign({}, {\n      pageNumber: \"pageNo\",\n      pageSize: \"pageSize\",\n      total: \"totalCount\",\n      results: \"data\",\n      sortColumns: \"sortColumns\"\n    }, this.responseParamsName);\n    this.needTotalList = this.initTotalList(this.columns); // load data\n\n    this.loadData({\n      pageNum: this.pageNumber\n    });\n  },\n  methods: {\n    updateSelect: function updateSelect(selectedRowKeys, selectedRows) {\n      this.selectedRowKeys = selectedRowKeys;\n      var list = this.needTotalList;\n      this.needTotalList = list.map(function (item) {\n        return _objectSpread({}, item, {\n          total: selectedRows.reduce(function (sum, val) {\n            return sum + val[item.dataIndex];\n          }, 0)\n        });\n      });\n      this.$emit('change', selectedRowKeys, selectedRows);\n    },\n    initTotalList: function initTotalList(columns) {\n      var totalList = [];\n      columns.forEach(function (column) {\n        if (column.needTotal) {\n          totalList.push(_objectSpread({}, column, {\n            total: 0\n          }));\n        }\n      });\n      return totalList;\n    },\n    loadData: function loadData(params) {\n      var that = this;\n      that.loading = true;\n      params = Object.assign({}, params);\n      var remoteParams = Object.assign({}, that.sortParams);\n      remoteParams[that.paramsName.pageNumber] = params.pageNum || that.pageNumber;\n      remoteParams[that.paramsName.pageSize] = params.pageSize || that.currentPageSize;\n\n      if (params.pageNum) {\n        that.pageNumber = params.pageNum;\n      }\n\n      if (params.pageSize) {\n        that.currentPageSize = params.pageSize;\n      }\n\n      var dataPromise = that.data(remoteParams);\n      dataPromise.then(function (response) {\n        if (!response) {\n          that.loading = false;\n          return;\n        }\n\n        var results = response[that.paramsName.results];\n        results = results instanceof Array && results || [];\n        that.current = results;\n        that.$emit(\"update:currentData\", that.current.slice());\n        that.$emit(\"dataloaded\", that.current.slice());\n        that.total = response[that.paramsName.total] * 1;\n        that.pagination = that.pager();\n        that.loading = false;\n      }, function () {\n        // error callback\n        that.loading = false;\n      });\n    },\n    // eslint-disable-next-line\n    onPagerChange: function onPagerChange(page, pageSize) {\n      this.pageNumber = page;\n      this.loadData({\n        pageNum: page\n      });\n    },\n    onPagerSizeChange: function onPagerSizeChange(current, size) {\n      this.currentPageSize = size;\n      /*\n      if (current === this.pageNumber) this.loadData()\n      console.log('page-size-change', current, size)\n      */\n    },\n    onClearSelected: function onClearSelected() {\n      this.selectedRowKeys = [];\n      this.updateSelect([], []);\n    },\n    pager: function pager() {\n      return {\n        total: this.total,\n        showTotal: function showTotal(total) {\n          return \"\\u5171\\u6709 \".concat(total, \" \\u6761\");\n        },\n        showSizeChanger: true,\n        pageSizeOptions: this.pageSizeOptions,\n        pageSize: this.pageSize,\n        defaultCurrent: this.defaultCurrent,\n        onChange: this.onPagerChange,\n        onShowSizeChange: this.onPagerSizeChange\n      };\n    }\n  },\n  watch: {\n    'selectedRows': function selectedRows(_selectedRows) {\n      this.needTotalList = this.needTotalList.map(function (item) {\n        return _objectSpread({}, item, {\n          total: _selectedRows.reduce(function (sum, val) {\n            return sum + val[item.dataIndex];\n          }, 0)\n        });\n      });\n    }\n  }\n};",null]}