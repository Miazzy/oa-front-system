{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/modules/monitor/JvmInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/modules/monitor/JvmInfo.vue","mtime":1571018558928},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from 'moment';\nimport { getAction } from '@/api/manage';\nmoment.locale('zh-cn');\nexport default {\n  data: function data() {\n    return {\n      time: '',\n      loading: true,\n      tableLoading: true,\n      columns: [{\n        title: '参数',\n        width: '30%',\n        dataIndex: 'param',\n        scopedSlots: {\n          customRender: 'param'\n        }\n      }, {\n        title: '描述',\n        width: '40%',\n        dataIndex: 'text',\n        scopedSlots: {\n          customRender: 'text'\n        }\n      }, {\n        title: '当前值',\n        width: '30%',\n        dataIndex: 'value',\n        scopedSlots: {\n          customRender: 'value'\n        }\n      }],\n      dataSource: [],\n      // 列表通过 textInfo 渲染出颜色、描述和单位\n      textInfo: {\n        'jvm.memory.max': {\n          color: 'purple',\n          text: 'JVM 最大内存',\n          unit: 'MB'\n        },\n        'jvm.memory.committed': {\n          color: 'purple',\n          text: 'JVM 可用内存',\n          unit: 'MB'\n        },\n        'jvm.memory.used': {\n          color: 'purple',\n          text: 'JVM 已用内存',\n          unit: 'MB'\n        },\n        'jvm.buffer.memory.used': {\n          color: 'cyan',\n          text: 'JVM 缓冲区已用内存',\n          unit: 'MB'\n        },\n        'jvm.buffer.count': {\n          color: 'cyan',\n          text: '当前缓冲区数量',\n          unit: '个'\n        },\n        'jvm.threads.daemon': {\n          color: 'green',\n          text: 'JVM 守护线程数量',\n          unit: '个'\n        },\n        'jvm.threads.live': {\n          color: 'green',\n          text: 'JVM 当前活跃线程数量',\n          unit: '个'\n        },\n        'jvm.threads.peak': {\n          color: 'green',\n          text: 'JVM 峰值线程数量',\n          unit: '个'\n        },\n        'jvm.classes.loaded': {\n          color: 'orange',\n          text: 'JVM 已加载 Class 数量',\n          unit: '个'\n        },\n        'jvm.classes.unloaded': {\n          color: 'orange',\n          text: 'JVM 未加载 Class 数量',\n          unit: '个'\n        },\n        'jvm.gc.memory.allocated': {\n          color: 'pink',\n          text: 'GC 时, 年轻代分配的内存空间',\n          unit: 'MB'\n        },\n        'jvm.gc.memory.promoted': {\n          color: 'pink',\n          text: 'GC 时, 老年代分配的内存空间',\n          unit: 'MB'\n        },\n        'jvm.gc.max.data.size': {\n          color: 'pink',\n          text: 'GC 时, 老年代的最大内存空间',\n          unit: 'MB'\n        },\n        'jvm.gc.live.data.size': {\n          color: 'pink',\n          text: 'FullGC 时, 老年代的内存空间',\n          unit: 'MB'\n        },\n        'jvm.gc.pause.count': {\n          color: 'blue',\n          text: '系统启动以来GC 次数',\n          unit: '次'\n        },\n        'jvm.gc.pause.totalTime': {\n          color: 'blue',\n          text: '系统启动以来GC 总耗时',\n          unit: '秒'\n        }\n      },\n      // 当一条记录中需要取出多条数据的时候需要配置该字段\n      moreInfo: {\n        'jvm.gc.pause': ['.count', '.totalTime']\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.loadTomcatInfo();\n  },\n  methods: {\n    handleClickUpdate: function handleClickUpdate() {\n      this.loadTomcatInfo();\n    },\n    loadTomcatInfo: function loadTomcatInfo() {\n      var _this = this;\n\n      this.tableLoading = true;\n      this.time = moment().format('YYYY年MM月DD日 HH时mm分ss秒');\n      Promise.all([getAction('actuator/metrics/jvm.memory.max'), getAction('actuator/metrics/jvm.memory.committed'), getAction('actuator/metrics/jvm.memory.used'), getAction('actuator/metrics/jvm.buffer.memory.used'), getAction('actuator/metrics/jvm.buffer.count'), getAction('actuator/metrics/jvm.threads.daemon'), getAction('actuator/metrics/jvm.threads.live'), getAction('actuator/metrics/jvm.threads.peak'), getAction('actuator/metrics/jvm.classes.loaded'), getAction('actuator/metrics/jvm.classes.unloaded'), getAction('actuator/metrics/jvm.gc.memory.allocated'), getAction('actuator/metrics/jvm.gc.memory.promoted'), getAction('actuator/metrics/jvm.gc.max.data.size'), getAction('actuator/metrics/jvm.gc.live.data.size'), getAction('actuator/metrics/jvm.gc.pause')]).then(function (res) {\n        var info = [];\n        res.forEach(function (value, id) {\n          var more = _this.moreInfo[value.name];\n\n          if (!(more instanceof Array)) {\n            more = [''];\n          }\n\n          more.forEach(function (item, idx) {\n            var param = value.name + item;\n            var val = value.measurements[idx].value;\n\n            if (param === 'jvm.memory.max' || param === 'jvm.memory.committed' || param === 'jvm.memory.used' || param === 'jvm.buffer.memory.used' || param === 'jvm.gc.memory.allocated' || param === 'jvm.gc.memory.promoted' || param === 'jvm.gc.max.data.size' || param === 'jvm.gc.live.data.size') {\n              val = _this.convert(val, Number);\n            }\n\n            info.push({\n              id: param + id,\n              param: param,\n              text: 'false value',\n              value: val\n            });\n          });\n        });\n        _this.dataSource = info;\n      }).catch(function (e) {\n        console.error(e);\n\n        _this.$message.error('获取JVM信息失败');\n      }).finally(function () {\n        _this.loading = false;\n        _this.tableLoading = false;\n      });\n    },\n    convert: function convert(value, type) {\n      if (type === Number) {\n        return Number(value / 1048576).toFixed(3);\n      } else if (type === Date) {\n        return moment(value * 1000).format('YYYY-MM-DD HH:mm:ss');\n      }\n\n      return value;\n    }\n  }\n};",null]}