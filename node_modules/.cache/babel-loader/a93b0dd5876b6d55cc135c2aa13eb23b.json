{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/modules/monitor/RedisInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/modules/monitor/RedisInfo.vue","mtime":1571018558928},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.parse-int\";\nimport _slicedToArray from \"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from 'moment';\nimport { getAction } from '@/api/manage';\nimport AreaChartTy from '@/components/chart/AreaChartTy';\nexport default {\n  name: 'RedisInfo',\n  components: {\n    AreaChartTy: AreaChartTy\n  },\n  data: function data() {\n    return {\n      loading: true,\n      tableLoading: true,\n      // 定时器ID\n      timer: null,\n      // 定时器周期\n      millisec: 3000,\n      // Key 实时数量\n      key: {\n        title: 'Radis Key 实时数量（个）',\n        dataSource: [],\n        y: '数量（个）',\n        height: 340,\n        min: 0,\n        max: 100,\n        color: '#FF6987',\n        lineSize: 8,\n        lineColor: '#DC143C'\n      },\n      // 内存实时占用情况\n      memory: {\n        title: 'Radis 内存实时占用情况（KB）',\n        dataSource: [],\n        y: '内存（KB）',\n        min: 0,\n        max: 3000,\n        height: 340,\n        lineSize: 8\n      },\n      redisInfo: [],\n      columns: [{\n        title: 'Key',\n        align: 'center',\n        dataIndex: 'key'\n      }, {\n        title: 'Description',\n        align: 'left',\n        dataIndex: 'description'\n      }, {\n        title: 'Value',\n        align: 'center',\n        dataIndex: 'value'\n      }],\n      url: {\n        keysSize: '/actuator/redis/keysSize',\n        memoryInfo: '/actuator/redis/memoryInfo',\n        info: '/actuator/redis/info'\n      },\n      path: '/monitor/redis/info'\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.openTimer();\n    this.loadRedisInfo();\n    setTimeout(function () {\n      _this.loadData();\n    }, 1000);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.closeTimer();\n  },\n  methods: {\n    /** 开启定时器 */\n    openTimer: function openTimer() {\n      var _this2 = this;\n\n      this.loadData();\n      this.closeTimer();\n      this.timer = setInterval(function () {\n        if (_this2.$route.path === _this2.path) {\n          _this2.loadData();\n        }\n      }, this.millisec);\n    },\n\n    /** 关闭定时器 */\n    closeTimer: function closeTimer() {\n      if (this.timer) clearInterval(this.timer);\n    },\n\n    /** 查询数据 */\n    loadData: function loadData() {\n      var _this3 = this;\n\n      Promise.all([getAction(this.url.keysSize), getAction(this.url.memoryInfo)]).then(function (res) {\n        var time = moment().format('hh:mm:ss');\n\n        var _res = _slicedToArray(res, 2),\n            currentSize = _res[0].dbSize,\n            memoryInfo = _res[1];\n\n        var currentMemory = memoryInfo.used_memory / 1000; // push 数据\n\n        _this3.key.dataSource.push({\n          x: time,\n          y: currentSize\n        });\n\n        _this3.memory.dataSource.push({\n          x: time,\n          y: currentMemory\n        }); // 最大长度为6\n\n\n        if (_this3.key.dataSource.length > 6) {\n          _this3.key.dataSource.splice(0, 1);\n\n          _this3.memory.dataSource.splice(0, 1);\n        } // 计算 Key 最大最小值\n\n\n        var keyPole = _this3.getMaxAndMin(_this3.key.dataSource, 'y');\n\n        _this3.key.max = Math.floor(keyPole[0]) + 10;\n        _this3.key.min = Math.floor(keyPole[1]) - 10;\n        if (_this3.key.min < 0) _this3.key.min = 0; // 计算 Memory 最大最小值\n\n        var memoryPole = _this3.getMaxAndMin(_this3.memory.dataSource, 'y');\n\n        _this3.memory.max = Math.floor(memoryPole[0]) + 100;\n        _this3.memory.min = Math.floor(memoryPole[1]) - 100;\n        if (_this3.memory.min < 0) _this3.memory.min = 0;\n      }).catch(function (e) {\n        console.error(e);\n\n        _this3.closeTimer();\n\n        _this3.$message.error('获取 Redis 信息失败');\n      }).finally(function () {\n        _this3.loading = false;\n      });\n    },\n    // 获取一组数据中最大和最小的值\n    getMaxAndMin: function getMaxAndMin(dataSource, field) {\n      var maxValue = null,\n          minValue = null;\n      dataSource.forEach(function (item) {\n        var value = Number.parseInt(item[field]); // max\n\n        if (maxValue == null) {\n          maxValue = value;\n        } else if (value > maxValue) {\n          maxValue = value;\n        } // min\n\n\n        if (minValue == null) {\n          minValue = value;\n        } else if (value < minValue) {\n          minValue = value;\n        }\n      });\n      return [maxValue, minValue];\n    },\n    loadRedisInfo: function loadRedisInfo() {\n      var _this4 = this;\n\n      this.tableLoading = true;\n      getAction(this.url.info).then(function (res) {\n        _this4.redisInfo = res.result;\n      }).finally(function () {\n        _this4.tableLoading = false;\n      });\n    }\n  }\n};",null]}