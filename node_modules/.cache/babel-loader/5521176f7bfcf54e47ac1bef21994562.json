{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/jeecg/modules/JEditableTable/DefaultTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/jeecg/modules/JEditableTable/DefaultTable.vue","mtime":1571018558921},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js","mtime":1565533683804},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":1571018827562}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from 'moment';\nimport { FormTypes } from '@/utils/JEditableTableUtil';\nimport { randomUUID, randomNumber } from '@/utils/util';\nimport JEditableTable from '@/components/jeecg/JEditableTable';\nexport default {\n  name: 'DefaultTable',\n  components: {\n    JEditableTable: JEditableTable\n  },\n  data: function data() {\n    return {\n      loading: false,\n      columns: [{\n        title: '字段名称',\n        key: 'dbFieldName',\n        // width: '19%',\n        width: '300px',\n        type: FormTypes.input,\n        defaultValue: '',\n        placeholder: '请输入${title}',\n        validateRules: [{\n          required: true,\n          // 必填\n          message: '请输入${title}' // 显示的文本\n\n        }, {\n          pattern: /^[a-z|A-Z][a-z|A-Z\\d_-]{0,}$/,\n          // 正则\n          message: '${title}必须以字母开头，可包含数字、下划线、横杠'\n        }]\n      }, {\n        title: '文件域',\n        key: 'upload',\n        type: FormTypes.upload,\n        // width: '19%',\n        width: '300px',\n        placeholder: '点击上传',\n        token: true,\n        responseName: 'message',\n        action: window._CONFIG['domianURL'] + '/sys/common/upload'\n      }, {\n        title: '字段类型',\n        key: 'dbFieldType',\n        // width: '18%',\n        width: '300px',\n        type: FormTypes.select,\n        options: [// 下拉选项\n        {\n          title: 'String',\n          value: 'string'\n        }, {\n          title: 'Integer',\n          value: 'int'\n        }, {\n          title: 'Double',\n          value: 'double'\n        }, {\n          title: 'Boolean',\n          value: 'boolean'\n        }],\n        allowInput: true,\n        defaultValue: '',\n        placeholder: '请选择${title}',\n        validateRules: [{\n          required: true,\n          message: '请选择${title}'\n        }]\n      }, {\n        title: '性别（字典）',\n        key: 'sex_dict',\n        width: '300px',\n        type: FormTypes.select,\n        options: [],\n        dictCode: 'sex',\n        placeholder: '请选择${title}',\n        validateRules: [{\n          required: true,\n          message: '请选择${title}'\n        }]\n      }, {\n        title: '多选测试',\n        key: 'multipleSelect',\n        // width: '18%',\n        width: '300px',\n        type: FormTypes.select,\n        props: {\n          'mode': 'multiple'\n        },\n        // 支持多选\n        options: [{\n          title: 'String',\n          value: 'string'\n        }, {\n          title: 'Integer',\n          value: 'int'\n        }, {\n          title: 'Double',\n          value: 'double'\n        }, {\n          title: 'Boolean',\n          value: 'boolean'\n        }],\n        defaultValue: ['int', 'boolean'],\n        // 多个默认项\n        // defaultValue: 'string,double,int', // 也可使用这种方式\n        placeholder: '这里可以多选',\n        validateRules: [{\n          required: true,\n          message: '请选择${title}'\n        }]\n      }, {\n        title: '字段长度',\n        key: 'dbLength',\n        // width: '8%',\n        width: '100px',\n        type: FormTypes.inputNumber,\n        defaultValue: 32,\n        placeholder: '${title}',\n        validateRules: [{\n          required: true,\n          message: '请输入${title}'\n        }]\n      }, {\n        title: '日期',\n        key: 'datetime',\n        // width: '22%',\n        width: '320px',\n        type: FormTypes.datetime,\n        defaultValue: '2019-4-30 14:52:22',\n        placeholder: '请选择${title}',\n        validateRules: [{\n          required: true,\n          message: '请选择${title}'\n        }]\n      }, {\n        title: '可以为空',\n        key: 'isNull',\n        // width: '8%',\n        width: '100px',\n        type: FormTypes.checkbox,\n        customValue: ['Y', 'N'],\n        // true ,false\n        defaultChecked: false\n      }, {\n        title: '操作',\n        key: 'action',\n        // width: '8%',\n        width: '100px',\n        type: FormTypes.slot,\n        slotName: 'action',\n        defaultValue: '删除'\n      }],\n      dataSource: [],\n      selectedRowIds: []\n    };\n  },\n  mounted: function mounted() {\n    this.randomData(23, false);\n  },\n  methods: {\n    /** 表单验证 */\n    handleTableCheck: function handleTableCheck() {\n      var _this = this;\n\n      this.$refs.editableTable.getValues(function (error) {\n        if (error === 0) {\n          _this.$message.success('验证通过');\n        } else {\n          _this.$message.error('验证未通过');\n        }\n      });\n    },\n\n    /** 获取值，忽略表单验证 */\n    handleTableGet: function handleTableGet() {\n      this.$refs.editableTable.getValues(function (error, values) {\n        console.log('values:', values);\n      }, false);\n      console.log('deleteIds:', this.$refs.editableTable.getDeleteIds());\n      this.$message.info('获取值成功，请看控制台输出');\n    },\n\n    /** 模拟加载1000条数据 */\n    handleTableSet: function handleTableSet() {\n      this.randomData(1000, true);\n    },\n    handleSelectRowChange: function handleSelectRowChange(selectedRowIds) {\n      this.selectedRowIds = selectedRowIds;\n    },\n\n    /* 随机生成数据 */\n    randomData: function randomData(size) {\n      var _this2 = this;\n\n      var loading = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (loading) {\n        this.loading = true;\n      }\n\n      var randomDatetime = function randomDatetime() {\n        var time = parseInt(randomNumber(1000, 9999999999999));\n        return moment(new Date(time)).format('YYYY-MM-DD HH:mm:ss');\n      };\n\n      var begin = Date.now();\n      var values = [];\n\n      for (var i = 0; i < size; i++) {\n        values.push({\n          id: randomUUID(),\n          dbFieldName: \"name_\".concat(i + 1),\n          // dbFieldTxt: randomString(10),\n          multipleSelect: ['string', ['int', 'double', 'boolean'][randomNumber(0, 2)]],\n          dbFieldType: ['string', 'int', 'double', 'boolean'][randomNumber(0, 3)],\n          dbLength: randomNumber(0, 233),\n          datetime: randomDatetime(),\n          isNull: ['Y', 'N'][randomNumber(0, 1)]\n        });\n      }\n\n      this.dataSource = values;\n      var end = Date.now();\n      var diff = end - begin;\n\n      if (loading && diff < size) {\n        setTimeout(function () {\n          _this2.loading = false;\n        }, size - diff);\n      }\n    },\n    handleDelete: function handleDelete(props) {\n      var rowId = props.rowId,\n          target = props.target;\n      target.removeRows(rowId);\n    }\n  }\n};",{"version":3,"sources":["DefaultTable.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\n  <div>\n    <a-button @click=\"handleTableCheck\" type=\"primary\">表单验证</a-button>\n    <span style=\"padding-left:8px;\"></span>\n    <a-tooltip placement=\"top\" title=\"获取值，忽略表单验证\" :autoAdjustOverflow=\"true\">\n      <a-button @click=\"handleTableGet\" type=\"primary\">获取值</a-button>\n    </a-tooltip>\n    <span style=\"padding-left:8px;\"></span>\n    <a-tooltip placement=\"top\" title=\"模拟加载1000条数据\" :autoAdjustOverflow=\"true\">\n      <a-button @click=\"handleTableSet\" type=\"primary\">设置值</a-button>\n    </a-tooltip>\n\n\n    <j-editable-table\n      ref=\"editableTable\"\n      :loading=\"loading\"\n      :columns=\"columns\"\n      :dataSource=\"dataSource\"\n      :rowNumber=\"true\"\n      :rowSelection=\"true\"\n      :actionButton=\"true\"\n      :dragSort=\"true\"\n      style=\"margin-top: 8px;\"\n      @selectRowChange=\"handleSelectRowChange\">\n\n      <template v-slot:action=\"props\">\n        <a @click=\"handleDelete(props)\">{{ props.text }}</a>\n      </template>\n\n    </j-editable-table>\n  </div>\n\n</template>\n\n<script>\n  import moment from 'moment'\n  import { FormTypes } from '@/utils/JEditableTableUtil'\n  import { randomUUID, randomNumber } from '@/utils/util'\n  import JEditableTable from '@/components/jeecg/JEditableTable'\n\n  export default {\n    name: 'DefaultTable',\n    components: { JEditableTable },\n    data() {\n      return {\n        loading: false,\n        columns: [\n          {\n            title: '字段名称',\n            key: 'dbFieldName',\n            // width: '19%',\n            width: '300px',\n            type: FormTypes.input,\n            defaultValue: '',\n            placeholder: '请输入${title}',\n            validateRules: [\n              {\n                required: true, // 必填\n                message: '请输入${title}' // 显示的文本\n              },\n              {\n                pattern: /^[a-z|A-Z][a-z|A-Z\\d_-]{0,}$/, // 正则\n                message: '${title}必须以字母开头，可包含数字、下划线、横杠'\n              }\n            ]\n          },\n          {\n            title: '文件域',\n            key: 'upload',\n            type: FormTypes.upload,\n            // width: '19%',\n            width: '300px',\n            placeholder: '点击上传',\n            token: true,\n            responseName: 'message',\n            action: window._CONFIG['domianURL'] + '/sys/common/upload'\n          },\n          {\n            title: '字段类型',\n            key: 'dbFieldType',\n            // width: '18%',\n            width: '300px',\n            type: FormTypes.select,\n            options: [ // 下拉选项\n              { title: 'String', value: 'string' },\n              { title: 'Integer', value: 'int' },\n              { title: 'Double', value: 'double' },\n              { title: 'Boolean', value: 'boolean' }\n            ],\n            allowInput: true,\n            defaultValue: '',\n            placeholder: '请选择${title}',\n            validateRules: [{ required: true, message: '请选择${title}' }]\n          },\n          {\n            title: '性别（字典）',\n            key: 'sex_dict',\n            width: '300px',\n            type: FormTypes.select,\n            options: [],\n            dictCode: 'sex',\n            placeholder: '请选择${title}',\n            validateRules: [{ required: true, message: '请选择${title}' }]\n          },\n          {\n            title: '多选测试',\n            key: 'multipleSelect',\n            // width: '18%',\n            width: '300px',\n            type: FormTypes.select,\n            props: { 'mode': 'multiple' }, // 支持多选\n            options: [\n              { title: 'String', value: 'string' },\n              { title: 'Integer', value: 'int' },\n              { title: 'Double', value: 'double' },\n              { title: 'Boolean', value: 'boolean' }\n            ],\n            defaultValue: ['int', 'boolean'], // 多个默认项\n            // defaultValue: 'string,double,int', // 也可使用这种方式\n            placeholder: '这里可以多选',\n            validateRules: [{ required: true, message: '请选择${title}' }]\n          },\n          {\n            title: '字段长度',\n            key: 'dbLength',\n            // width: '8%',\n            width: '100px',\n            type: FormTypes.inputNumber,\n            defaultValue: 32,\n            placeholder: '${title}',\n            validateRules: [{ required: true, message: '请输入${title}' }]\n          },\n          {\n            title: '日期',\n            key: 'datetime',\n            // width: '22%',\n            width: '320px',\n            type: FormTypes.datetime,\n            defaultValue: '2019-4-30 14:52:22',\n            placeholder: '请选择${title}',\n            validateRules: [{ required: true, message: '请选择${title}' }]\n          },\n          {\n            title: '可以为空',\n            key: 'isNull',\n            // width: '8%',\n            width: '100px',\n            type: FormTypes.checkbox,\n            customValue: ['Y', 'N'], // true ,false\n            defaultChecked: false\n          },\n          {\n            title: '操作',\n            key: 'action',\n            // width: '8%',\n            width: '100px',\n            type: FormTypes.slot,\n            slotName: 'action',\n            defaultValue: '删除'\n          }\n\n        ],\n        dataSource: [],\n        selectedRowIds: []\n      }\n    },\n    mounted() {\n      this.randomData(23, false)\n    },\n    methods: {\n\n      /** 表单验证 */\n      handleTableCheck() {\n        this.$refs.editableTable.getValues((error) => {\n          if (error === 0) {\n            this.$message.success('验证通过')\n          } else {\n            this.$message.error('验证未通过')\n          }\n        })\n      },\n      /** 获取值，忽略表单验证 */\n      handleTableGet() {\n        this.$refs.editableTable.getValues((error, values) => {\n          console.log('values:', values)\n        }, false)\n        console.log('deleteIds:', this.$refs.editableTable.getDeleteIds())\n\n        this.$message.info('获取值成功，请看控制台输出')\n\n      },\n      /** 模拟加载1000条数据 */\n      handleTableSet() {\n        this.randomData(1000, true)\n      },\n\n      handleSelectRowChange(selectedRowIds) {\n        this.selectedRowIds = selectedRowIds\n      },\n\n      /* 随机生成数据 */\n      randomData(size, loading = false) {\n        if (loading) {\n          this.loading = true\n        }\n\n        let randomDatetime = () => {\n          let time = parseInt(randomNumber(1000, 9999999999999))\n          return moment(new Date(time)).format('YYYY-MM-DD HH:mm:ss')\n        }\n\n        let begin = Date.now()\n        let values = []\n        for (let i = 0; i < size; i++) {\n          values.push({\n            id: randomUUID(),\n            dbFieldName: `name_${i + 1}`,\n            // dbFieldTxt: randomString(10),\n            multipleSelect: ['string', ['int', 'double', 'boolean'][randomNumber(0, 2)]],\n            dbFieldType: ['string', 'int', 'double', 'boolean'][randomNumber(0, 3)],\n            dbLength: randomNumber(0, 233),\n            datetime: randomDatetime(),\n            isNull: ['Y', 'N'][randomNumber(0, 1)]\n          })\n        }\n\n        this.dataSource = values\n        let end = Date.now()\n        let diff = end - begin\n\n        if (loading && diff < size) {\n          setTimeout(() => {\n            this.loading = false\n          }, size - diff)\n        }\n\n      },\n\n      handleDelete(props) {\n        let { rowId, target } = props\n        target.removeRows(rowId)\n      }\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/views/jeecg/modules/JEditableTable"}]}