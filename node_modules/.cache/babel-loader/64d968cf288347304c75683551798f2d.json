{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/modules/monitor/TomcatInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/modules/monitor/TomcatInfo.vue","mtime":1571018558929},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":1565525386522},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js","mtime":1565533683804},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":1571018827562}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from 'moment';\nimport { getAction } from '@/api/manage';\nmoment.locale('zh-cn');\nexport default {\n  data: function data() {\n    return {\n      time: '',\n      loading: true,\n      tableLoading: true,\n      columns: [{\n        title: '参数',\n        width: '30%',\n        dataIndex: 'param',\n        scopedSlots: {\n          customRender: 'param'\n        }\n      }, {\n        title: '描述',\n        width: '40%',\n        dataIndex: 'text',\n        scopedSlots: {\n          customRender: 'text'\n        }\n      }, {\n        title: '当前值',\n        width: '30%',\n        dataIndex: 'value',\n        scopedSlots: {\n          customRender: 'value'\n        }\n      }],\n      dataSource: [],\n      // 列表通过 textInfo 渲染出颜色、描述和单位\n      textInfo: {\n        'tomcat.sessions.created': {\n          color: 'green',\n          text: 'tomcat 已创建 session 数',\n          unit: '个'\n        },\n        'tomcat.sessions.expired': {\n          color: 'green',\n          text: 'tomcat 已过期 session 数',\n          unit: '个'\n        },\n        'tomcat.sessions.active.current': {\n          color: 'green',\n          text: 'tomcat 当前活跃 session 数',\n          unit: '个'\n        },\n        'tomcat.sessions.active.max': {\n          color: 'green',\n          text: 'tomcat 活跃 session 数峰值',\n          unit: '个'\n        },\n        'tomcat.sessions.rejected': {\n          color: 'green',\n          text: '超过session 最大配置后，拒绝的 session 个数',\n          unit: '个'\n        },\n        'tomcat.global.sent': {\n          color: 'purple',\n          text: '发送的字节数',\n          unit: 'bytes'\n        },\n        'tomcat.global.request.max': {\n          color: 'purple',\n          text: 'request 请求最长耗时',\n          unit: '秒'\n        },\n        'tomcat.global.request.count': {\n          color: 'purple',\n          text: '全局 request 请求次数',\n          unit: '次'\n        },\n        'tomcat.global.request.totalTime': {\n          color: 'purple',\n          text: '全局 request 请求总耗时',\n          unit: '秒'\n        },\n        'tomcat.servlet.request.max': {\n          color: 'cyan',\n          text: 'servlet 请求最长耗时',\n          unit: '秒'\n        },\n        'tomcat.servlet.request.count': {\n          color: 'cyan',\n          text: 'servlet 总请求次数',\n          unit: '次'\n        },\n        'tomcat.servlet.request.totalTime': {\n          color: 'cyan',\n          text: 'servlet 请求总耗时',\n          unit: '秒'\n        },\n        'tomcat.threads.current': {\n          color: 'pink',\n          text: 'tomcat 当前线程数（包括守护线程）',\n          unit: '个'\n        },\n        'tomcat.threads.config.max': {\n          color: 'pink',\n          text: 'tomcat 配置的线程最大数',\n          unit: '个'\n        }\n      },\n      // 当一条记录中需要取出多条数据的时候需要配置该字段\n      moreInfo: {\n        'tomcat.global.request': ['.count', '.totalTime'],\n        'tomcat.servlet.request': ['.count', '.totalTime']\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.loadTomcatInfo();\n  },\n  methods: {\n    handleClickUpdate: function handleClickUpdate() {\n      this.loadTomcatInfo();\n    },\n    loadTomcatInfo: function loadTomcatInfo() {\n      var _this = this;\n\n      this.tableLoading = true;\n      this.time = moment().format('YYYY年MM月DD日 HH时mm分ss秒');\n      Promise.all([getAction('actuator/metrics/tomcat.sessions.created'), getAction('actuator/metrics/tomcat.sessions.expired'), getAction('actuator/metrics/tomcat.sessions.active.current'), getAction('actuator/metrics/tomcat.sessions.active.max'), getAction('actuator/metrics/tomcat.sessions.rejected'), getAction('actuator/metrics/tomcat.global.sent'), getAction('actuator/metrics/tomcat.global.request.max'), getAction('actuator/metrics/tomcat.global.request'), // 2.1.3.RELEASE 无此API\n      //getAction('actuator/metrics/tomcat.servlet.request'),\n      // getAction('actuator/metrics/tomcat.servlet.request.max'),\n      getAction('actuator/metrics/tomcat.threads.current'), getAction('actuator/metrics/tomcat.threads.config.max')]).then(function (res) {\n        var tomcatInfo = [];\n        res.forEach(function (value, id) {\n          var more = _this.moreInfo[value.name];\n\n          if (!(more instanceof Array)) {\n            more = [''];\n          }\n\n          more.forEach(function (item, idx) {\n            var param = value.name + item;\n            tomcatInfo.push({\n              id: param + id,\n              param: param,\n              text: 'false value',\n              value: value.measurements[idx].value\n            });\n          });\n        });\n        _this.dataSource = tomcatInfo;\n      }).catch(function (e) {\n        console.error(e);\n\n        _this.$message.error('获取Tomcat信息失败');\n      }).finally(function () {\n        _this.loading = false;\n        _this.tableLoading = false;\n      });\n    }\n  }\n};",null]}