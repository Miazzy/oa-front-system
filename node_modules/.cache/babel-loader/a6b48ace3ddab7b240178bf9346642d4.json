{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/modules/monitor/RedisInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/modules/monitor/RedisInfo.vue","mtime":1571018558928},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js","mtime":1565533683804},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":1571018827562}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.parse-int\";\nimport _slicedToArray from \"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from 'moment';\nimport { getAction } from '@/api/manage';\nimport AreaChartTy from '@/components/chart/AreaChartTy';\nexport default {\n  name: 'RedisInfo',\n  components: {\n    AreaChartTy: AreaChartTy\n  },\n  data: function data() {\n    return {\n      loading: true,\n      tableLoading: true,\n      // 定时器ID\n      timer: null,\n      // 定时器周期\n      millisec: 3000,\n      // Key 实时数量\n      key: {\n        title: 'Radis Key 实时数量（个）',\n        dataSource: [],\n        y: '数量（个）',\n        height: 340,\n        min: 0,\n        max: 100,\n        color: '#FF6987',\n        lineSize: 8,\n        lineColor: '#DC143C'\n      },\n      // 内存实时占用情况\n      memory: {\n        title: 'Radis 内存实时占用情况（KB）',\n        dataSource: [],\n        y: '内存（KB）',\n        min: 0,\n        max: 3000,\n        height: 340,\n        lineSize: 8\n      },\n      redisInfo: [],\n      columns: [{\n        title: 'Key',\n        align: 'center',\n        dataIndex: 'key'\n      }, {\n        title: 'Description',\n        align: 'left',\n        dataIndex: 'description'\n      }, {\n        title: 'Value',\n        align: 'center',\n        dataIndex: 'value'\n      }],\n      url: {\n        keysSize: '/actuator/redis/keysSize',\n        memoryInfo: '/actuator/redis/memoryInfo',\n        info: '/actuator/redis/info'\n      },\n      path: '/monitor/redis/info'\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.openTimer();\n    this.loadRedisInfo();\n    setTimeout(function () {\n      _this.loadData();\n    }, 1000);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.closeTimer();\n  },\n  methods: {\n    /** 开启定时器 */\n    openTimer: function openTimer() {\n      var _this2 = this;\n\n      this.loadData();\n      this.closeTimer();\n      this.timer = setInterval(function () {\n        if (_this2.$route.path === _this2.path) {\n          _this2.loadData();\n        }\n      }, this.millisec);\n    },\n\n    /** 关闭定时器 */\n    closeTimer: function closeTimer() {\n      if (this.timer) clearInterval(this.timer);\n    },\n\n    /** 查询数据 */\n    loadData: function loadData() {\n      var _this3 = this;\n\n      Promise.all([getAction(this.url.keysSize), getAction(this.url.memoryInfo)]).then(function (res) {\n        var time = moment().format('hh:mm:ss');\n\n        var _res = _slicedToArray(res, 2),\n            currentSize = _res[0].dbSize,\n            memoryInfo = _res[1];\n\n        var currentMemory = memoryInfo.used_memory / 1000; // push 数据\n\n        _this3.key.dataSource.push({\n          x: time,\n          y: currentSize\n        });\n\n        _this3.memory.dataSource.push({\n          x: time,\n          y: currentMemory\n        }); // 最大长度为6\n\n\n        if (_this3.key.dataSource.length > 6) {\n          _this3.key.dataSource.splice(0, 1);\n\n          _this3.memory.dataSource.splice(0, 1);\n        } // 计算 Key 最大最小值\n\n\n        var keyPole = _this3.getMaxAndMin(_this3.key.dataSource, 'y');\n\n        _this3.key.max = Math.floor(keyPole[0]) + 10;\n        _this3.key.min = Math.floor(keyPole[1]) - 10;\n        if (_this3.key.min < 0) _this3.key.min = 0; // 计算 Memory 最大最小值\n\n        var memoryPole = _this3.getMaxAndMin(_this3.memory.dataSource, 'y');\n\n        _this3.memory.max = Math.floor(memoryPole[0]) + 100;\n        _this3.memory.min = Math.floor(memoryPole[1]) - 100;\n        if (_this3.memory.min < 0) _this3.memory.min = 0;\n      }).catch(function (e) {\n        console.error(e);\n\n        _this3.closeTimer();\n\n        _this3.$message.error('获取 Redis 信息失败');\n      }).finally(function () {\n        _this3.loading = false;\n      });\n    },\n    // 获取一组数据中最大和最小的值\n    getMaxAndMin: function getMaxAndMin(dataSource, field) {\n      var maxValue = null,\n          minValue = null;\n      dataSource.forEach(function (item) {\n        var value = Number.parseInt(item[field]); // max\n\n        if (maxValue == null) {\n          maxValue = value;\n        } else if (value > maxValue) {\n          maxValue = value;\n        } // min\n\n\n        if (minValue == null) {\n          minValue = value;\n        } else if (value < minValue) {\n          minValue = value;\n        }\n      });\n      return [maxValue, minValue];\n    },\n    loadRedisInfo: function loadRedisInfo() {\n      var _this4 = this;\n\n      this.tableLoading = true;\n      getAction(this.url.info).then(function (res) {\n        _this4.redisInfo = res.result;\n      }).finally(function () {\n        _this4.tableLoading = false;\n      });\n    }\n  }\n};",{"version":3,"sources":["RedisInfo.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <a-skeleton active :loading=\"loading\" :paragraph=\"{rows: 17}\">\n    <a-card>\n      <!-- Radis 信息实时监控 -->\n      <a-row :gutter=\"8\">\n        <a-col :sm=\"24\" :xl=\"12\">\n          <area-chart-ty v-bind=\"memory\"/>\n        </a-col>\n        <a-col :sm=\"24\" :xl=\"12\">\n          <area-chart-ty v-bind=\"key\"/>\n        </a-col>\n      </a-row>\n\n      <h3>Redis 详细信息</h3>\n      <a-table\n        :loading=\"tableLoading\"\n        :columns=\"columns\"\n        :dataSource=\"redisInfo\"\n        :pagination=\"false\"/>\n\n    </a-card>\n  </a-skeleton>\n</template>\n<script>\n  import moment from 'moment'\n  import { getAction } from '@/api/manage'\n  import AreaChartTy from '@/components/chart/AreaChartTy'\n\n  export default {\n    name: 'RedisInfo',\n    components: {\n      AreaChartTy\n    },\n    data() {\n      return {\n        loading: true,\n        tableLoading: true,\n        // 定时器ID\n        timer: null,\n        // 定时器周期\n        millisec: 3000,\n        // Key 实时数量\n        key: {\n          title: 'Radis Key 实时数量（个）',\n          dataSource: [],\n          y: '数量（个）',\n          height: 340,\n          min: 0,\n          max: 100,\n          color: '#FF6987',\n          lineSize: 8,\n          lineColor: '#DC143C'\n        },\n        // 内存实时占用情况\n        memory: {\n          title: 'Radis 内存实时占用情况（KB）',\n          dataSource: [],\n          y: '内存（KB）',\n          min: 0,\n          max: 3000,\n          height: 340,\n          lineSize: 8\n        },\n        redisInfo: [],\n        columns: [{\n          title: 'Key',\n          align: 'center',\n          dataIndex: 'key'\n        }, {\n          title: 'Description',\n          align: 'left',\n          dataIndex: 'description'\n        }, {\n          title: 'Value',\n          align: 'center',\n          dataIndex: 'value'\n        }],\n        url: {\n          keysSize: '/actuator/redis/keysSize',\n          memoryInfo: '/actuator/redis/memoryInfo',\n          info: '/actuator/redis/info'\n        },\n        path: '/monitor/redis/info'\n      }\n    },\n    mounted() {\n      this.openTimer()\n      this.loadRedisInfo()\n      setTimeout(() => {\n        this.loadData()\n      }, 1000)\n    },\n    beforeDestroy() {\n      this.closeTimer()\n    },\n    methods: {\n\n      /** 开启定时器 */\n      openTimer() {\n        this.loadData()\n        this.closeTimer()\n        this.timer = setInterval(() => {\n          if (this.$route.path === this.path) {\n            this.loadData()\n          }\n        }, this.millisec)\n      },\n\n      /** 关闭定时器 */\n      closeTimer() {\n        if (this.timer) clearInterval(this.timer)\n      },\n\n      /** 查询数据 */\n      loadData() {\n        Promise.all([\n          getAction(this.url.keysSize),\n          getAction(this.url.memoryInfo)\n        ]).then((res) => {\n          let time = moment().format('hh:mm:ss')\n\n          let [{ dbSize: currentSize }, memoryInfo] = res\n          let currentMemory = memoryInfo.used_memory / 1000\n\n          // push 数据\n          this.key.dataSource.push({ x: time, y: currentSize })\n          this.memory.dataSource.push({ x: time, y: currentMemory })\n          // 最大长度为6\n          if (this.key.dataSource.length > 6) {\n            this.key.dataSource.splice(0, 1)\n            this.memory.dataSource.splice(0, 1)\n          }\n\n          // 计算 Key 最大最小值\n          let keyPole = this.getMaxAndMin(this.key.dataSource, 'y')\n          this.key.max = Math.floor(keyPole[0]) + 10\n          this.key.min = Math.floor(keyPole[1]) - 10\n          if (this.key.min < 0) this.key.min = 0\n\n          // 计算 Memory 最大最小值\n          let memoryPole = this.getMaxAndMin(this.memory.dataSource, 'y')\n          this.memory.max = Math.floor(memoryPole[0]) + 100\n          this.memory.min = Math.floor(memoryPole[1]) - 100\n          if (this.memory.min < 0) this.memory.min = 0\n\n        }).catch((e) => {\n          console.error(e)\n          this.closeTimer()\n          this.$message.error('获取 Redis 信息失败')\n        }).finally(() => {\n          this.loading = false\n        })\n\n      },\n\n      // 获取一组数据中最大和最小的值\n      getMaxAndMin(dataSource, field) {\n        let maxValue = null, minValue = null\n        dataSource.forEach(item => {\n          let value = Number.parseInt(item[field])\n          // max\n          if (maxValue == null) {\n            maxValue = value\n          } else if (value > maxValue) {\n            maxValue = value\n          }\n          // min\n          if (minValue == null) {\n            minValue = value\n          } else if (value < minValue) {\n            minValue = value\n          }\n        })\n        return [maxValue, minValue]\n      },\n\n      loadRedisInfo() {\n        this.tableLoading = true\n        getAction(this.url.info).then((res) => {\n          this.redisInfo = res.result\n        }).finally(() => {\n          this.tableLoading = false\n        })\n      }\n\n    }\n  }\n</script>\n<style></style>\n"],"sourceRoot":"src/views/modules/monitor"}]}