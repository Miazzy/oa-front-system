{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/modules/monitor/TomcatInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/views/modules/monitor/TomcatInfo.vue","mtime":1571018558929},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from 'moment';\nimport { getAction } from '@/api/manage';\nmoment.locale('zh-cn');\nexport default {\n  data: function data() {\n    return {\n      time: '',\n      loading: true,\n      tableLoading: true,\n      columns: [{\n        title: '参数',\n        width: '30%',\n        dataIndex: 'param',\n        scopedSlots: {\n          customRender: 'param'\n        }\n      }, {\n        title: '描述',\n        width: '40%',\n        dataIndex: 'text',\n        scopedSlots: {\n          customRender: 'text'\n        }\n      }, {\n        title: '当前值',\n        width: '30%',\n        dataIndex: 'value',\n        scopedSlots: {\n          customRender: 'value'\n        }\n      }],\n      dataSource: [],\n      // 列表通过 textInfo 渲染出颜色、描述和单位\n      textInfo: {\n        'tomcat.sessions.created': {\n          color: 'green',\n          text: 'tomcat 已创建 session 数',\n          unit: '个'\n        },\n        'tomcat.sessions.expired': {\n          color: 'green',\n          text: 'tomcat 已过期 session 数',\n          unit: '个'\n        },\n        'tomcat.sessions.active.current': {\n          color: 'green',\n          text: 'tomcat 当前活跃 session 数',\n          unit: '个'\n        },\n        'tomcat.sessions.active.max': {\n          color: 'green',\n          text: 'tomcat 活跃 session 数峰值',\n          unit: '个'\n        },\n        'tomcat.sessions.rejected': {\n          color: 'green',\n          text: '超过session 最大配置后，拒绝的 session 个数',\n          unit: '个'\n        },\n        'tomcat.global.sent': {\n          color: 'purple',\n          text: '发送的字节数',\n          unit: 'bytes'\n        },\n        'tomcat.global.request.max': {\n          color: 'purple',\n          text: 'request 请求最长耗时',\n          unit: '秒'\n        },\n        'tomcat.global.request.count': {\n          color: 'purple',\n          text: '全局 request 请求次数',\n          unit: '次'\n        },\n        'tomcat.global.request.totalTime': {\n          color: 'purple',\n          text: '全局 request 请求总耗时',\n          unit: '秒'\n        },\n        'tomcat.servlet.request.max': {\n          color: 'cyan',\n          text: 'servlet 请求最长耗时',\n          unit: '秒'\n        },\n        'tomcat.servlet.request.count': {\n          color: 'cyan',\n          text: 'servlet 总请求次数',\n          unit: '次'\n        },\n        'tomcat.servlet.request.totalTime': {\n          color: 'cyan',\n          text: 'servlet 请求总耗时',\n          unit: '秒'\n        },\n        'tomcat.threads.current': {\n          color: 'pink',\n          text: 'tomcat 当前线程数（包括守护线程）',\n          unit: '个'\n        },\n        'tomcat.threads.config.max': {\n          color: 'pink',\n          text: 'tomcat 配置的线程最大数',\n          unit: '个'\n        }\n      },\n      // 当一条记录中需要取出多条数据的时候需要配置该字段\n      moreInfo: {\n        'tomcat.global.request': ['.count', '.totalTime'],\n        'tomcat.servlet.request': ['.count', '.totalTime']\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.loadTomcatInfo();\n  },\n  methods: {\n    handleClickUpdate: function handleClickUpdate() {\n      this.loadTomcatInfo();\n    },\n    loadTomcatInfo: function loadTomcatInfo() {\n      var _this = this;\n\n      this.tableLoading = true;\n      this.time = moment().format('YYYY年MM月DD日 HH时mm分ss秒');\n      Promise.all([getAction('actuator/metrics/tomcat.sessions.created'), getAction('actuator/metrics/tomcat.sessions.expired'), getAction('actuator/metrics/tomcat.sessions.active.current'), getAction('actuator/metrics/tomcat.sessions.active.max'), getAction('actuator/metrics/tomcat.sessions.rejected'), getAction('actuator/metrics/tomcat.global.sent'), getAction('actuator/metrics/tomcat.global.request.max'), getAction('actuator/metrics/tomcat.global.request'), // 2.1.3.RELEASE 无此API\n      //getAction('actuator/metrics/tomcat.servlet.request'),\n      // getAction('actuator/metrics/tomcat.servlet.request.max'),\n      getAction('actuator/metrics/tomcat.threads.current'), getAction('actuator/metrics/tomcat.threads.config.max')]).then(function (res) {\n        var tomcatInfo = [];\n        res.forEach(function (value, id) {\n          var more = _this.moreInfo[value.name];\n\n          if (!(more instanceof Array)) {\n            more = [''];\n          }\n\n          more.forEach(function (item, idx) {\n            var param = value.name + item;\n            tomcatInfo.push({\n              id: param + id,\n              param: param,\n              text: 'false value',\n              value: value.measurements[idx].value\n            });\n          });\n        });\n        _this.dataSource = tomcatInfo;\n      }).catch(function (e) {\n        console.error(e);\n\n        _this.$message.error('获取Tomcat信息失败');\n      }).finally(function () {\n        _this.loading = false;\n        _this.tableLoading = false;\n      });\n    }\n  }\n};",{"version":3,"sources":["TomcatInfo.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <a-skeleton active :loading=\"loading\" :paragraph=\"{rows: 17}\">\n    <a-card :bordered=\"false\">\n\n      <a-alert type=\"info\" :showIcon=\"true\">\n        <div slot=\"message\">\n          上次更新时间：{{ this.time }}\n          <a-divider type=\"vertical\"/>\n          <a @click=\"handleClickUpdate\">立即更新</a>\n        </div>\n      </a-alert>\n\n      <a-table\n        rowKey=\"id\"\n        size=\"middle\"\n        :columns=\"columns\"\n        :dataSource=\"dataSource\"\n        :pagination=\"false\"\n        :loading=\"tableLoading\"\n        style=\"margin-top: 20px;\">\n\n        <template slot=\"param\" slot-scope=\"text, record\">\n          <a-tag :color=\"textInfo[record.param].color\">{{ text }}</a-tag>\n        </template>\n\n        <template slot=\"text\" slot-scope=\"text, record\">\n          {{ textInfo[record.param].text }}\n        </template>\n\n        <template slot=\"value\" slot-scope=\"text, record\">\n          {{ text }} {{ textInfo[record.param].unit }}\n        </template>\n\n      </a-table>\n\n    </a-card>\n  </a-skeleton>\n</template>\n<script>\n  import moment from 'moment'\n  import { getAction } from '@/api/manage'\n\n  moment.locale('zh-cn')\n\n  export default {\n    data() {\n      return {\n        time: '',\n        loading: true,\n        tableLoading: true,\n        columns: [{\n          title: '参数',\n          width: '30%',\n          dataIndex: 'param',\n          scopedSlots: { customRender: 'param' }\n        }, {\n          title: '描述',\n          width: '40%',\n          dataIndex: 'text',\n          scopedSlots: { customRender: 'text' }\n        }, {\n          title: '当前值',\n          width: '30%',\n          dataIndex: 'value',\n          scopedSlots: { customRender: 'value' }\n        }],\n        dataSource: [],\n        // 列表通过 textInfo 渲染出颜色、描述和单位\n        textInfo: {\n          'tomcat.sessions.created': { color: 'green', text: 'tomcat 已创建 session 数', unit: '个' },\n          'tomcat.sessions.expired': { color: 'green', text: 'tomcat 已过期 session 数', unit: '个' },\n          'tomcat.sessions.active.current': { color: 'green', text: 'tomcat 当前活跃 session 数', unit: '个' },\n          'tomcat.sessions.active.max': { color: 'green', text: 'tomcat 活跃 session 数峰值', unit: '个' },\n          'tomcat.sessions.rejected': { color: 'green', text: '超过session 最大配置后，拒绝的 session 个数', unit: '个' },\n\n          'tomcat.global.sent': { color: 'purple', text: '发送的字节数', unit: 'bytes' },\n          'tomcat.global.request.max': { color: 'purple', text: 'request 请求最长耗时', unit: '秒' },\n          'tomcat.global.request.count': { color: 'purple', text: '全局 request 请求次数', unit: '次' },\n          'tomcat.global.request.totalTime': { color: 'purple', text: '全局 request 请求总耗时', unit: '秒' },\n\n          'tomcat.servlet.request.max': { color: 'cyan', text: 'servlet 请求最长耗时', unit: '秒' },\n          'tomcat.servlet.request.count': { color: 'cyan', text: 'servlet 总请求次数', unit: '次' },\n          'tomcat.servlet.request.totalTime': { color: 'cyan', text: 'servlet 请求总耗时', unit: '秒' },\n\n          'tomcat.threads.current': { color: 'pink', text: 'tomcat 当前线程数（包括守护线程）', unit: '个' },\n          'tomcat.threads.config.max': { color: 'pink', text: 'tomcat 配置的线程最大数', unit: '个' }\n        },\n        // 当一条记录中需要取出多条数据的时候需要配置该字段\n        moreInfo: {\n          'tomcat.global.request': ['.count', '.totalTime'],\n          'tomcat.servlet.request': ['.count', '.totalTime']\n        }\n      }\n    },\n    mounted() {\n      this.loadTomcatInfo()\n    },\n    methods: {\n\n      handleClickUpdate() {\n        this.loadTomcatInfo()\n      },\n\n      loadTomcatInfo() {\n        this.tableLoading = true\n        this.time = moment().format('YYYY年MM月DD日 HH时mm分ss秒')\n        Promise.all([\n          getAction('actuator/metrics/tomcat.sessions.created'),\n          getAction('actuator/metrics/tomcat.sessions.expired'),\n          getAction('actuator/metrics/tomcat.sessions.active.current'),\n          getAction('actuator/metrics/tomcat.sessions.active.max'),\n          getAction('actuator/metrics/tomcat.sessions.rejected'),\n          getAction('actuator/metrics/tomcat.global.sent'),\n          getAction('actuator/metrics/tomcat.global.request.max'),\n          getAction('actuator/metrics/tomcat.global.request'),\n          // 2.1.3.RELEASE 无此API\n          //getAction('actuator/metrics/tomcat.servlet.request'),\n          // getAction('actuator/metrics/tomcat.servlet.request.max'),\n          getAction('actuator/metrics/tomcat.threads.current'),\n          getAction('actuator/metrics/tomcat.threads.config.max')\n        ]).then((res) => {\n          let tomcatInfo = []\n          res.forEach((value, id) => {\n            let more = this.moreInfo[value.name]\n            if (!(more instanceof Array)) {\n              more = ['']\n            }\n            more.forEach((item, idx) => {\n              let param = value.name + item\n              tomcatInfo.push({\n                id: param + id, param,\n                text: 'false value',\n                value: value.measurements[idx].value\n              })\n            })\n          })\n          this.dataSource = tomcatInfo\n        }).catch((e) => {\n          console.error(e)\n          this.$message.error('获取Tomcat信息失败')\n        }).finally(() => {\n          this.loading = false\n          this.tableLoading = false\n        })\n      }\n    }\n  }\n</script>\n<style></style>\n"],"sourceRoot":"src/views/modules/monitor"}]}