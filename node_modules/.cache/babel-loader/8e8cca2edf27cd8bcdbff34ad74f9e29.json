{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/layouts/TabLayout.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/layouts/TabLayout.vue","mtime":1571018558902},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport GlobalLayout from '@/components/page/GlobalLayout';\nimport Contextmenu from '@/components/menu/Contextmenu';\nimport { mixin, mixinDevice } from '@/utils/mixin.js';\nvar indexKey = '/dashboard/analysis';\nexport default {\n  name: 'TabLayout',\n  components: {\n    GlobalLayout: GlobalLayout,\n    Contextmenu: Contextmenu\n  },\n  mixins: [mixin, mixinDevice],\n  data: function data() {\n    return {\n      pageList: [],\n      linkList: [],\n      activePage: '',\n      menuVisible: false,\n      menuItemList: [{\n        key: '1',\n        icon: 'arrow-left',\n        text: '关闭左侧'\n      }, {\n        key: '2',\n        icon: 'arrow-right',\n        text: '关闭右侧'\n      }, {\n        key: '3',\n        icon: 'close',\n        text: '关闭其它'\n      }]\n    };\n  },\n  computed: {\n    multipage: function multipage() {\n      //判断如果是手机模式，自动切换为单页面模式\n      if (this.isMobile()) {\n        return false;\n      } else {\n        return this.$store.state.app.multipage;\n      }\n    }\n  },\n  created: function created() {\n    if (this.$route.path != indexKey) {\n      this.pageList.push({\n        name: 'dashboard-analysis',\n        path: indexKey,\n        fullPath: indexKey,\n        meta: {\n          icon: 'dashboard',\n          title: '首页'\n        }\n      });\n      this.linkList.push(indexKey);\n    }\n\n    this.pageList.push(this.$route);\n    this.linkList.push(this.$route.fullPath);\n    this.activePage = this.$route.fullPath;\n  },\n  watch: {\n    '$route': function $route(newRoute) {\n      this.activePage = newRoute.fullPath;\n\n      if (!this.multipage) {\n        this.linkList = [newRoute.fullPath];\n        this.pageList = [Object.assign({}, newRoute)];\n      } else if (this.linkList.indexOf(newRoute.fullPath) < 0) {\n        this.linkList.push(newRoute.fullPath);\n        this.pageList.push(Object.assign({}, newRoute));\n      } else if (this.linkList.indexOf(newRoute.fullPath) >= 0) {\n        var oldIndex = this.linkList.indexOf(newRoute.fullPath);\n        var oldPositionRoute = this.pageList[oldIndex];\n        this.pageList.splice(oldIndex, 1, Object.assign({}, newRoute, {\n          meta: oldPositionRoute.meta\n        }));\n      }\n    },\n    'activePage': function activePage(key) {\n      var index = this.linkList.lastIndexOf(key);\n      var waitRouter = this.pageList[index];\n      this.$router.push(Object.assign({}, waitRouter));\n    },\n    'multipage': function multipage(newVal) {\n      if (!newVal) {\n        this.linkList = [this.$route.fullPath];\n        this.pageList = [this.$route];\n      }\n    }\n  },\n  methods: {\n    changePage: function changePage(key) {\n      this.activePage = key;\n    },\n    editPage: function editPage(key, action) {\n      this[action](key);\n    },\n    remove: function remove(key) {\n      if (key == indexKey) {\n        this.$message.warning('首页不能关闭!');\n        return;\n      }\n\n      if (this.pageList.length === 1) {\n        this.$message.warning('这是最后一页，不能再关闭了啦');\n        return;\n      }\n\n      this.pageList = this.pageList.filter(function (item) {\n        return item.fullPath !== key;\n      });\n      var index = this.linkList.indexOf(key);\n      this.linkList = this.linkList.filter(function (item) {\n        return item !== key;\n      });\n      index = index >= this.linkList.length ? this.linkList.length - 1 : index;\n      this.activePage = this.linkList[index];\n    },\n    onContextmenu: function onContextmenu(e) {\n      var pagekey = this.getPageKey(e.target);\n\n      if (pagekey !== null) {\n        e.preventDefault();\n        this.menuVisible = true;\n      }\n    },\n    getPageKey: function getPageKey(target, depth) {\n      depth = depth || 0;\n\n      if (depth > 2) {\n        return null;\n      }\n\n      var pageKey = target.getAttribute('pagekey');\n      pageKey = pageKey || (target.previousElementSibling ? target.previousElementSibling.getAttribute('pagekey') : null);\n      return pageKey || (target.firstElementChild ? this.getPageKey(target.firstElementChild, ++depth) : null);\n    },\n    onMenuSelect: function onMenuSelect(key, target) {\n      var pageKey = this.getPageKey(target);\n\n      switch (key) {\n        case '1':\n          this.closeLeft(pageKey);\n          break;\n\n        case '2':\n          this.closeRight(pageKey);\n          break;\n\n        case '3':\n          this.closeOthers(pageKey);\n          break;\n\n        default:\n          break;\n      }\n    },\n    closeOthers: function closeOthers(pageKey) {\n      var index = this.linkList.indexOf(pageKey);\n\n      if (pageKey == indexKey) {\n        this.linkList = this.linkList.slice(index, index + 1);\n        this.pageList = this.pageList.slice(index, index + 1);\n        this.activePage = this.linkList[0];\n      } else {\n        var indexContent = this.pageList.slice(0, 1)[0];\n        this.linkList = this.linkList.slice(index, index + 1);\n        this.pageList = this.pageList.slice(index, index + 1);\n        this.linkList.unshift(indexKey);\n        this.pageList.unshift(indexContent);\n        this.activePage = this.linkList[1];\n      }\n    },\n    closeLeft: function closeLeft(pageKey) {\n      if (pageKey == indexKey) {\n        return;\n      }\n\n      var tempList = _toConsumableArray(this.pageList);\n\n      var indexContent = tempList.slice(0, 1)[0];\n      var index = this.linkList.indexOf(pageKey);\n      this.linkList = this.linkList.slice(index);\n      this.pageList = this.pageList.slice(index);\n      this.linkList.unshift(indexKey);\n      this.pageList.unshift(indexContent);\n\n      if (this.linkList.indexOf(this.activePage) < 0) {\n        this.activePage = this.linkList[0];\n      }\n    },\n    closeRight: function closeRight(pageKey) {\n      var index = this.linkList.indexOf(pageKey);\n      this.linkList = this.linkList.slice(0, index + 1);\n      this.pageList = this.pageList.slice(0, index + 1);\n\n      if (this.linkList.indexOf(this.activePage < 0)) {\n        this.activePage = this.linkList[this.linkList.length - 1];\n      }\n    },\n    //update-begin-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n    dynamicRouterShow: function dynamicRouterShow(key, title) {\n      var keyIndex = this.linkList.indexOf(key);\n\n      if (keyIndex >= 0) {\n        var currRouter = this.pageList[keyIndex];\n        var meta = Object.assign({}, currRouter.meta, {\n          title: title\n        });\n        this.pageList.splice(keyIndex, 1, Object.assign({}, currRouter, {\n          meta: meta\n        }));\n      }\n    } //update-end-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n\n  }\n};",null]}