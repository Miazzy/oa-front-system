{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/jeecg/JCodeEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/jeecg/JCodeEditor.vue","mtime":1571018558896},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js","mtime":1565533683804},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":1571018827562}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// 引入全局实例\nimport _CodeMirror from 'codemirror'; // 核心样式\n\nimport 'codemirror/lib/codemirror.css'; // 引入主题后还需要在 options 中指定主题才会生效 darcula  gruvbox-dark hopscotch  monokai\n\nimport 'codemirror/theme/panda-syntax.css'; //提示css\n\nimport \"codemirror/addon/hint/show-hint.css\"; // 需要引入具体的语法高亮库才会有对应的语法高亮效果\n// codemirror 官方其实支持通过 /addon/mode/loadmode.js 和 /mode/meta.js 来实现动态加载对应语法高亮库\n// 但 vue 貌似没有无法在实例初始化后再动态加载对应 JS ，所以此处才把对应的 JS 提前引入\n\nimport 'codemirror/mode/javascript/javascript.js';\nimport 'codemirror/mode/css/css.js';\nimport 'codemirror/mode/xml/xml.js';\nimport 'codemirror/mode/clike/clike.js';\nimport 'codemirror/mode/markdown/markdown.js';\nimport 'codemirror/mode/python/python.js';\nimport 'codemirror/mode/r/r.js';\nimport 'codemirror/mode/shell/shell.js';\nimport 'codemirror/mode/sql/sql.js';\nimport 'codemirror/mode/swift/swift.js';\nimport 'codemirror/mode/vue/vue.js'; // 尝试获取全局实例\n\nvar CodeMirror = window.CodeMirror || _CodeMirror;\nexport default {\n  name: 'JCodeEditor',\n  props: {\n    // 外部传入的内容，用于实现双向绑定\n    value: {\n      type: String,\n      default: ''\n    },\n    // 外部传入的语法类型\n    language: {\n      type: String,\n      default: null\n    },\n    languageChange: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    placeholder: {\n      type: String,\n      default: null\n    },\n    // 显示行号\n    lineNumbers: {\n      type: Boolean,\n      default: true\n    },\n    // 是否显示全屏按钮\n    fullScreen: {\n      type: Boolean,\n      default: false\n    },\n    // 全屏以后的z-index\n    zIndex: {\n      type: [Number, String],\n      default: 999\n    }\n  },\n  data: function data() {\n    return {\n      // 内部真实的内容\n      code: '',\n      hasCode: false,\n      // 默认的语法类型\n      mode: 'javascript',\n      // 编辑器实例\n      coder: null,\n      // 默认配置\n      options: {\n        // 缩进格式\n        tabSize: 2,\n        // 主题，对应主题库 JS 需要提前引入\n        theme: 'panda-syntax',\n        line: true,\n        // extraKeys: {'Ctrl': 'autocomplete'},//自定义快捷键\n        hintOptions: {\n          tables: {\n            users: ['name', 'score', 'birthDate'],\n            countries: ['name', 'population', 'size']\n          }\n        }\n      },\n      // 支持切换的语法高亮类型，对应 JS 已经提前引入\n      // 使用的是 MIME-TYPE ，不过作为前缀的 text/ 在后面指定时写死了\n      modes: [{\n        value: 'css',\n        label: 'CSS'\n      }, {\n        value: 'javascript',\n        label: 'Javascript'\n      }, {\n        value: 'html',\n        label: 'XML/HTML'\n      }, {\n        value: 'x-java',\n        label: 'Java'\n      }, {\n        value: 'x-objectivec',\n        label: 'Objective-C'\n      }, {\n        value: 'x-python',\n        label: 'Python'\n      }, {\n        value: 'x-rsrc',\n        label: 'R'\n      }, {\n        value: 'x-sh',\n        label: 'Shell'\n      }, {\n        value: 'x-sql',\n        label: 'SQL'\n      }, {\n        value: 'x-swift',\n        label: 'Swift'\n      }, {\n        value: 'x-vue',\n        label: 'Vue'\n      }, {\n        value: 'markdown',\n        label: 'Markdown'\n      }],\n      // code 编辑器 是否全屏\n      fullCoder: false\n    };\n  },\n  watch: {\n    // value: {\n    //   immediate: false,\n    //   handler(value) {\n    //     this._getCoder().then(() => {\n    //       this.coder.setValue(value)\n    //     })\n    //   }\n    // },\n    language: {\n      immediate: true,\n      handler: function handler(language) {\n        var _this2 = this;\n\n        this._getCoder().then(function () {\n          // 尝试从父容器获取语法类型\n          if (language) {\n            // 获取具体的语法类型对象\n            var modeObj = _this2._getLanguage(language); // 判断父容器传入的语法是否被支持\n\n\n            if (modeObj) {\n              _this2.mode = modeObj.label;\n\n              _this2.coder.setOption('mode', \"text/\".concat(modeObj.value));\n            }\n          }\n        });\n      }\n    }\n  },\n  computed: {\n    placeholderShow: function placeholderShow() {\n      if (this.placeholder == null) {\n        return \"\\u8BF7\\u5728\\u6B64\\u8F93\\u5165\".concat(this.language, \"\\u4EE3\\u7801\");\n      } else {\n        return this.placeholder;\n      }\n    },\n    nullTipStyle: function nullTipStyle() {\n      if (this.lineNumbers) {\n        return {\n          left: '36px'\n        };\n      } else {\n        return {\n          left: '12px'\n        };\n      }\n    },\n    // coder 配置\n    coderOptions: function coderOptions() {\n      return {\n        tabSize: this.options.tabSize,\n        theme: this.options.theme,\n        lineNumbers: this.lineNumbers,\n        line: true,\n        hintOptions: this.options.hintOptions\n      };\n    },\n    fullScreenParentProps: function fullScreenParentProps() {\n      var props = {\n        class: ['full-screen-parent', this.fullCoder ? 'full-screen' : ''],\n        style: {}\n      };\n\n      if (this.fullCoder) {\n        props.style['z-index'] = this.zIndex;\n      }\n\n      return props;\n    }\n  },\n  mounted: function mounted() {\n    // 初始化\n    this._initialize();\n  },\n  methods: {\n    // 初始化\n    _initialize: function _initialize() {\n      var _this3 = this;\n\n      // 初始化编辑器实例，传入需要被实例化的文本域对象和默认配置\n      this.coder = CodeMirror.fromTextArea(this.$refs.textarea, this.coderOptions); // 编辑器赋值\n\n      this.coder.setValue(this.value || this.code);\n\n      if (this.value || this.code) {\n        this.hasCode = true;\n      } else {\n        this.hasCode = false;\n      } // 支持双向绑定\n\n\n      this.coder.on('change', function (coder) {\n        _this3.code = coder.getValue();\n\n        if (_this3.code) {\n          _this3.hasCode = true;\n        } else {\n          _this3.hasCode = false;\n        }\n\n        if (_this3.$emit) {\n          _this3.$emit('input', _this3.code);\n        }\n      });\n      this.coder.on('focus', function () {\n        _this3.hasCode = true;\n      });\n      this.coder.on('blur', function () {\n        if (_this3.code) {\n          _this3.hasCode = true;\n        } else {\n          _this3.hasCode = false;\n        }\n      });\n      /* this.coder.on('cursorActivity',()=>{\n         this.coder.showHint()\n       })*/\n    },\n    getCodeContent: function getCodeContent() {\n      return this.code;\n    },\n    setCodeContent: function setCodeContent(val) {\n      this.coder.setValue(val);\n    },\n    // 获取当前语法类型\n    _getLanguage: function _getLanguage(language) {\n      // 在支持的语法类型列表中寻找传入的语法类型\n      return this.modes.find(function (mode) {\n        // 所有的值都忽略大小写，方便比较\n        var currentLanguage = language.toLowerCase();\n        var currentLabel = mode.label.toLowerCase();\n        var currentValue = mode.value.toLowerCase(); // 由于真实值可能不规范，例如 java 的真实值是 x-java ，所以讲 value 和 label 同时和传入语法进行比较\n\n        return currentLabel === currentLanguage || currentValue === currentLanguage;\n      });\n    },\n    _getCoder: function _getCoder() {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        (function get() {\n          if (_this.coder) {\n            resolve(_this.coder);\n          } else {\n            setTimeout(get, 10);\n          }\n        })();\n      });\n    },\n    // 更改模式\n    changeMode: function changeMode(val) {\n      // 修改编辑器的语法配置\n      this.coder.setOption('mode', \"text/\".concat(val)); // 获取修改后的语法\n\n      var label = this._getLanguage(val).label.toLowerCase(); // 允许父容器通过以下函数监听当前的语法值\n\n\n      this.$emit('language-change', label);\n    },\n    nullTipClick: function nullTipClick() {\n      this.coder.focus();\n    }\n  }\n};",{"version":3,"sources":["JCodeEditor.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div v-bind=\"fullScreenParentProps\">\n    <a-icon v-if=\"fullScreen\" class=\"full-screen-icon\" type=\"fullscreen\" @click=\"()=>fullCoder=!fullCoder\"/>\n\n    <div class=\"code-editor-cust full-screen-child\">\n      <textarea ref=\"textarea\"></textarea>\n      <span @click=\"nullTipClick\" class=\"null-tip\" :class=\"{'null-tip-hidden':hasCode}\" :style=\"nullTipStyle\">{{ placeholderShow }}</span>\n      <template v-if=\"languageChange\">\n        <a-select v-model=\"mode\" size=\"small\" class=\"code-mode-select\" @change=\"changeMode\" placeholder=\"请选择主题\">\n          <a-select-option\n            v-for=\"mode in modes\"\n            :key=\"mode.value\"\n            :value=\"mode.value\">\n            {{ mode.label }}\n          </a-select-option>\n        </a-select>\n      </template>\n\n    </div>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  // 引入全局实例\n  import _CodeMirror from 'codemirror'\n\n  // 核心样式\n  import 'codemirror/lib/codemirror.css'\n  // 引入主题后还需要在 options 中指定主题才会生效 darcula  gruvbox-dark hopscotch  monokai\n  import 'codemirror/theme/panda-syntax.css'\n  //提示css\n  import \"codemirror/addon/hint/show-hint.css\";\n\n  // 需要引入具体的语法高亮库才会有对应的语法高亮效果\n  // codemirror 官方其实支持通过 /addon/mode/loadmode.js 和 /mode/meta.js 来实现动态加载对应语法高亮库\n  // 但 vue 貌似没有无法在实例初始化后再动态加载对应 JS ，所以此处才把对应的 JS 提前引入\n  import 'codemirror/mode/javascript/javascript.js'\n  import 'codemirror/mode/css/css.js'\n  import 'codemirror/mode/xml/xml.js'\n  import 'codemirror/mode/clike/clike.js'\n  import 'codemirror/mode/markdown/markdown.js'\n  import 'codemirror/mode/python/python.js'\n  import 'codemirror/mode/r/r.js'\n  import 'codemirror/mode/shell/shell.js'\n  import 'codemirror/mode/sql/sql.js'\n  import 'codemirror/mode/swift/swift.js'\n  import 'codemirror/mode/vue/vue.js'\n\n  // 尝试获取全局实例\n  const CodeMirror = window.CodeMirror || _CodeMirror\n\n  export default {\n    name: 'JCodeEditor',\n    props: {\n      // 外部传入的内容，用于实现双向绑定\n      value: {\n        type: String,\n        default: ''\n      },\n      // 外部传入的语法类型\n      language: {\n        type: String,\n        default: null\n      },\n     languageChange:{\n       type: Boolean,\n       default:false,\n       required:false\n     },\n      placeholder: {\n        type: String,\n        default: null\n      },\n      // 显示行号\n      lineNumbers: {\n        type: Boolean,\n        default: true\n      },\n      // 是否显示全屏按钮\n      fullScreen: {\n        type: Boolean,\n        default: false\n      },\n      // 全屏以后的z-index\n      zIndex: {\n        type: [Number, String],\n        default: 999\n      }\n    },\n    data () {\n      return {\n        // 内部真实的内容\n        code: '',\n        hasCode:false,\n        // 默认的语法类型\n        mode: 'javascript',\n        // 编辑器实例\n        coder: null,\n        // 默认配置\n        options: {\n          // 缩进格式\n          tabSize: 2,\n          // 主题，对应主题库 JS 需要提前引入\n          theme: 'panda-syntax',\n          line: true,\n         // extraKeys: {'Ctrl': 'autocomplete'},//自定义快捷键\n          hintOptions: {\n            tables: {\n              users: ['name', 'score', 'birthDate'],\n              countries: ['name', 'population', 'size']\n            }\n          },\n        },\n        // 支持切换的语法高亮类型，对应 JS 已经提前引入\n        // 使用的是 MIME-TYPE ，不过作为前缀的 text/ 在后面指定时写死了\n        modes: [{\n          value: 'css',\n          label: 'CSS'\n        }, {\n          value: 'javascript',\n          label: 'Javascript'\n        }, {\n          value: 'html',\n          label: 'XML/HTML'\n        }, {\n          value: 'x-java',\n          label: 'Java'\n        }, {\n          value: 'x-objectivec',\n          label: 'Objective-C'\n        }, {\n          value: 'x-python',\n          label: 'Python'\n        }, {\n          value: 'x-rsrc',\n          label: 'R'\n        }, {\n          value: 'x-sh',\n          label: 'Shell'\n        }, {\n          value: 'x-sql',\n          label: 'SQL'\n        }, {\n          value: 'x-swift',\n          label: 'Swift'\n        }, {\n          value: 'x-vue',\n          label: 'Vue'\n        }, {\n          value: 'markdown',\n          label: 'Markdown'\n        }],\n        // code 编辑器 是否全屏\n        fullCoder: false\n      }\n    },\n    watch: {\n      // value: {\n      //   immediate: false,\n      //   handler(value) {\n      //     this._getCoder().then(() => {\n      //       this.coder.setValue(value)\n      //     })\n      //   }\n      // },\n      language: {\n        immediate: true,\n        handler(language) {\n          this._getCoder().then(() => {\n            // 尝试从父容器获取语法类型\n            if (language) {\n              // 获取具体的语法类型对象\n              let modeObj = this._getLanguage(language)\n\n              // 判断父容器传入的语法是否被支持\n              if (modeObj) {\n                this.mode = modeObj.label\n                this.coder.setOption('mode', `text/${modeObj.value}`)\n              }\n            }\n          })\n        }\n      }\n    },\n    computed: {\n      placeholderShow() {\n        if (this.placeholder == null) {\n          return `请在此输入${this.language}代码`\n        } else {\n          return this.placeholder\n        }\n      },\n      nullTipStyle(){\n        if (this.lineNumbers) {\n          return { left: '36px' }\n        } else {\n          return { left: '12px' }\n        }\n      },\n      // coder 配置\n      coderOptions() {\n        return {\n          tabSize: this.options.tabSize,\n          theme: this.options.theme,\n          lineNumbers: this.lineNumbers,\n          line: true,\n          hintOptions: this.options.hintOptions\n        }\n      },\n      fullScreenParentProps(){\n        let props = {\n          class: ['full-screen-parent', this.fullCoder ? 'full-screen' : ''],\n          style: {}\n        }\n        if (this.fullCoder) {\n          props.style['z-index'] = this.zIndex\n        }\n        return props\n      }\n    },\n    mounted () {\n      // 初始化\n      this._initialize()\n    },\n    methods: {\n      // 初始化\n      _initialize () {\n        // 初始化编辑器实例，传入需要被实例化的文本域对象和默认配置\n        this.coder = CodeMirror.fromTextArea(this.$refs.textarea, this.coderOptions)\n        // 编辑器赋值\n        this.coder.setValue(this.value || this.code)\n        if(this.value||this.code){\n          this.hasCode=true\n        }else{\n          this.hasCode=false\n        }\n        // 支持双向绑定\n        this.coder.on('change', (coder) => {\n          this.code = coder.getValue()\n          if(this.code){\n            this.hasCode=true\n          }else{\n            this.hasCode=false\n          }\n          if (this.$emit) {\n            this.$emit('input', this.code)\n          }\n        })\n        this.coder.on('focus', () => {\n          this.hasCode=true\n        })\n        this.coder.on('blur', () => {\n          if(this.code){\n            this.hasCode=true\n          }else{\n            this.hasCode=false\n          }\n        })\n\n       /* this.coder.on('cursorActivity',()=>{\n          this.coder.showHint()\n        })*/\n\n      },\n      getCodeContent(){\n        return this.code\n      },\n      setCodeContent(val){\n        this.coder.setValue(val)\n      },\n      // 获取当前语法类型\n      _getLanguage (language) {\n        // 在支持的语法类型列表中寻找传入的语法类型\n        return this.modes.find((mode) => {\n          // 所有的值都忽略大小写，方便比较\n          let currentLanguage = language.toLowerCase()\n          let currentLabel = mode.label.toLowerCase()\n          let currentValue = mode.value.toLowerCase()\n\n          // 由于真实值可能不规范，例如 java 的真实值是 x-java ，所以讲 value 和 label 同时和传入语法进行比较\n          return currentLabel === currentLanguage || currentValue === currentLanguage\n        })\n      },\n      _getCoder() {\n        let _this = this\n        return new Promise((resolve) => {\n          (function get() {\n            if (_this.coder) {\n              resolve(_this.coder)\n            } else {\n              setTimeout(get, 10)\n            }\n          })()\n        })\n      },\n      // 更改模式\n      changeMode (val) {\n        // 修改编辑器的语法配置\n        this.coder.setOption('mode', `text/${val}`)\n\n        // 获取修改后的语法\n        let label = this._getLanguage(val).label.toLowerCase()\n\n        // 允许父容器通过以下函数监听当前的语法值\n        this.$emit('language-change', label)\n      },\n      nullTipClick(){\n        this.coder.focus()\n      }\n    }\n  }\n</script>\n\n<style lang=\"less\">\n  .code-editor-cust{\n    flex-grow:1;\n    display:flex;\n    position:relative;\n    height:100%;\n    .CodeMirror{\n      flex-grow:1;\n      z-index:1;\n      .CodeMirror-code{\n        line-height:19px;\n      }\n\n    }\n    .code-mode-select{\n      position:absolute;\n      z-index:2;\n      right:10px;\n      top:10px;\n      max-width:130px;\n    }\n    .CodeMirror{\n      height: auto;\n      min-height:100%;\n    }\n    .null-tip{\n      position: absolute;\n      top: 4px;\n      left: 36px;\n      z-index: 10;\n      color: #ffffffc9;\n      line-height: initial;\n    }\n    .null-tip-hidden{\n      display: none;\n    }\n  }\n\n  /* 全屏样式 */\n  .full-screen-parent {\n    position: relative;\n\n    .full-screen-icon {\n      opacity: 0;\n      color: black;\n      width: 20px;\n      height: 20px;\n      line-height: 24px;\n      background-color: white;\n      position: absolute;\n      top: 2px;\n      right: 2px;\n      z-index: 9;\n      cursor: pointer;\n      transition: opacity 0.3s;\n    }\n\n    &:hover {\n      .full-screen-icon {\n        opacity: 1;\n\n        &:hover {\n          background-color: rgba(255, 255, 255, 0.88);\n        }\n      }\n    }\n\n    &.full-screen {\n      position: fixed;\n      top: 10px;\n      left: 10px;\n      width: calc(100% - 20px);\n      height: calc(100% - 20px);\n      padding: 10px;\n      background-color: #f5f5f5;\n\n      .full-screen-icon {\n        top: 12px;\n        right: 12px;\n      }\n      .full-screen-child {\n        height: 100%;\n        max-height: 100%;\n        min-height: 100%;\n      }\n    }\n\n    .full-screen-child {\n      min-height: 120px;\n      max-height: 320px;\n    }\n\n  }\n\n\n</style>"],"sourceRoot":"src/components/jeecg"}]}