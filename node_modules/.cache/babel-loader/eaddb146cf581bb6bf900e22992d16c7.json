{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/Ellipsis/Ellipsis.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/Ellipsis/Ellipsis.vue","mtime":1571018558890},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport Tooltip from 'ant-design-vue/es/tooltip';\nimport { cutStrByFullLength, getStrFullLength } from '@/components/_util/StringUtil';\n/*\n  const isSupportLineClamp = document.body.style.webkitLineClamp !== undefined;\n\n  const TooltipOverlayStyle = {\n    overflowWrap: 'break-word',\n    wordWrap: 'break-word',\n  };\n*/\n\nexport default {\n  name: 'Ellipsis',\n  components: {\n    Tooltip: Tooltip\n  },\n  props: {\n    prefixCls: {\n      type: String,\n      default: 'ant-pro-ellipsis'\n    },\n    tooltip: {\n      type: Boolean\n    },\n    length: {\n      type: Number,\n      required: true\n    },\n    lines: {\n      type: Number,\n      default: 1\n    },\n    fullWidthRecognition: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    getStrDom: function getStrDom(str) {\n      var h = this.$createElement;\n      return h(\"span\", [cutStrByFullLength(str, this.length) + '...']);\n    },\n    getTooltip: function getTooltip(fullStr) {\n      var h = this.$createElement;\n      return h(Tooltip, [h(\"template\", {\n        \"slot\": \"title\"\n      }, [fullStr]), this.getStrDom(fullStr)]);\n    }\n  },\n  render: function render() {\n    var _this$$props = this.$props,\n        tooltip = _this$$props.tooltip,\n        length = _this$$props.length;\n    var str = this.$slots.default.map(function (vNode) {\n      return vNode.text;\n    }).join(\"\");\n    var strDom = tooltip && getStrFullLength(str) > length ? this.getTooltip(str) : this.getStrDom(str);\n    return strDom;\n  }\n};",{"version":3,"sources":["Ellipsis.vue"],"names":[],"mappings":";AACA,OAAA,OAAA,MAAA,2BAAA;AACA,SAAA,kBAAA,EAAA,gBAAA,QAAA,+BAAA;AACA;;;;;;;;;AASA,eAAA;AACA,EAAA,IAAA,EAAA,UADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,OAAA,EAAA;AADA,GAFA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA,KALA;AAQA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KARA;AAYA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAZA;AAgBA,IAAA,oBAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAhBA,GALA;AA0BA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,qBACA,GADA,EACA;AAAA;AACA,wBACA,kBAAA,CAAA,GAAA,EAAA,KAAA,MAAA,CAAA,GAAA,KADA;AAGA,KALA;AAMA,IAAA,UANA,sBAMA,OANA,EAMA;AAAA;AACA;AAAA,gBAEA;AAFA,UAEA,OAFA,IAGA,KAAA,SAAA,CAAA,OAAA,CAHA;AAMA;AAbA,GA1BA;AAyCA,EAAA,MAzCA,oBAyCA;AAAA,uBACA,KAAA,MADA;AAAA,QACA,OADA,gBACA,OADA;AAAA,QACA,MADA,gBACA,MADA;AAEA,QAAA,GAAA,GAAA,KAAA,MAAA,CAAA,OAAA,CAAA,GAAA,CAAA,UAAA,KAAA;AAAA,aAAA,KAAA,CAAA,IAAA;AAAA,KAAA,EAAA,IAAA,CAAA,EAAA,CAAA;AACA,QAAA,MAAA,GAAA,OAAA,IAAA,gBAAA,CAAA,GAAA,CAAA,GAAA,MAAA,GAAA,KAAA,UAAA,CAAA,GAAA,CAAA,GAAA,KAAA,SAAA,CAAA,GAAA,CAAA;AACA,WACA,MADA;AAGA;AAhDA,CAAA","sourcesContent":["<script>\n  import Tooltip from 'ant-design-vue/es/tooltip'\n  import { cutStrByFullLength, getStrFullLength } from '@/components/_util/StringUtil'\n/*\n  const isSupportLineClamp = document.body.style.webkitLineClamp !== undefined;\n\n  const TooltipOverlayStyle = {\n    overflowWrap: 'break-word',\n    wordWrap: 'break-word',\n  };\n*/\n\n  export default {\n    name: 'Ellipsis',\n    components: {\n      Tooltip\n    },\n    props: {\n      prefixCls: {\n        type: String,\n        default: 'ant-pro-ellipsis'\n      },\n      tooltip: {\n        type: Boolean\n      },\n      length: {\n        type: Number,\n        required: true\n      },\n      lines: {\n        type: Number,\n        default: 1\n      },\n      fullWidthRecognition: {\n        type: Boolean,\n        default: false\n      }\n    },\n    methods: {\n      getStrDom (str) {\n        return (\n          <span>{ cutStrByFullLength(str, this.length) + '...' }</span>\n        )\n      },\n      getTooltip ( fullStr) {\n        return (\n          <Tooltip>\n            <template slot=\"title\">{ fullStr }</template>\n            { this.getStrDom(fullStr) }\n          </Tooltip>\n        )\n      }\n    },\n    render () {\n      const { tooltip, length } = this.$props\n      let str = this.$slots.default.map(vNode => vNode.text).join(\"\")\n      const strDom = tooltip && getStrFullLength(str) > length ? this.getTooltip(str) : this.getStrDom(str);\n      return (\n        strDom\n      )\n    }\n  }\n</script>"],"sourceRoot":"src/components/Ellipsis"}]}