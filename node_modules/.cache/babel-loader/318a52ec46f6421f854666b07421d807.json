{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/jeecg/modal/JCronModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/jeecg/modal/JCronModal.vue","mtime":1571018558899},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":1565525386522},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js","mtime":1565533683804},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":1571018827562}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.to-string\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'VueCron',\n  props: ['data'],\n  data: function data() {\n    return {\n      visible: false,\n      confirmLoading: false,\n      size: 'large',\n      weekDays: ['天', '一', '二', '三', '四', '五', '六'].map(function (val) {\n        return '星期' + val;\n      }),\n      result: {\n        second: {},\n        minute: {},\n        hour: {},\n        day: {},\n        week: {},\n        month: {},\n        year: {}\n      },\n      defaultValue: {\n        second: {\n          cronEvery: '',\n          incrementStart: 3,\n          incrementIncrement: 5,\n          rangeStart: 1,\n          rangeEnd: 0,\n          specificSpecific: []\n        },\n        minute: {\n          cronEvery: '',\n          incrementStart: 3,\n          incrementIncrement: 5,\n          rangeStart: 1,\n          rangeEnd: '0',\n          specificSpecific: []\n        },\n        hour: {\n          cronEvery: '',\n          incrementStart: 3,\n          incrementIncrement: 5,\n          rangeStart: '0',\n          rangeEnd: '0',\n          specificSpecific: []\n        },\n        day: {\n          cronEvery: '',\n          incrementStart: 1,\n          incrementIncrement: '1',\n          rangeStart: '',\n          rangeEnd: '',\n          specificSpecific: [],\n          cronLastSpecificDomDay: 1,\n          cronDaysBeforeEomMinus: 1,\n          cronDaysNearestWeekday: 1\n        },\n        week: {\n          cronEvery: '',\n          incrementStart: 1,\n          incrementIncrement: 1,\n          specificSpecific: [],\n          cronNthDayDay: 1,\n          cronNthDayNth: 1\n        },\n        month: {\n          cronEvery: '',\n          incrementStart: 3,\n          incrementIncrement: 5,\n          rangeStart: 1,\n          rangeEnd: 1,\n          specificSpecific: []\n        },\n        year: {\n          cronEvery: '',\n          incrementStart: 2017,\n          incrementIncrement: 1,\n          rangeStart: 2019,\n          rangeEnd: 2019,\n          specificSpecific: []\n        },\n        label: ''\n      }\n    };\n  },\n  computed: {\n    modalWidth: function modalWidth() {\n      return 608;\n    },\n    secondsText: function secondsText() {\n      var seconds = '';\n      var cronEvery = this.result.second.cronEvery || '';\n\n      switch (cronEvery.toString()) {\n        case '1':\n          seconds = '*';\n          break;\n\n        case '2':\n          seconds = this.result.second.incrementStart + '/' + this.result.second.incrementIncrement;\n          break;\n\n        case '3':\n          this.result.second.specificSpecific.map(function (val) {\n            seconds += val + ',';\n          });\n          seconds = seconds.slice(0, -1);\n          break;\n\n        case '4':\n          seconds = this.result.second.rangeStart + '-' + this.result.second.rangeEnd;\n          break;\n      }\n\n      return seconds;\n    },\n    minutesText: function minutesText() {\n      var minutes = '';\n      var cronEvery = this.result.minute.cronEvery || '';\n\n      switch (cronEvery.toString()) {\n        case '1':\n          minutes = '*';\n          break;\n\n        case '2':\n          minutes = this.result.minute.incrementStart + '/' + this.result.minute.incrementIncrement;\n          break;\n\n        case '3':\n          this.result.minute.specificSpecific.map(function (val) {\n            minutes += val + ',';\n          });\n          minutes = minutes.slice(0, -1);\n          break;\n\n        case '4':\n          minutes = this.result.minute.rangeStart + '-' + this.result.minute.rangeEnd;\n          break;\n      }\n\n      return minutes;\n    },\n    hoursText: function hoursText() {\n      var hours = '';\n      var cronEvery = this.result.hour.cronEvery || '';\n\n      switch (cronEvery.toString()) {\n        case '1':\n          hours = '*';\n          break;\n\n        case '2':\n          hours = this.result.hour.incrementStart + '/' + this.result.hour.incrementIncrement;\n          break;\n\n        case '3':\n          this.result.hour.specificSpecific.map(function (val) {\n            hours += val + ',';\n          });\n          hours = hours.slice(0, -1);\n          break;\n\n        case '4':\n          hours = this.result.hour.rangeStart + '-' + this.result.hour.rangeEnd;\n          break;\n      }\n\n      return hours;\n    },\n    daysText: function daysText() {\n      var days = '';\n      var cronEvery = this.result.day.cronEvery || '';\n\n      switch (cronEvery.toString()) {\n        case '1':\n          break;\n\n        case '2':\n        case '4':\n        case '11':\n          days = '?';\n          break;\n\n        case '3':\n          days = this.result.day.incrementStart + '/' + this.result.day.incrementIncrement;\n          break;\n\n        case '5':\n          this.result.day.specificSpecific.map(function (val) {\n            days += val + ',';\n          });\n          days = days.slice(0, -1);\n          break;\n\n        case '6':\n          days = \"L\";\n          break;\n\n        case '7':\n          days = \"LW\";\n          break;\n\n        case '8':\n          days = this.result.day.cronLastSpecificDomDay + 'L';\n          break;\n\n        case '9':\n          days = 'L-' + this.result.day.cronDaysBeforeEomMinus;\n          break;\n\n        case '10':\n          days = this.result.day.cronDaysNearestWeekday + \"W\";\n          break;\n      }\n\n      return days;\n    },\n    weeksText: function weeksText() {\n      var weeks = '';\n      var cronEvery = this.result.day.cronEvery || '';\n\n      switch (cronEvery.toString()) {\n        case '1':\n        case '3':\n        case '5':\n          weeks = '?';\n          break;\n\n        case '2':\n          weeks = this.result.week.incrementStart + '/' + this.result.week.incrementIncrement;\n          break;\n\n        case '4':\n          this.result.week.specificSpecific.map(function (val) {\n            weeks += val + ',';\n          });\n          weeks = weeks.slice(0, -1);\n          break;\n\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n        case '10':\n          weeks = \"?\";\n          break;\n\n        case '11':\n          weeks = this.result.week.cronNthDayDay + \"#\" + this.result.week.cronNthDayNth;\n          break;\n      }\n\n      return weeks;\n    },\n    monthsText: function monthsText() {\n      var months = '';\n      var cronEvery = this.result.month.cronEvery || '';\n\n      switch (cronEvery.toString()) {\n        case '1':\n          months = '*';\n          break;\n\n        case '2':\n          months = this.result.month.incrementStart + '/' + this.result.month.incrementIncrement;\n          break;\n\n        case '3':\n          this.result.month.specificSpecific.map(function (val) {\n            months += val + ',';\n          });\n          months = months.slice(0, -1);\n          break;\n\n        case '4':\n          months = this.result.month.rangeStart + '-' + this.result.month.rangeEnd;\n          break;\n      }\n\n      return months;\n    },\n    yearsText: function yearsText() {\n      var years = '';\n      var cronEvery = this.result.year.cronEvery || '';\n\n      switch (cronEvery.toString()) {\n        case '1':\n          years = '*';\n          break;\n\n        case '2':\n          years = this.result.year.incrementStart + '/' + this.result.year.incrementIncrement;\n          break;\n\n        case '3':\n          this.result.year.specificSpecific.map(function (val) {\n            years += val + ',';\n          });\n          years = years.slice(0, -1);\n          break;\n\n        case '4':\n          years = this.result.year.rangeStart + '-' + this.result.year.rangeEnd;\n          break;\n      }\n\n      return years;\n    },\n    cron: function cron() {\n      return \"\".concat(this.secondsText || '*', \" \").concat(this.minutesText || '*', \" \").concat(this.hoursText || '*', \" \").concat(this.daysText || '*', \" \").concat(this.monthsText || '*', \" \").concat(this.weeksText || '?', \" \").concat(this.yearsText || '*');\n    }\n  },\n  watch: {\n    visible: {\n      handler: function handler() {\n        // if(this.data){\n        //   //this. result = Object.keys(this.data.value).length>0?this.deepCopy(this.data.value):this.deepCopy(this.defaultValue);\n        //   //this.result = Object.keys(this.data.value).length>0?clone(this.data.value):clone(this.defaultValue);\n        //   //this.result = Object.keys(this.data.value).length>0?clone(JSON.parse(this.data.value)):clone(this.defaultValue);\n        //   this.result = Object.keys(this.data.value).length>0?JSON.parse(this.data.value):JSON.parse(JSON.stringify(this.defaultValue));\n        // }else{\n        //   //this.result = this.deepCopy(this.defaultValue);\n        //   //this.result = clone(this.defaultValue);\n        //   this.result = JSON.parse(JSON.stringify(this.defaultValue));\n        // }\n        var label = this.data;\n\n        if (label) {\n          this.secondsReverseExp(label);\n          this.minutesReverseExp(label);\n          this.hoursReverseExp(label);\n          this.daysReverseExp(label);\n          this.daysReverseExp(label);\n          this.monthsReverseExp(label);\n          this.yearReverseExp(label);\n          JSON.parse(JSON.stringify(label));\n        } else {\n          this.result = JSON.parse(JSON.stringify(this.defaultValue));\n        }\n      }\n    }\n  },\n  methods: {\n    show: function show() {\n      this.visible = true; // console.log('secondsReverseExp',this.secondsReverseExp(this.data));\n      // console.log('minutesReverseExp',this.minutesReverseExp(this.data));\n      // console.log('hoursReverseExp',this.hoursReverseExp(this.data));\n      // console.log('daysReverseExp',this.daysReverseExp(this.data));\n      // console.log('monthsReverseExp',this.monthsReverseExp(this.data));\n      // console.log('yearReverseExp',this.yearReverseExp(this.data));\n    },\n    handleSubmit: function handleSubmit() {\n      this.$emit('ok', this.cron);\n      this.close();\n      this.visible = false;\n    },\n    close: function close() {\n      this.visible = false;\n    },\n    secondsReverseExp: function secondsReverseExp(seconds) {\n      var val = seconds.split(\" \")[0]; //alert(val);\n\n      var second = {\n        cronEvery: '',\n        incrementStart: 3,\n        incrementIncrement: 5,\n        rangeStart: 1,\n        rangeEnd: 0,\n        specificSpecific: []\n      };\n\n      switch (true) {\n        case val.includes('*'):\n          second.cronEvery = '1';\n          break;\n\n        case val.includes('/'):\n          second.cronEvery = '2';\n          second.incrementStart = val.split('/')[0];\n          second.incrementIncrement = val.split('/')[1];\n          break;\n\n        case val.includes(','):\n          second.cronEvery = '3';\n          second.specificSpecific = val.split(',').map(Number).sort();\n          break;\n\n        case val.includes('-'):\n          second.cronEvery = '4';\n          second.rangeStart = val.split('-')[0];\n          second.rangeEnd = val.split('-')[1];\n          break;\n\n        default:\n          second.cronEvery = '1';\n      }\n\n      this.result.second = second;\n    },\n    minutesReverseExp: function minutesReverseExp(minutes) {\n      var val = minutes.split(\" \")[1];\n      var minute = {\n        cronEvery: '',\n        incrementStart: 3,\n        incrementIncrement: 5,\n        rangeStart: 1,\n        rangeEnd: 0,\n        specificSpecific: []\n      };\n\n      switch (true) {\n        case val.includes('*'):\n          minute.cronEvery = '1';\n          break;\n\n        case val.includes('/'):\n          minute.cronEvery = '2';\n          minute.incrementStart = val.split('/')[0];\n          minute.incrementIncrement = val.split('/')[1];\n          break;\n\n        case val.includes(','):\n          minute.cronEvery = '3';\n          minute.specificSpecific = val.split(',').map(Number).sort();\n          break;\n\n        case val.includes('-'):\n          minute.cronEvery = '4';\n          minute.rangeStart = val.split('-')[0];\n          minute.rangeEnd = val.split('-')[1];\n          break;\n\n        default:\n          minute.cronEvery = '1';\n      }\n\n      this.result.minute = minute;\n    },\n    hoursReverseExp: function hoursReverseExp(hours) {\n      var val = hours.split(\" \")[2];\n      var hour = {\n        cronEvery: '',\n        incrementStart: 3,\n        incrementIncrement: 5,\n        rangeStart: 1,\n        rangeEnd: '0',\n        specificSpecific: []\n      };\n\n      switch (true) {\n        case val.includes('*'):\n          hour.cronEvery = '1';\n          break;\n\n        case val.includes('/'):\n          hour.cronEvery = '2';\n          hour.incrementStart = val.split('/')[0];\n          hour.incrementIncrement = val.split('/')[1];\n          break;\n\n        case val.includes(','):\n          hour.cronEvery = '3';\n          hour.specificSpecific = val.split(',').map(Number).sort();\n          break;\n\n        case val.includes('-'):\n          hour.cronEvery = '4';\n          hour.rangeStart = val.split('-')[0];\n          hour.rangeEnd = val.split('-')[1];\n          break;\n\n        default:\n          hour.cronEvery = '1';\n      }\n\n      this.result.hour = hour;\n    },\n    daysReverseExp: function daysReverseExp(cron) {\n      var days = cron.split(\" \")[3];\n      var weeks = cron.split(\" \")[5];\n      var day = {\n        cronEvery: '',\n        incrementStart: 1,\n        incrementIncrement: 1,\n        rangeStart: 1,\n        rangeEnd: 1,\n        specificSpecific: [],\n        cronLastSpecificDomDay: 1,\n        cronDaysBeforeEomMinus: 1,\n        cronDaysNearestWeekday: 1\n      };\n      var week = {\n        cronEvery: '',\n        incrementStart: 1,\n        incrementIncrement: 1,\n        specificSpecific: [],\n        cronNthDayDay: 1,\n        cronNthDayNth: '1'\n      };\n\n      if (!days.includes('?')) {\n        switch (true) {\n          case days.includes('*'):\n            day.cronEvery = '1';\n            break;\n\n          case days.includes('?'):\n            // 2、4、11\n            break;\n\n          case days.includes('/'):\n            day.cronEvery = '3';\n            day.incrementStart = days.split('/')[0];\n            day.incrementIncrement = days.split('/')[1];\n            break;\n\n          case days.includes(','):\n            day.cronEvery = '5';\n            day.specificSpecific = days.split(',').map(Number).sort(); // day.specificSpecific.forEach(function (value, index) {\n            //   day.specificSpecific[index] = value -1;\n            // });\n\n            break;\n\n          case days.includes('LW'):\n            day.cronEvery = '7';\n            break;\n\n          case days.includes('L-'):\n            day.cronEvery = '9';\n            day.cronDaysBeforeEomMinus = days.split('L-')[1];\n            break;\n\n          case days.includes('L'):\n            //alert(days);\n            if (days.len == 1) {\n              day.cronEvery = '6';\n              day.cronLastSpecificDomDay = '1';\n            } else {\n              day.cronEvery = '8';\n              day.cronLastSpecificDomDay = Number(days.split('L')[0]);\n            }\n\n            break;\n\n          case days.includes('W'):\n            day.cronEvery = '10';\n            day.cronDaysNearestWeekday = days.split('W')[0];\n            break;\n\n          default:\n            day.cronEvery = '1';\n        }\n      } else {\n        switch (true) {\n          case weeks.includes('/'):\n            day.cronEvery = '2';\n            week.incrementStart = weeks.split(\"/\")[0];\n            week.incrementIncrement = weeks.split(\"/\")[1];\n            break;\n\n          case weeks.includes(','):\n            day.cronEvery = '4';\n            week.specificSpecific = weeks.split(',').map(Number).sort();\n            break;\n\n          case '#':\n            day.cronEvery = '11';\n            week.cronNthDayDay = weeks.split(\"#\")[0];\n            week.cronNthDayNth = weeks.split(\"#\")[1];\n            break;\n\n          default:\n            day.cronEvery = '1';\n            week.cronEvery = '1';\n        }\n      }\n\n      this.result.day = day;\n      this.result.week = week;\n    },\n    monthsReverseExp: function monthsReverseExp(cron) {\n      var months = cron.split(\" \")[4];\n      var month = {\n        cronEvery: '',\n        incrementStart: 3,\n        incrementIncrement: 5,\n        rangeStart: 1,\n        rangeEnd: 1,\n        specificSpecific: []\n      };\n\n      switch (true) {\n        case months.includes('*'):\n          month.cronEvery = '1';\n          break;\n\n        case months.includes('/'):\n          month.cronEvery = '2';\n          month.incrementStart = months.split('/')[0];\n          month.incrementIncrement = months.split('/')[1];\n          break;\n\n        case months.includes(','):\n          month.cronEvery = '3';\n          month.specificSpecific = months.split(',').map(Number).sort();\n          break;\n\n        case months.includes('-'):\n          month.cronEvery = '4';\n          month.rangeStart = months.split('-')[0];\n          month.rangeEnd = months.split('-')[1];\n          break;\n\n        default:\n          month.cronEvery = '1';\n      }\n\n      this.result.month = month;\n    },\n    yearReverseExp: function yearReverseExp(cron) {\n      var years = cron.split(\" \")[6];\n      var year = {\n        cronEvery: '',\n        incrementStart: 3,\n        incrementIncrement: 5,\n        rangeStart: 2019,\n        rangeEnd: 2019,\n        specificSpecific: []\n      };\n\n      switch (true) {\n        case years.includes('*'):\n          year.cronEvery = '1';\n          break;\n\n        case years.includes('/'):\n          year.cronEvery = '2';\n          year.incrementStart = years.split('/')[0];\n          year.incrementIncrement = years.split('/')[1];\n          break;\n\n        case years.includes(','):\n          year.cronEvery = '3';\n          year.specificSpecific = years.split(',').map(Number).sort();\n          break;\n\n        case years.includes('-'):\n          year.cronEvery = '4';\n          year.rangeStart = years.split('-')[0];\n          year.rangeEnd = years.split('-')[1];\n          break;\n\n        default:\n          year.cronEvery = '1';\n      }\n\n      this.result.year = year;\n    }\n  }\n};",null]}