{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/jeecg/JEditableTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/jeecg/JEditableTable.vue","mtime":1571018558896},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport _slicedToArray from \"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport _typeof from \"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from 'vue';\nimport Draggable from 'vuedraggable';\nimport { ACCESS_TOKEN } from '@/store/mutation-types';\nimport { FormTypes, VALIDATE_NO_PASSED } from '@/utils/JEditableTableUtil';\nimport { cloneObject, randomString } from '@/utils/util';\nimport JDate from '@/components/jeecg/JDate';\nimport { initDictOptions } from '@/components/dict/JDictSelectUtil'; // 行高，需要在实例加载完成前用到\n\nvar rowHeight = 61;\nexport default {\n  name: 'JEditableTable',\n  components: {\n    JDate: JDate,\n    Draggable: Draggable\n  },\n  props: {\n    // 列信息\n    columns: {\n      type: Array,\n      required: true\n    },\n    // 数据源\n    dataSource: {\n      type: Array,\n      required: true,\n      default: function _default() {\n        return [];\n      }\n    },\n    // 是否显示操作按钮\n    actionButton: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示行号\n    rowNumber: {\n      type: Boolean,\n      default: false\n    },\n    // 是否可选择行\n    rowSelection: {\n      type: Boolean,\n      default: false\n    },\n    // 页面是否在加载中\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    // 页面是否在加载中\n    maxHeight: {\n      type: Number,\n      default: 400\n    },\n    // 要禁用的行\n    disabledRows: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    // 是否禁用全部组件\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    // 是否可拖拽排序\n    dragSort: {\n      type: Boolean,\n      default: false\n    },\n    dragSortKey: {\n      type: String,\n      default: 'orderNum'\n    }\n  },\n  data: function data() {\n    return {\n      // caseId，用于防止有多个实例的时候会冲突\n      caseId: \"_jet-\".concat(randomString(6), \"-\"),\n      // 存储document element 对象\n      el: {\n        inputTable: null,\n        tbody: null\n      },\n      // 存储各个div的style\n      style: {\n        // 'max-height': '400px'\n        tbody: {\n          left: '0px'\n        },\n        // 左侧固定td的style\n        tdLeft: {\n          'min-width': '4%',\n          'max-width': '45px'\n        },\n        tdLeftDs: {\n          'min-width': '30px',\n          'max-width': '35px'\n        }\n      },\n      // 表单的类型\n      formTypes: FormTypes,\n      // 行数据\n      rows: [],\n      // 行高，height + padding + border\n      rowHeight: rowHeight,\n      // 滚动条顶部距离\n      scrollTop: 0,\n      // 绑定 select 的值\n      selectValues: {},\n      // 绑定 checkbox 的值\n      checkboxValues: {},\n      // 绑定 jdate 的值\n      jdateValues: {},\n      // file 信息\n      uploadValues: {},\n      // 绑定左侧选择框已选择的id\n      selectedRowIds: [],\n      // 存储被删除行的id\n      deleteIds: [],\n      // 存储显示tooltip的信息\n      tooltips: {},\n      // 存储没有通过验证的inputId\n      notPassedIds: []\n    };\n  },\n  created: function created() {\n    // 当前显示的tr\n    this.visibleTrEls = []; // 用来存储input表单的值\n    // 数组里的每项都是一个对象，对象里每个key都是input的rowKey，值就是input的值，其中有个id的字段来区分\n    // 示例：\n    // [{\n    //    id: \"_jet-4sp0iu-15541771111770\"\n    //    dbDefaultVal: \"aaa\",\n    //    dbFieldName: \"bbb\",\n    //    dbFieldTxt: \"ccc\",\n    //    dbLength: 32\n    // }]\n\n    this.inputValues = [];\n    this.disabledRowIds = this.disabledRowIds || [];\n  },\n  // 计算属性\n  computed: {\n    // expandHeight = rows.length * rowHeight\n    getExpandHeight: function getExpandHeight() {\n      return this.rows.length * this.rowHeight;\n    },\n    // 获取是否选择了部分\n    getSelectIndeterminate: function getSelectIndeterminate() {\n      return this.selectedRowIds.length > 0 && this.selectedRowIds.length < this.rows.length;\n    },\n    // 获取是否选择了全部\n    getSelectAll: function getSelectAll() {\n      return this.selectedRowIds.length === this.rows.length && this.rows.length > 0;\n    },\n    tbodyStyle: function tbodyStyle() {\n      var style = Object.assign({}, this.style.tbody); // style['max-height'] = `${this.maxHeight}px`\n\n      style['width'] = this.realTrWidth;\n      return style;\n    },\n    showClearSelectButton: function showClearSelectButton() {\n      var count = 0;\n\n      for (var key in this.disabledRows) {\n        if (this.disabledRows.hasOwnProperty(key)) count++;\n      }\n\n      return count > 0;\n    },\n    accessToken: function accessToken() {\n      return Vue.ls.get(ACCESS_TOKEN);\n    },\n    realTrWidth: function realTrWidth() {\n      var _this = this;\n\n      var calcWidth = 'calc(';\n      this.columns.forEach(function (column, i) {\n        var type = column.type,\n            width = column.width; // 隐藏字段不参与计算\n\n        if (type !== FormTypes.hidden) {\n          if (typeof width === 'number') {\n            calcWidth += width + 'px';\n          } else if (typeof width === 'string') {\n            calcWidth += width;\n          } else {\n            calcWidth += '120px';\n          }\n\n          if (i < _this.columns.length - 1) {\n            calcWidth += ' + ';\n          }\n        }\n      });\n      calcWidth += ')'; // console.log('calcWidth: ', calcWidth)\n\n      return calcWidth;\n    }\n  },\n  // 侦听器\n  watch: {\n    dataSource: {\n      immediate: true,\n      handler: function handler(newValue) {\n        var _this2 = this;\n\n        this.initialize();\n        var rows = [];\n        var checkboxValues = {};\n        var selectValues = {};\n        var jdateValues = {}; // 禁用行的id\n\n        var disabledRowIds = this.disabledRowIds || [];\n        newValue.forEach(function (data, newValueIndex) {\n          // 判断源数据是否带有id\n          if (data.id == null || data.id === '') {\n            data.id = _this2.removeCaseId(_this2.generateId() + newValueIndex);\n          }\n\n          var value = {\n            id: _this2.caseId + data.id\n          };\n          var row = {\n            id: value.id\n          };\n          var disabled = false;\n\n          _this2.columns.forEach(function (column) {\n            var inputId = column.key + value.id;\n            var sourceValue = (data[column.key] == null ? '' : data[column.key]).toString();\n\n            if (column.type === FormTypes.checkbox) {\n              // 判断是否设定了customValue（自定义值）\n              if (column.customValue instanceof Array) {\n                var customValue = (column.customValue[0] || '').toString();\n                checkboxValues[inputId] = sourceValue === customValue;\n              } else {\n                checkboxValues[inputId] = sourceValue;\n              }\n            } else if (column.type === FormTypes.select) {\n              if (sourceValue) {\n                // 判断是否是多选\n                selectValues[inputId] = (column.props || {})['mode'] === 'multiple' ? sourceValue.split(',') : sourceValue;\n              } else {\n                selectValues[inputId] = undefined;\n              }\n            } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n              jdateValues[inputId] = sourceValue;\n            } else if (column.type === FormTypes.slot) {\n              if (sourceValue !== 0 && !sourceValue) {\n                value[column.key] = column.defaultValue;\n              } else {\n                value[column.key] = sourceValue;\n              }\n            } else {\n              value[column.key] = sourceValue;\n            } // 解析disabledRows\n\n\n            for (var columnKey in _this2.disabledRows) {\n              // 判断是否有该属性\n              if (_this2.disabledRows.hasOwnProperty(columnKey) && data.hasOwnProperty(columnKey)) {\n                // row[columnKey] =\n                if (disabled !== true) {\n                  disabled = _this2.disabledRows[columnKey] === data[columnKey];\n\n                  if (disabled) {\n                    disabledRowIds.push(row.id);\n                  }\n                }\n              }\n            }\n          });\n\n          _this2.inputValues.push(value);\n\n          rows.push(row);\n        });\n        this.disabledRowIds = disabledRowIds;\n        this.checkboxValues = checkboxValues;\n        this.selectValues = selectValues;\n        this.jdateValues = jdateValues;\n        this.rows = rows; // 更新form表单的值\n\n        this.$nextTick(function () {\n          _this2.updateFormValues();\n        });\n      }\n    },\n    columns: {\n      immediate: true,\n      handler: function handler(columns) {\n        var _this3 = this;\n\n        columns.forEach(function (column) {\n          if (column.type === FormTypes.select) {\n            // 兼容 旧版本 options\n            if (column.options instanceof Array) {\n              column.options = column.options.map(function (item) {\n                if (item) {\n                  return {\n                    text: item.text || item.title,\n                    title: item.text || item.title,\n                    value: item.value\n                  };\n                }\n\n                return {};\n              });\n            }\n\n            if (column.dictCode) {\n              _this3._loadDictConcatToOptions(column);\n            }\n          }\n        });\n      }\n    },\n    // 当selectRowIds改变时触发事件\n    selectedRowIds: function selectedRowIds(newValue) {\n      this.$emit('selectRowChange', cloneObject(newValue));\n    }\n  },\n  mounted: function mounted() {\n    var _this4 = this;\n\n    // 获取document element对象\n    var elements = {};\n    ['inputTable', 'tbody'].forEach(function (id) {\n      elements[id] = document.getElementById(_this4.caseId + id);\n    });\n    this.el = elements;\n    var vm = this;\n    /** 监听滚动条事件 */\n\n    this.el.inputTable.onscroll = function (event) {\n      vm.syncScrollBar(event.target.scrollLeft);\n    };\n\n    this.el.tbody.onscroll = function (event) {// vm.recalcTrHiddenItem(event.target.scrollTop)\n    };\n\n    var _this$$refs = this.$refs,\n        thead = _this$$refs.thead,\n        scrollView = _this$$refs.scrollView;\n\n    scrollView.onscroll = function (event) {\n      // console.log(event.target.scrollTop, ' - ', event.target.scrollLeft)\n      thead.scrollLeft = event.target.scrollLeft; // vm.recalcTrHiddenItem(event.target.scrollTop)\n\n      vm.recalcTrHiddenItem(event.target.scrollTop);\n    };\n  },\n  methods: {\n    /** 初始化列表 */\n    initialize: function initialize() {\n      var _this5 = this;\n\n      this.visibleTrEls = [];\n      this.rows = [];\n      this.deleteIds = [];\n      this.inputValues = [];\n      this.selectValues = {};\n      this.checkboxValues = {};\n      this.jdateValues = {};\n      this.selectedRowIds = [];\n      this.tooltips = {};\n      this.notPassedIds = [];\n      this.scrollTop = 0;\n      this.$nextTick(function () {\n        _this5.el.tbody.scrollTop = 0;\n      });\n    },\n\n    /** 同步滚动条状态 */\n    syncScrollBar: function syncScrollBar(scrollLeft) {// this.style.tbody.left = `${scrollLeft}px`\n      // this.el.tbody.scrollLeft = scrollLeft\n    },\n\n    /** 重置滚动条位置，参数留空则滚动到上次记录的位置 */\n    resetScrollTop: function resetScrollTop(top) {\n      var scrollView = this.$refs.scrollView;\n\n      if (top != null && typeof top === 'number') {\n        scrollView.scrollTop = top;\n      } else {\n        scrollView.scrollTop = this.scrollTop;\n      }\n    },\n\n    /** 重新计算需要隐藏或显示的tr */\n    recalcTrHiddenItem: function recalcTrHiddenItem(top) {\n      var _this6 = this;\n\n      var diff = top - this.scrollTop;\n\n      if (diff < 0) {\n        diff = this.scrollTop - top;\n      } // 只有在滚动了百分之三十的行高的距离时才进行更新\n\n\n      if (diff >= this.rowHeight * 0.3) {\n        this.scrollTop = top; // 更新form表单的值\n\n        this.$nextTick(function () {\n          _this6.updateFormValues();\n        });\n      }\n    },\n\n    /** 生成id */\n    generateId: function generateId(rows) {\n      if (!(rows instanceof Array)) {\n        rows = this.rows || [];\n      }\n\n      var timestamp = new Date().getTime();\n      return \"\".concat(this.caseId).concat(timestamp).concat(rows.length);\n    },\n\n    /** push 一条数据 */\n    push: function push(record) {\n      var _this7 = this;\n\n      var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var rows = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (!(rows instanceof Array)) {\n        rows = cloneObject(this.rows) || [];\n      }\n\n      if (record.id == null) {\n        record.id = this.generateId(rows); // let timestamp = new Date().getTime()\n        // record.id = `${this.caseId}${timestamp}${rows.length}`\n      }\n\n      if (record.id.indexOf(this.caseId) === -1) {\n        record.id = this.caseId + record.id;\n      }\n\n      var row = {\n        id: record.id\n      };\n      var value = {\n        id: row.id\n      };\n      var checkboxValues = Object.assign({}, this.checkboxValues);\n      var selectValues = Object.assign({}, this.selectValues);\n      var jdateValues = Object.assign({}, this.jdateValues);\n      this.columns.forEach(function (column) {\n        var key = column.key;\n        var inputId = key + row.id; // record中是否有该列的值\n\n        var recordHasValue = record[key] != null;\n\n        if (column.type === FormTypes.input) {\n          value[key] = recordHasValue ? record[key] : column.defaultValue || (column.defaultValue === 0 ? 0 : '');\n        } else if (column.type === FormTypes.inputNumber) {\n          // 判断是否是排序字段，如果是就赋最大值\n          if (column.isOrder === true) {\n            value[key] = _this7.getInputNumberMaxValue(column) + 1;\n          } else {\n            value[key] = recordHasValue ? record[key] : column.defaultValue || (column.defaultValue === 0 ? 0 : '');\n          }\n        } else if (column.type === FormTypes.checkbox) {\n          checkboxValues[inputId] = recordHasValue ? record[key] : column.defaultChecked;\n        } else if (column.type === FormTypes.select) {\n          var selected = column.defaultValue;\n\n          if (selected !== 0 && !selected) {\n            selected = undefined;\n          } // 判断多选\n\n\n          if (typeof selected === 'string' && (column.props || {})['mode'] === 'multiple') {\n            selected = selected.split(',');\n          }\n\n          selectValues[inputId] = recordHasValue ? record[key] : selected;\n        } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n          jdateValues[inputId] = recordHasValue ? record[key] : column.defaultValue;\n        } else if (column.type === FormTypes.slot) {\n          value[key] = recordHasValue ? record[key] : column.defaultValue || '';\n        } else {\n          value[key] = recordHasValue ? record[key] : '';\n        }\n      });\n      rows.push(row);\n      this.inputValues.push(value);\n      this.checkboxValues = checkboxValues;\n      this.selectValues = selectValues;\n      this.jdateValues = jdateValues;\n\n      if (this.dragSort) {\n        this.inputValues.forEach(function (item, index) {\n          item[_this7.dragSortKey] = index + 1;\n        });\n      }\n\n      if (update) {\n        this.rows = rows;\n        this.$nextTick(function () {\n          _this7.updateFormValues();\n        });\n      }\n\n      return rows;\n    },\n\n    /** 获取某一数字输入框列中的最大的值 */\n    getInputNumberMaxValue: function getInputNumberMaxValue(column) {\n      var maxNum = 0;\n      this.inputValues.forEach(function (item, index) {\n        var val = item[column.key],\n            num;\n\n        try {\n          num = parseInt(val);\n        } catch (_unused) {\n          num = 0;\n        } // 把首次循环的结果当成最大值\n\n\n        if (index === 0) {\n          maxNum = num;\n        } else {\n          maxNum = num > maxNum ? num : maxNum;\n        }\n      });\n      return maxNum;\n    },\n\n    /** 添加一行 */\n    add: function add() {\n      var _this8 = this;\n\n      var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var forceScrollToBottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (num < 1) return; // let timestamp = new Date().getTime()\n\n      var rows = this.rows;\n      var row;\n\n      for (var i = 0; i < num; i++) {\n        // row = { id: `${this.caseId}${timestamp}${rows.length}` }\n        row = {\n          id: this.generateId(rows)\n        };\n        rows = this.push(row, false, rows);\n      }\n\n      this.rows = rows;\n      this.$nextTick(function () {\n        _this8.updateFormValues();\n      }); // 触发add事件\n\n      this.$emit('added', {\n        row: function () {\n          var r = Object.assign({}, row);\n          r.id = _this8.removeCaseId(r.id);\n          return r;\n        }(),\n        target: this\n      }); // 设置滚动条位置\n\n      var tbody = this.el.tbody;\n      var offsetHeight = tbody.offsetHeight;\n      var realScrollTop = tbody.scrollTop + offsetHeight;\n\n      if (forceScrollToBottom === false) {\n        // 只有滚动条在底部的时候才自动滚动\n        if (!(tbody.scrollHeight - realScrollTop <= 10)) {\n          return;\n        }\n      }\n\n      this.$nextTick(function () {\n        tbody.scrollTop = tbody.scrollHeight;\n      });\n    },\n\n    /** 删除被选中的行 */\n    removeSelectedRows: function removeSelectedRows() {\n      this.removeRows(this.selectedRowIds);\n      this.selectedRowIds = [];\n    },\n\n    /** 删除一行或多行 */\n    removeRows: function removeRows(id) {\n      var _this9 = this;\n\n      var ids = id;\n\n      if (!(id instanceof Array)) {\n        if (typeof id === 'string') {\n          ids = [id];\n        } else {\n          throw \"JEditableTable.removeRows() \\u51FD\\u6570\\u9700\\u8981\\u7684\\u53C2\\u6570\\u53EF\\u4EE5\\u662Fstring\\u6216Array\\u7C7B\\u578B\\uFF0C\\u4F46\\u63D0\\u4F9B\\u7684\\u5374\\u662F\".concat(_typeof(id));\n        }\n      }\n\n      var rows = cloneObject(this.rows);\n      ids.forEach(function (removeId) {\n        // 找到每个id对应的真实index并删除\n        var findAndDelete = function findAndDelete(arr) {\n          for (var i = 0; i < arr.length; i++) {\n            if (arr[i].id === removeId || arr[i].id === _this9.caseId + removeId) {\n              arr.splice(i, 1);\n              return true;\n            }\n          }\n        }; // 找到rows对应的index，并删除\n\n\n        if (findAndDelete(rows)) {\n          // 找到values对应的index，并删除\n          findAndDelete(_this9.inputValues); // 将caseId去除\n\n          var _id = _this9.removeCaseId(removeId);\n\n          _this9.deleteIds.push(_id);\n        }\n      });\n      this.rows = rows;\n      this.$emit('deleted', this.getDeleteIds());\n      this.$nextTick(function () {\n        // 更新formValues\n        _this9.updateFormValues();\n      });\n      return true;\n    },\n\n    /** 获取表格表单里的值（同步版） */\n    getValuesSync: function getValuesSync() {\n      var _this10 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var validate = options.validate,\n          rowIds = options.rowIds;\n      if (typeof validate !== 'boolean') validate = true;\n      if (!(rowIds instanceof Array)) rowIds = null; // console.log('options:', { validate, rowIds })\n\n      var error = 0;\n      var inputValues = cloneObject(this.inputValues);\n      var tooltips = Object.assign({}, this.tooltips);\n      var notPassedIds = cloneObject(this.notPassedIds); // 用于存储合并后的值\n\n      var values = []; // 遍历inputValues来获取每行的值\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var value = _step.value;\n          var rowIdsFlag = false; // 如果带有rowIds，那么就只存这几行的数据\n\n          if (rowIds == null) {\n            rowIdsFlag = true;\n          } else {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = rowIds[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var rowId = _step2.value;\n\n                if (rowId === value.id || \"\".concat(_this10.caseId).concat(rowId) === value.id) {\n                  rowIdsFlag = true;\n                  break;\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n\n          if (!rowIdsFlag) return \"continue\";\n\n          _this10.columns.forEach(function (column) {\n            var inputId = column.key + value.id;\n\n            if (column.type === FormTypes.checkbox) {\n              var checked = _this10.checkboxValues[inputId];\n\n              if (column.customValue instanceof Array) {\n                value[column.key] = checked ? column.customValue[0] : column.customValue[1];\n              } else {\n                value[column.key] = checked;\n              }\n            } else if (column.type === FormTypes.select) {\n              var selected = _this10.selectValues[inputId];\n\n              if (selected instanceof Array) {\n                value[column.key] = cloneObject(selected);\n              } else {\n                value[column.key] = selected;\n              }\n            } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n              value[column.key] = _this10.jdateValues[inputId];\n            } else if (column.type === FormTypes.upload) {\n              value[column.key] = cloneObject(_this10.uploadValues[inputId] || null);\n            } // 检查表单验证\n\n\n            if (validate === true) {\n              var results = _this10.validateOneInput(value[column.key], value, column, notPassedIds, false);\n\n              tooltips[inputId] = results[0];\n\n              if (tooltips[inputId].visible) {\n                error++; // if (error++ === 0) {\n                // let element = document.getElementById(inputId)\n                // while (element.className !== 'tr') {\n                //   element = element.parentElement\n                // }\n                // this.jumpToId(inputId, element)\n                // }\n              }\n\n              tooltips[inputId].visible = false;\n              notPassedIds = results[1];\n            }\n          }); // 将caseId去除\n\n\n          value.id = _this10.removeCaseId(value.id);\n          values.push(value);\n        };\n\n        for (var _iterator = inputValues[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _ret = _loop();\n\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.tooltips = tooltips;\n      this.notPassedIds = notPassedIds;\n      return {\n        error: error,\n        values: values\n      };\n    },\n\n    /** 获取表格表单里的值 */\n    getValues: function getValues(callback) {\n      var validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var rowIds = arguments.length > 2 ? arguments[2] : undefined;\n      var result = this.getValuesSync({\n        validate: validate,\n        rowIds: rowIds\n      });\n\n      if (typeof callback === 'function') {\n        callback(result.error, result.values);\n      }\n    },\n\n    /** getValues的Promise版 */\n    getValuesPromise: function getValuesPromise() {\n      var _this11 = this;\n\n      var validate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var rowIds = arguments.length > 1 ? arguments[1] : undefined;\n      return new Promise(function (resolve, reject) {\n        var _this11$getValuesSync = _this11.getValuesSync({\n          validate: validate,\n          rowIds: rowIds\n        }),\n            error = _this11$getValuesSync.error,\n            values = _this11$getValuesSync.values;\n\n        if (error === 0) {\n          resolve(values);\n        } else {\n          reject(VALIDATE_NO_PASSED);\n        }\n      });\n    },\n\n    /** 获取被删除项的id */\n    getDeleteIds: function getDeleteIds() {\n      return cloneObject(this.deleteIds);\n    },\n\n    /** 获取所有的数据，包括values、deleteIds */\n    getAll: function getAll(validate) {\n      var _this12 = this;\n\n      return new Promise(function (resolve, reject) {\n        var deleteIds = _this12.getDeleteIds();\n\n        _this12.getValuesPromise(validate).then(function (values) {\n          resolve({\n            values: values,\n            deleteIds: deleteIds\n          });\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n\n    /** Sync 获取所有的数据，包括values、deleteIds */\n    getAllSync: function getAllSync(validate, rowIds) {\n      var result = this.getValuesSync({\n        validate: validate,\n        rowIds: rowIds\n      });\n      result.deleteIds = this.getDeleteIds();\n      return result;\n    },\n    // slot 获取值\n    _getValueForSlot: function _getValueForSlot(rowId) {\n      return this.getValuesSync({\n        rowIds: [rowId]\n      }).values[0];\n    },\n\n    /** 设置某行某列的值 */\n    setValues: function setValues(values) {\n      var _this13 = this;\n\n      values.forEach(function (item) {\n        var rowKey = item.rowKey,\n            newValues = item.values;\n\n        var _loop2 = function _loop2(newValueKey) {\n          if (newValues.hasOwnProperty(newValueKey)) {\n            var newValue = newValues[newValueKey];\n            var edited = false; // 已被修改\n\n            _this13.inputValues.forEach(function (value) {\n              // 在inputValues中找到了该字段\n              if (\"\".concat(_this13.caseId).concat(rowKey) === value.id) {\n                if (value.hasOwnProperty(newValueKey)) {\n                  edited = true;\n                  value[newValueKey] = newValue;\n                }\n              }\n            });\n\n            var modelKey = \"\".concat(newValueKey).concat(_this13.caseId).concat(rowKey); // 在 selectValues 中寻找值\n\n            if (!edited && _this13.selectValues.hasOwnProperty(modelKey)) {\n              if (newValue !== 0 && !newValue) {\n                _this13.selectValues[modelKey] = undefined;\n              } else {\n                _this13.selectValues[modelKey] = newValue;\n              }\n\n              edited = true;\n            } // 在 checkboxValues 中寻找值\n\n\n            if (!edited && _this13.checkboxValues.hasOwnProperty(modelKey)) {\n              _this13.checkboxValues[modelKey] = newValue;\n              edited = true;\n            } // 在 jdateValues 中寻找值\n\n\n            if (!edited && _this13.jdateValues.hasOwnProperty(modelKey)) {\n              _this13.jdateValues[modelKey] = newValue;\n              edited = true;\n            }\n          }\n        };\n\n        for (var newValueKey in newValues) {\n          _loop2(newValueKey);\n        }\n      }); // 强制更新formValues\n\n      this.forceUpdateFormValues();\n    },\n\n    /** 跳转到指定位置 */\n    // jumpToId(id, element) {\n    //   if (element == null) {\n    //     element = document.getElementById(id)\n    //   }\n    //   if (element != null) {\n    //     console.log(this.el.tbody.scrollTop, element.offsetTop)\n    //     this.el.tbody.scrollTop = element.offsetTop\n    //     console.log(this.el.tbody.scrollTop, element.offsetTop)\n    //   }\n    // },\n\n    /** 验证单个表单 */\n    validateOneInput: function validateOneInput(value, row, column, notPassedIds) {\n      var update = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var tooltips = Object.assign({}, this.tooltips); // let notPassedIds = cloneObject(this.notPassedIds)\n\n      var inputId = column.key + row.id;\n\n      var _this$validateValue = this.validateValue(column.validateRules, value),\n          _this$validateValue2 = _slicedToArray(_this$validateValue, 2),\n          passed = _this$validateValue2[0],\n          message = _this$validateValue2[1];\n\n      tooltips[inputId] = tooltips[inputId] ? tooltips[inputId] : {};\n      tooltips[inputId].visible = !passed;\n      var index = notPassedIds.indexOf(inputId);\n      var borderColor = null,\n          boxShadow = null;\n\n      if (!passed) {\n        tooltips[inputId].title = this.replaceProps(column, message);\n        borderColor = 'red';\n        boxShadow = \"0 0 0 2px rgba(255, 0, 0, 0.2)\";\n        if (index === -1) notPassedIds.push(inputId);\n      } else {\n        if (index !== -1) notPassedIds.splice(index, 1);\n      }\n\n      var element = document.getElementById(inputId);\n\n      if (element != null) {\n        // select 在 .ant-select-selection 上设置 border-color\n        if (column.type === FormTypes.select) {\n          element = element.getElementsByClassName('ant-select-selection')[0];\n        } // jdate 在 input 上设置 border-color\n\n\n        if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n          element = element.getElementsByTagName('input')[0];\n        }\n\n        element.style.borderColor = borderColor;\n        element.style.boxShadow = boxShadow;\n      } // 是否更新到data\n\n\n      if (update) {\n        this.tooltips = tooltips;\n        this.notPassedIds = notPassedIds;\n      }\n\n      return [tooltips[inputId], notPassedIds];\n    },\n\n    /** 通过规则验证值是否正确 */\n    validateValue: function validateValue(rules, value) {\n      var passed = true,\n          message = ''; // 判断有没有验证规则或验证规则格式正不正确，若条件不符合则默认通过\n\n      if (rules instanceof Array) {\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = rules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var rule = _step3.value;\n            // 当前值是否为空\n            var isNull = value == null || value === ''; // 验证规则：非空\n\n            if (rule.required === true && isNull) {\n              passed = false;\n            } else // 使用 else-if 是为了防止一个 rule 中出现两个规则\n              // 验证规则：正则表达式\n              if (!!rule.pattern && !isNull) {\n                // 兼容 online 的规则\n                var foo = [{\n                  title: '唯一校验',\n                  value: 'only',\n                  pattern: null\n                }, {\n                  title: '6到16位数字',\n                  value: 'n6-16',\n                  pattern: /\\d{6,18}/\n                }, {\n                  title: '6到16位任意字符',\n                  value: '*6-16',\n                  pattern: /^.{6,16}$/\n                }, {\n                  title: '网址',\n                  value: 'url',\n                  pattern: /^(?:([A-Za-z]+):)?(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/\n                }, {\n                  title: '电子邮件',\n                  value: 'e',\n                  pattern: /^([\\w]+\\.*)([\\w]+)@[\\w]+\\.\\w{3}(\\.\\w{2}|)$/\n                }, {\n                  title: '手机号码',\n                  value: 'm',\n                  pattern: /^1[3456789]\\d{9}$/\n                }, {\n                  title: '邮政编码',\n                  value: 'p',\n                  pattern: /^[1-9]\\d{5}$/\n                }, {\n                  title: '字母',\n                  value: 's',\n                  pattern: /^[A-Z|a-z]+$/\n                }, {\n                  title: '数字',\n                  value: 'n',\n                  pattern: /^-?\\d+\\.?\\d*$/\n                }, {\n                  title: '整数',\n                  value: 'z',\n                  pattern: /^[1-9]\\d*$/\n                }, {\n                  title: '非空',\n                  value: '*',\n                  pattern: /^.+$/\n                }, {\n                  title: '6到18位字符串',\n                  value: 's6-18',\n                  pattern: /^.{6,18}$/\n                }, {\n                  title: '金额',\n                  value: 'money',\n                  pattern: /^(([1-9][0-9]*)|([0]\\.\\d{0,2}|[1-9][0-9]*\\.\\d{0,2}))$/\n                }];\n                var flag = false;\n\n                for (var _i = 0, _foo = foo; _i < _foo.length; _i++) {\n                  var item = _foo[_i];\n\n                  if (rule.pattern === item.value && item.pattern) {\n                    passed = new RegExp(item.pattern).test(value);\n                    flag = true;\n                    break;\n                  }\n                }\n\n                if (!flag) passed = new RegExp(rule.pattern).test(value);\n              } // 如果没有通过验证，则跳出循环。如果通过了验证，则继续验证下一条规则\n\n\n            if (!passed) {\n              message = rule.message;\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      }\n\n      return [passed, message];\n    },\n\n    /** 动态更新表单的值 */\n    updateFormValues: function updateFormValues() {\n      var _this14 = this;\n\n      var trs = this.el.tbody.getElementsByClassName('tr');\n      var trEls = [];\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = trs[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var _tr = _step4.value;\n          trEls.push(_tr);\n        } // 获取新增的 tr\n\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      var newTrEls = trEls;\n\n      if (this.visibleTrEls.length > 0) {\n        newTrEls = [];\n\n        for (var _i2 = 0, _trEls = trEls; _i2 < _trEls.length; _i2++) {\n          var tr = _trEls[_i2];\n          var isNewest = true;\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            for (var _iterator5 = this.visibleTrEls[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              var vtr = _step5.value;\n\n              if (vtr.id === tr.id) {\n                isNewest = false;\n                break;\n              }\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n\n          if (isNewest) {\n            newTrEls.push(tr);\n          }\n        }\n      }\n\n      this.visibleTrEls = trEls; // 向新增的tr中赋值\n\n      newTrEls.forEach(function (tr) {\n        var idx = tr.dataset.idx;\n        var value = _this14.inputValues[idx];\n\n        for (var key in value) {\n          if (value.hasOwnProperty(key)) {\n            var elid = \"\".concat(key).concat(value.id);\n            var el = document.getElementById(elid);\n\n            if (el) {\n              el.value = value[key];\n            }\n          }\n        }\n      });\n    },\n\n    /** 强制更新FormValues */\n    forceUpdateFormValues: function forceUpdateFormValues() {\n      this.visibleTrEls = [];\n      this.updateFormValues();\n    },\n\n    /** 全选或取消全选 */\n    handleChangeCheckedAll: function handleChangeCheckedAll() {\n      var _this15 = this;\n\n      var selectedRowIds = [];\n\n      if (!this.getSelectAll) {\n        this.rows.forEach(function (row) {\n          if ((_this15.disabledRowIds || []).indexOf(row.id) === -1) {\n            selectedRowIds.push(row.id);\n          }\n        });\n      }\n\n      this.selectedRowIds = selectedRowIds;\n    },\n\n    /** 左侧行选择框change事件 */\n    handleChangeLeftCheckbox: function handleChangeLeftCheckbox(event) {\n      var id = event.target.id;\n\n      if ((this.disabledRowIds || []).indexOf(id) !== -1) {\n        return;\n      }\n\n      var index = this.selectedRowIds.indexOf(id);\n\n      if (index !== -1) {\n        this.selectedRowIds.splice(index, 1);\n      } else {\n        this.selectedRowIds.push(id);\n      }\n    },\n    handleClickAdd: function handleClickAdd() {\n      this.add();\n    },\n    handleConfirmDelete: function handleConfirmDelete() {\n      this.removeSelectedRows();\n    },\n    handleClickClearSelect: function handleClickClearSelect() {\n      this.selectedRowIds = [];\n    },\n\n    /** select 搜索时的事件，用于动态添加options */\n    handleSearchSelect: function handleSearchSelect(value, id, row, col) {\n      if (col.allowInput === true) {\n        // 是否找到了对应的项，找不到则添加这一项\n        var flag = false;\n        var _iteratorNormalCompletion6 = true;\n        var _didIteratorError6 = false;\n        var _iteratorError6 = undefined;\n\n        try {\n          for (var _iterator6 = col.options[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n            var option = _step6.value;\n\n            if (option.value.toLocaleString() === value.toLocaleString()) {\n              flag = true;\n              break;\n            }\n          } // !!value ：不添加空值\n\n        } catch (err) {\n          _didIteratorError6 = true;\n          _iteratorError6 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n              _iterator6.return();\n            }\n          } finally {\n            if (_didIteratorError6) {\n              throw _iteratorError6;\n            }\n          }\n        }\n\n        if (!flag && !!value) {\n          // searchAdd 是否是通过搜索添加的\n          col.options.push({\n            title: value,\n            value: value,\n            searchAdd: true\n          });\n        }\n      }\n    },\n    // blur 失去焦点\n    handleBlurSearch: function handleBlurSearch(value, id, row, col) {\n      if (col.allowInput === true) {\n        // 删除无用的因搜索（用户输入）而创建的项\n        if (typeof value === 'string') {\n          var indexs = [];\n          col.options.forEach(function (option, index) {\n            if (option.value.toLocaleString() === value.toLocaleString()) {\n              delete option.searchAdd;\n            } else if (option.searchAdd === true) {\n              indexs.push(index);\n            }\n          }); // 翻转删除数组中的项\n\n          var _iteratorNormalCompletion7 = true;\n          var _didIteratorError7 = false;\n          var _iteratorError7 = undefined;\n\n          try {\n            for (var _iterator7 = indexs.reverse()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n              var index = _step7.value;\n              col.options.splice(index, 1);\n            }\n          } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                _iterator7.return();\n              }\n            } finally {\n              if (_didIteratorError7) {\n                throw _iteratorError7;\n              }\n            }\n          }\n        }\n      }\n    },\n\n    /** 拖动结束，交换inputValue中的值 */\n    handleDragMoveEnd: function handleDragMoveEnd(event) {\n      var _this16 = this;\n\n      var oldIndex = event.oldIndex,\n          newIndex = event.newIndex;\n      var values = this.inputValues; // 存储旧数据，并删除旧项目\n\n      var temp = values[oldIndex];\n      values.splice(oldIndex, 1); // 向新项目里添加旧数据\n\n      values.splice(newIndex, 0, temp);\n      values.forEach(function (item, index) {\n        item[_this16.dragSortKey] = index + 1;\n      });\n      this.forceUpdateFormValues(); // 触发已拖动事件\n\n      this.$emit('dragged', {\n        oldIndex: oldIndex,\n        newIndex: newIndex,\n        target: this\n      });\n    },\n\n    /* --- common function begin --- */\n\n    /** 鼠标移入 */\n    handleMouseoverCommono: function handleMouseoverCommono(row, column) {\n      var inputId = column.key + row.id;\n\n      if (this.notPassedIds.indexOf(inputId) !== -1) {\n        this.showOrHideTooltip(inputId, true);\n      }\n    },\n\n    /** 鼠标移出 */\n    handleMouseoutCommono: function handleMouseoutCommono(row, column) {\n      var inputId = column.key + row.id;\n      this.showOrHideTooltip(inputId, false);\n    },\n\n    /** input事件 */\n    handleInputCommono: function handleInputCommono(target, index, row, column) {\n      var value = target.value,\n          dataset = target.dataset,\n          selectionStart = target.selectionStart;\n      var type = FormTypes.input;\n      var change = true;\n\n      if (\"\".concat(dataset.inputNumber) === 'true') {\n        type = FormTypes.inputNumber;\n        var replace = value.replace(/[^0-9]/g, '');\n\n        if (value !== replace) {\n          change = false;\n          value = replace;\n          target.value = replace;\n\n          if (typeof selectionStart === 'number') {\n            target.selectionStart = selectionStart - 1;\n            target.selectionEnd = selectionStart - 1;\n          }\n        }\n      } // 存储输入的值\n\n\n      this.inputValues[index][column.key] = value; // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true); // 触发valueChange 事件\n\n      if (change) {\n        this.elemValueChange(type, row, column, value);\n      }\n    },\n    handleChangeCheckboxCommon: function handleChangeCheckboxCommon(event, row, column) {\n      var _event$target = event.target,\n          id = _event$target.id,\n          checked = _event$target.checked;\n      this.checkboxValues = this.bindValuesChange(checked, id, 'checkboxValues'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.checkbox, row, column, checked);\n    },\n    handleChangeSelectCommon: function handleChangeSelectCommon(value, id, row, column) {\n      this.selectValues = this.bindValuesChange(value, id, 'selectValues'); // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.select, row, column, value);\n    },\n    handleChangeJDateCommon: function handleChangeJDateCommon(value, id, row, column, showTime) {\n      this.jdateValues = this.bindValuesChange(value, id, 'jdateValues');\n      this.validateOneInput(value, row, column, this.notPassedIds, true); // 触发valueChange 事件\n\n      if (showTime) {\n        this.elemValueChange(FormTypes.datetime, row, column, value);\n      } else {\n        this.elemValueChange(FormTypes.date, row, column, value);\n      }\n    },\n    handleChangeUpload: function handleChangeUpload(info, id, row, column) {\n      var file = info.file;\n      var value = {\n        name: file.name,\n        type: file.type,\n        size: file.size,\n        status: file.status,\n        percent: file.percent\n      };\n\n      if (column.responseName && file.response) {\n        value['responseName'] = file.response[column.responseName];\n      }\n\n      this.uploadValues = this.bindValuesChange(value, id, 'uploadValues');\n    },\n\n    /** 记录用到数据绑定的组件的值 */\n    bindValuesChange: function bindValuesChange(value, id, key) {\n      var values = Object.assign({}, this[key]);\n      values[id] = value;\n      return values;\n    },\n\n    /** 显示或隐藏tooltip */\n    showOrHideTooltip: function showOrHideTooltip(inputId, show) {\n      var tooltips = Object.assign({}, this.tooltips);\n      tooltips[inputId] = tooltips[inputId] ? tooltips[inputId] : {};\n      tooltips[inputId].visible = show;\n      this.tooltips = tooltips;\n    },\n\n    /** value 触发valueChange事件 */\n    elemValueChange: function elemValueChange(type, rowSource, columnSource, value) {\n      var column = Object.assign({}, columnSource); // 将caseId去除\n\n      var row = Object.assign({}, rowSource);\n      row.id = this.removeCaseId(row.id); // 获取整行的数据\n\n      var _this$getValuesSync = this.getValuesSync({\n        validate: false,\n        rowIds: [row.id]\n      }),\n          values = _this$getValuesSync.values;\n\n      if (values.length > 0) {\n        Object.assign(row, values[0]);\n      }\n\n      this.$emit('valueChange', {\n        type: type,\n        row: row,\n        column: column,\n        value: value,\n        target: this\n      });\n    },\n\n    /** 将caseId去除 */\n    removeCaseId: function removeCaseId(id) {\n      var remove = id.split(this.caseId)[1];\n      return remove ? remove : id;\n    },\n    handleClickDelFile: function handleClickDelFile(id) {\n      this.uploadValues[id] = null;\n    },\n\n    /** 加载数据字典并合并到 options */\n    _loadDictConcatToOptions: function _loadDictConcatToOptions(column) {\n      initDictOptions(column.dictCode).then(function (res) {\n        if (res.success) {\n          var newOptions = column.options || []; // .concat(res.result)\n\n          res.result.forEach(function (item) {\n            var _iteratorNormalCompletion8 = true;\n            var _didIteratorError8 = false;\n            var _iteratorError8 = undefined;\n\n            try {\n              for (var _iterator8 = newOptions[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                var option = _step8.value;\n                if (option.value === item.value) return;\n              }\n            } catch (err) {\n              _didIteratorError8 = true;\n              _iteratorError8 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n                  _iterator8.return();\n                }\n              } finally {\n                if (_didIteratorError8) {\n                  throw _iteratorError8;\n                }\n              }\n            }\n\n            newOptions.push(item);\n          });\n          column.options = newOptions;\n        } else {\n          console.group(\"JEditableTable \\u67E5\\u8BE2\\u5B57\\u5178(\".concat(column.dictCode, \")\\u53D1\\u751F\\u5F02\\u5E38\"));\n          console.log(res.message);\n          console.groupEnd();\n        }\n      });\n    },\n\n    /* --- common function end --- */\n\n    /* --- 以下是辅助方法，多用于动态构造页面中的数据 --- */\n\n    /** 辅助方法：打印日志 */\n    log: console.log,\n    getVM: function getVM() {\n      return this;\n    },\n\n    /** 辅助方法：指定a-select 和 j-data 的父容器 */\n    getParentContainer: function getParentContainer(node) {\n      var _this17 = this;\n\n      var element = function () {\n        // nodeType 8\t: Comment\t: 注释\n        if (_this17.$el && _this17.$el.nodeType !== 8) {\n          return _this17.$el;\n        }\n\n        var doc = document.getElementById(_this17.caseId + 'inputTable');\n\n        if (doc != null) {\n          return doc;\n        }\n\n        return node.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode;\n      }(); // 递归判断是否带有 overflow: hidden；的父元素\n\n\n      var ifParent = function ifParent(child) {\n        var currentOverflow = null;\n\n        if (child['currentStyle']) {\n          currentOverflow = child['currentStyle']['overflow'];\n        } else if (window.getComputedStyle) {\n          currentOverflow = window.getComputedStyle(child)['overflow'];\n        }\n\n        if (currentOverflow != null) {\n          if (currentOverflow === 'hidden') {\n            // 找到了带有 hidden 的标签，判断它的父级是否还有 hidden，直到遇到完全没有 hidden 或 body 的时候才停止递归\n            var _temp = ifParent(child.parentNode);\n\n            return _temp != null ? _temp : child.parentNode;\n          } else // 当前标签没有 hidden ，如果有父级并且父级不是 body 的话就继续递归判断父级\n            if (child.parentNode && child.parentNode.tagName.toLocaleLowerCase() !== 'body') {\n              return ifParent(child.parentNode);\n            } else {\n              // 直到 body 都没有遇到有 hidden 的标签\n              return null;\n            }\n        } else {\n          return child;\n        }\n      };\n\n      var temp = ifParent(element);\n      return temp != null ? temp : element;\n    },\n\n    /** 辅助方法：替换${...}变量 */\n    replaceProps: function replaceProps(col, value) {\n      if (value && typeof value === 'string') {\n        value = value.replace(/\\${title}/g, col.title);\n        value = value.replace(/\\${key}/g, col.key);\n        value = value.replace(/\\${defaultValue}/g, col.defaultValue);\n      }\n\n      return value;\n    },\n\n    /** view辅助方法：构建 tr style */\n    buildTrStyle: function buildTrStyle(index) {\n      return {\n        'top': \"\".concat(rowHeight * index, \"px\")\n      };\n    },\n\n    /** view辅助方法：构建 td style */\n    buildTdStyle: function buildTdStyle(col) {\n      var style = {}; // 计算宽度\n\n      if (col.width) {\n        style['width'] = col.width;\n      } else if (this.columns) {\n        style['width'] = \"\".concat((100 - 4 * 2) / this.columns.length, \"%\");\n      } else {\n        style['width'] = '120px';\n      } // checkbox 居中显示\n\n\n      var isCheckbox = col.type === FormTypes.checkbox;\n\n      if (isCheckbox) {\n        style['align-items'] = 'center';\n        style['text-align'] = 'center';\n        style['padding-left'] = '0';\n        style['padding-right'] = '0';\n      }\n\n      return style;\n    },\n\n    /** view辅助方法：构造props */\n    buildProps: function buildProps(row, col) {\n      var props = {}; // 解析props\n\n      if (_typeof(col.props) === 'object') {\n        for (var prop in col.props) {\n          if (col.props.hasOwnProperty(prop)) {\n            props[prop] = this.replaceProps(col, col.props[prop]);\n          }\n        }\n      } // 判断select是否允许输入\n\n\n      if (col.type === FormTypes.select && col.allowInput === true) {\n        props['showSearch'] = true;\n      } // 判断是否是禁用的列\n\n\n      props['disabled'] = !!col['disabled']; // 判断是否为禁用的行\n\n      if (props['disabled'] !== true) {\n        props['disabled'] = (this.disabledRowIds || []).indexOf(row.id) !== -1;\n      } // 判断是否禁用全部组件\n\n\n      if (this.disabled === true) {\n        props['disabled'] = true;\n      }\n\n      return props;\n    },\n\n    /** upload 辅助方法：获取 headers */\n    uploadGetHeaders: function uploadGetHeaders(row, column) {\n      var headers = {};\n\n      if (column.token === true) {\n        headers['X-Access-Token'] = this.accessToken;\n      }\n\n      return headers;\n    }\n  }\n};",null]}