{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/jeecg/JTreeDict.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/jeecg/JTreeDict.vue","mtime":1571018558898},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _toConsumableArray from \"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAction } from '@/api/manage';\nexport default {\n  name: 'JTreeDict',\n  data: function data() {\n    return {\n      treeData: [],\n      treeValue: \"\",\n      url_root: \"/sys/category/loadTreeRoot\",\n      url_children: \"/sys/category/loadTreeChildren\",\n      url_view: '/sys/category/loadOne'\n    };\n  },\n  props: {\n    value: {\n      type: String,\n      required: false\n    },\n    placeholder: {\n      type: String,\n      default: '请选择',\n      required: false\n    },\n    parentCode: {\n      type: String,\n      default: '',\n      required: false\n    },\n    field: {\n      type: String,\n      default: 'id',\n      required: false\n    },\n    root: {\n      type: Object,\n      required: false,\n      default: function _default() {\n        return {\n          pid: '0'\n        };\n      }\n    },\n    async: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n      required: false\n    }\n  },\n  watch: {\n    root: {\n      handler: function handler(val) {\n        console.log(\"root-change\", val);\n      },\n      deep: true\n    },\n    parentCode: {\n      handler: function handler() {\n        this.loadRoot();\n      }\n    },\n    value: {\n      handler: function handler() {\n        this.loadViewInfo();\n      }\n    }\n  },\n  created: function created() {\n    this.loadRoot();\n    this.loadViewInfo();\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  },\n  methods: {\n    loadViewInfo: function loadViewInfo() {\n      var _this = this;\n\n      if (!this.value || this.value == \"0\") {\n        this.treeValue = \"\";\n      } else {\n        var param = {\n          field: this.field,\n          val: this.value\n        };\n        getAction(this.url_view, param).then(function (res) {\n          if (res.success) {\n            _this.treeValue = {\n              value: _this.value,\n              label: res.result.name\n            };\n          }\n        });\n      }\n    },\n    loadRoot: function loadRoot() {\n      var _this2 = this;\n\n      var param = {\n        async: this.async,\n        pcode: this.parentCode\n      };\n      getAction(this.url_root, param).then(function (res) {\n        if (res.success) {\n          _this2.handleTreeNodeValue(res.result);\n\n          console.log(\"aaaa\", res.result);\n          _this2.treeData = _toConsumableArray(res.result);\n        } else {\n          _this2.$message.error(res.message);\n        }\n      });\n    },\n    asyncLoadTreeData: function asyncLoadTreeData(treeNode) {\n      var _this3 = this;\n\n      return new Promise(function (resolve) {\n        if (!_this3.async) {\n          resolve();\n          return;\n        }\n\n        if (treeNode.$vnode.children) {\n          resolve();\n          return;\n        }\n\n        var pid = treeNode.$vnode.key;\n        var param = {\n          pid: pid\n        };\n        getAction(_this3.url_children, param).then(function (res) {\n          if (res.success) {\n            _this3.handleTreeNodeValue(res.result);\n\n            _this3.addChildren(pid, res.result, _this3.treeData);\n\n            _this3.treeData = _toConsumableArray(_this3.treeData);\n          }\n\n          resolve();\n        });\n      });\n    },\n    addChildren: function addChildren(pid, children, treeArray) {\n      if (treeArray && treeArray.length > 0) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = treeArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n\n            if (item.key == pid) {\n              if (!children || children.length == 0) {\n                item.leaf = true;\n              } else {\n                item.children = children;\n              }\n\n              break;\n            } else {\n              this.addChildren(pid, children, item.children);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    },\n    handleTreeNodeValue: function handleTreeNodeValue(result) {\n      var storeField = this.field == 'code' ? 'code' : 'key';\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = result[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var i = _step2.value;\n          i.value = i[storeField];\n          i.isLeaf = !i.leaf ? false : true;\n\n          if (i.children && i.children.length > 0) {\n            this.handleTreeNodeValue(i.children);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    },\n    onChange: function onChange(value) {\n      console.log(value);\n      this.$emit('change', value.value);\n      this.treeValue = value;\n    },\n    onSearch: function onSearch(value) {\n      console.log(value);\n    },\n    getCurrTreeData: function getCurrTreeData() {\n      return this.treeData;\n    }\n  }\n};",{"version":3,"sources":["JTreeDict.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <a-tree-select\n    allowClear\n    labelInValue\n    style=\"width: 100%\"\n    :disabled=\"disabled\"\n    :dropdownStyle=\"{ maxHeight: '400px', overflow: 'auto' }\"\n    :placeholder=\"placeholder\"\n    :loadData=\"asyncLoadTreeData\"\n    :value=\"treeValue\"\n    :treeData=\"treeData\"\n    @change=\"onChange\"\n    @search=\"onSearch\">\n  </a-tree-select>\n</template>\n\n<script>\n  import { getAction } from '@/api/manage'\n\n  export default {\n    name: 'JTreeDict',\n    data(){\n      return {\n        treeData:[],\n        treeValue:\"\",\n        url_root:\"/sys/category/loadTreeRoot\",\n        url_children:\"/sys/category/loadTreeChildren\",\n        url_view:'/sys/category/loadOne',\n      }\n    },\n    props:{\n      value:{\n        type: String,\n        required: false\n      },\n      placeholder:{\n        type: String,\n        default: '请选择',\n        required: false\n      },\n      parentCode:{\n        type: String,\n        default: '',\n        required: false\n      },\n      field:{\n        type: String,\n        default: 'id',\n        required: false\n      },\n      root:{\n        type:Object,\n        required:false,\n        default:()=>{\n          return {\n            pid:'0'\n          }\n        }\n      },\n      async:{\n        type:Boolean,\n        default:false,\n        required:false\n      },\n      disabled:{\n        type:Boolean,\n        default:false,\n        required:false\n      }\n    },\n    watch:{\n      root:{\n        handler(val){\n          console.log(\"root-change\",val)\n        },\n        deep:true\n      },\n      parentCode:{\n        handler(){\n          this.loadRoot()\n        }\n      },\n      value:{\n        handler(){\n          this.loadViewInfo()\n        }\n      }\n    },\n    created(){\n      this.loadRoot()\n      this.loadViewInfo()\n    },\n    model: {\n      prop: 'value',\n      event: 'change'\n    },\n    methods:{\n      loadViewInfo(){\n        if(!this.value || this.value==\"0\"){\n          this.treeValue = \"\"\n        }else{\n          let param = {\n            field:this.field,\n            val:this.value\n          }\n          getAction(this.url_view,param).then(res=>{\n            if(res.success){\n              this.treeValue = {\n                value:this.value,\n                label:res.result.name\n              }\n            }\n          })\n        }\n      },\n      loadRoot(){\n        let param = {\n          async:this.async,\n          pcode:this.parentCode\n        }\n        getAction(this.url_root,param).then(res=>{\n          if(res.success){\n            this.handleTreeNodeValue(res.result)\n            console.log(\"aaaa\",res.result)\n            this.treeData = [...res.result]\n          }else{\n            this.$message.error(res.message)\n          }\n        })\n      },\n      asyncLoadTreeData (treeNode) {\n        return new Promise((resolve) => {\n          if(!this.async){\n            resolve()\n            return\n          }\n          if (treeNode.$vnode.children) {\n            resolve()\n            return\n          }\n          let pid = treeNode.$vnode.key\n          let param = {\n            pid:pid\n          }\n          getAction(this.url_children,param).then(res=>{\n            if(res.success){\n              this.handleTreeNodeValue(res.result)\n              this.addChildren(pid,res.result,this.treeData)\n              this.treeData = [...this.treeData]\n            }\n            resolve()\n          })\n        })\n      },\n      addChildren(pid,children,treeArray){\n        if(treeArray && treeArray.length>0){\n          for(let item of treeArray){\n            if(item.key == pid){\n              if(!children || children.length==0){\n                item.leaf = true\n              }else{\n                item.children = children\n              }\n              break\n            }else{\n              this.addChildren(pid,children,item.children)\n            }\n          }\n        }\n      },\n      handleTreeNodeValue(result){\n        let storeField = this.field=='code'?'code':'key'\n        for(let i of result){\n          i.value = i[storeField]\n          i.isLeaf = (!i.leaf)?false:true\n          if(i.children && i.children.length>0){\n            this.handleTreeNodeValue(i.children)\n          }\n        }\n      },\n      onChange(value){\n        console.log(value)\n        this.$emit('change', value.value);\n        this.treeValue = value\n      },\n      onSearch(value){\n        console.log(value)\n      },\n      getCurrTreeData(){\n        return this.treeData\n      }\n    }\n\n  }\n</script>"],"sourceRoot":"src/components/jeecg"}]}