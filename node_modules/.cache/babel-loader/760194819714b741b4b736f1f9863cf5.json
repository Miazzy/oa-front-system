{"remainingRequest":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/jeecg/JCodeEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/src/components/jeecg/JCodeEditor.vue","mtime":1571018558896},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/thread-loader/dist/cjs.js","mtime":1565525386522},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/babel-loader/lib/index.js","mtime":1565533683804},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/cache-loader/dist/cjs.js","mtime":1565525385854},{"path":"/Users/yunwisdom/Workspace/jeecg-boot/ant-design-vue-jeecg/node_modules/vue-loader/lib/index.js","mtime":1571018827562}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// 引入全局实例\nimport _CodeMirror from 'codemirror'; // 核心样式\n\nimport 'codemirror/lib/codemirror.css'; // 引入主题后还需要在 options 中指定主题才会生效 darcula  gruvbox-dark hopscotch  monokai\n\nimport 'codemirror/theme/panda-syntax.css'; //提示css\n\nimport \"codemirror/addon/hint/show-hint.css\"; // 需要引入具体的语法高亮库才会有对应的语法高亮效果\n// codemirror 官方其实支持通过 /addon/mode/loadmode.js 和 /mode/meta.js 来实现动态加载对应语法高亮库\n// 但 vue 貌似没有无法在实例初始化后再动态加载对应 JS ，所以此处才把对应的 JS 提前引入\n\nimport 'codemirror/mode/javascript/javascript.js';\nimport 'codemirror/mode/css/css.js';\nimport 'codemirror/mode/xml/xml.js';\nimport 'codemirror/mode/clike/clike.js';\nimport 'codemirror/mode/markdown/markdown.js';\nimport 'codemirror/mode/python/python.js';\nimport 'codemirror/mode/r/r.js';\nimport 'codemirror/mode/shell/shell.js';\nimport 'codemirror/mode/sql/sql.js';\nimport 'codemirror/mode/swift/swift.js';\nimport 'codemirror/mode/vue/vue.js'; // 尝试获取全局实例\n\nvar CodeMirror = window.CodeMirror || _CodeMirror;\nexport default {\n  name: 'JCodeEditor',\n  props: {\n    // 外部传入的内容，用于实现双向绑定\n    value: {\n      type: String,\n      default: ''\n    },\n    // 外部传入的语法类型\n    language: {\n      type: String,\n      default: null\n    },\n    languageChange: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    placeholder: {\n      type: String,\n      default: null\n    },\n    // 显示行号\n    lineNumbers: {\n      type: Boolean,\n      default: true\n    },\n    // 是否显示全屏按钮\n    fullScreen: {\n      type: Boolean,\n      default: false\n    },\n    // 全屏以后的z-index\n    zIndex: {\n      type: [Number, String],\n      default: 999\n    }\n  },\n  data: function data() {\n    return {\n      // 内部真实的内容\n      code: '',\n      hasCode: false,\n      // 默认的语法类型\n      mode: 'javascript',\n      // 编辑器实例\n      coder: null,\n      // 默认配置\n      options: {\n        // 缩进格式\n        tabSize: 2,\n        // 主题，对应主题库 JS 需要提前引入\n        theme: 'panda-syntax',\n        line: true,\n        // extraKeys: {'Ctrl': 'autocomplete'},//自定义快捷键\n        hintOptions: {\n          tables: {\n            users: ['name', 'score', 'birthDate'],\n            countries: ['name', 'population', 'size']\n          }\n        }\n      },\n      // 支持切换的语法高亮类型，对应 JS 已经提前引入\n      // 使用的是 MIME-TYPE ，不过作为前缀的 text/ 在后面指定时写死了\n      modes: [{\n        value: 'css',\n        label: 'CSS'\n      }, {\n        value: 'javascript',\n        label: 'Javascript'\n      }, {\n        value: 'html',\n        label: 'XML/HTML'\n      }, {\n        value: 'x-java',\n        label: 'Java'\n      }, {\n        value: 'x-objectivec',\n        label: 'Objective-C'\n      }, {\n        value: 'x-python',\n        label: 'Python'\n      }, {\n        value: 'x-rsrc',\n        label: 'R'\n      }, {\n        value: 'x-sh',\n        label: 'Shell'\n      }, {\n        value: 'x-sql',\n        label: 'SQL'\n      }, {\n        value: 'x-swift',\n        label: 'Swift'\n      }, {\n        value: 'x-vue',\n        label: 'Vue'\n      }, {\n        value: 'markdown',\n        label: 'Markdown'\n      }],\n      // code 编辑器 是否全屏\n      fullCoder: false\n    };\n  },\n  watch: {\n    // value: {\n    //   immediate: false,\n    //   handler(value) {\n    //     this._getCoder().then(() => {\n    //       this.coder.setValue(value)\n    //     })\n    //   }\n    // },\n    language: {\n      immediate: true,\n      handler: function handler(language) {\n        var _this2 = this;\n\n        this._getCoder().then(function () {\n          // 尝试从父容器获取语法类型\n          if (language) {\n            // 获取具体的语法类型对象\n            var modeObj = _this2._getLanguage(language); // 判断父容器传入的语法是否被支持\n\n\n            if (modeObj) {\n              _this2.mode = modeObj.label;\n\n              _this2.coder.setOption('mode', \"text/\".concat(modeObj.value));\n            }\n          }\n        });\n      }\n    }\n  },\n  computed: {\n    placeholderShow: function placeholderShow() {\n      if (this.placeholder == null) {\n        return \"\\u8BF7\\u5728\\u6B64\\u8F93\\u5165\".concat(this.language, \"\\u4EE3\\u7801\");\n      } else {\n        return this.placeholder;\n      }\n    },\n    nullTipStyle: function nullTipStyle() {\n      if (this.lineNumbers) {\n        return {\n          left: '36px'\n        };\n      } else {\n        return {\n          left: '12px'\n        };\n      }\n    },\n    // coder 配置\n    coderOptions: function coderOptions() {\n      return {\n        tabSize: this.options.tabSize,\n        theme: this.options.theme,\n        lineNumbers: this.lineNumbers,\n        line: true,\n        hintOptions: this.options.hintOptions\n      };\n    },\n    fullScreenParentProps: function fullScreenParentProps() {\n      var props = {\n        class: ['full-screen-parent', this.fullCoder ? 'full-screen' : ''],\n        style: {}\n      };\n\n      if (this.fullCoder) {\n        props.style['z-index'] = this.zIndex;\n      }\n\n      return props;\n    }\n  },\n  mounted: function mounted() {\n    // 初始化\n    this._initialize();\n  },\n  methods: {\n    // 初始化\n    _initialize: function _initialize() {\n      var _this3 = this;\n\n      // 初始化编辑器实例，传入需要被实例化的文本域对象和默认配置\n      this.coder = CodeMirror.fromTextArea(this.$refs.textarea, this.coderOptions); // 编辑器赋值\n\n      this.coder.setValue(this.value || this.code);\n\n      if (this.value || this.code) {\n        this.hasCode = true;\n      } else {\n        this.hasCode = false;\n      } // 支持双向绑定\n\n\n      this.coder.on('change', function (coder) {\n        _this3.code = coder.getValue();\n\n        if (_this3.code) {\n          _this3.hasCode = true;\n        } else {\n          _this3.hasCode = false;\n        }\n\n        if (_this3.$emit) {\n          _this3.$emit('input', _this3.code);\n        }\n      });\n      this.coder.on('focus', function () {\n        _this3.hasCode = true;\n      });\n      this.coder.on('blur', function () {\n        if (_this3.code) {\n          _this3.hasCode = true;\n        } else {\n          _this3.hasCode = false;\n        }\n      });\n      /* this.coder.on('cursorActivity',()=>{\n         this.coder.showHint()\n       })*/\n    },\n    getCodeContent: function getCodeContent() {\n      return this.code;\n    },\n    setCodeContent: function setCodeContent(val) {\n      this.coder.setValue(val);\n    },\n    // 获取当前语法类型\n    _getLanguage: function _getLanguage(language) {\n      // 在支持的语法类型列表中寻找传入的语法类型\n      return this.modes.find(function (mode) {\n        // 所有的值都忽略大小写，方便比较\n        var currentLanguage = language.toLowerCase();\n        var currentLabel = mode.label.toLowerCase();\n        var currentValue = mode.value.toLowerCase(); // 由于真实值可能不规范，例如 java 的真实值是 x-java ，所以讲 value 和 label 同时和传入语法进行比较\n\n        return currentLabel === currentLanguage || currentValue === currentLanguage;\n      });\n    },\n    _getCoder: function _getCoder() {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        (function get() {\n          if (_this.coder) {\n            resolve(_this.coder);\n          } else {\n            setTimeout(get, 10);\n          }\n        })();\n      });\n    },\n    // 更改模式\n    changeMode: function changeMode(val) {\n      // 修改编辑器的语法配置\n      this.coder.setOption('mode', \"text/\".concat(val)); // 获取修改后的语法\n\n      var label = this._getLanguage(val).label.toLowerCase(); // 允许父容器通过以下函数监听当前的语法值\n\n\n      this.$emit('language-change', label);\n    },\n    nullTipClick: function nullTipClick() {\n      this.coder.focus();\n    }\n  }\n};",null]}